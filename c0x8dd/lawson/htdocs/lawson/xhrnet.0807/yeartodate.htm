<html>
<head>
<title>Year to Date</title>
<meta name="viewport" content="width=device-width" />
<META HTTP-EQUIV="Pragma" CONTENT="No-Cache">
<link rel="stylesheet" type="text/css" id="default" title="default" href="/lawson/xhrnet/ui/default.css"/>
<script src="/lawson/webappjs/commonHTTP.js"></script>
<script src="/lawson/webappjs/data.js"></script>
<script src="/lawson/xhrnet/waitalert.js"></script>
<script src="/lawson/xhrnet/esscommon80.js"></script>
<script src="/lawson/xhrnet/yeartodate.js"></script>
<script src="/lawson/webappjs/user.js"></script>
<script src="/lawson/xhrnet/xml/xmlcommon.js"></script>
<script src="/lawson/xhrnet/ui/ui.js"></script>
<script src="/lawson/webappjs/javascript/objects/StylerBase.js?emss"></script>
<script src="/lawson/webappjs/javascript/objects/emss/StylerEMSS.js"></script>
<script src="/lawson/webappjs/javascript/objects/Sizer.js"></script>
<script src="/lawson/webappjs/javascript/objects/ActivityDialog.js"></script>
<script src="/lawson/webappjs/javascript/objects/OpaqueCover.js"></script>
<script src="/lawson/webappjs/javascript/objects/Dialog.js"></script>
<script>
//////////////////////////////////////////////////////////////////////////////////////////
// Authenticate call
//

var detailHtml;
var selectedYear;
//NOTE: The FUTUREPAYMTS setting has been moved to the xhrnet/xml/config/emss_config.xml file.
var thisYr = ymdtoday.substring(0,4)

function StartPayChecksProgram()
{
	authenticate("frameNm='jsreturn'|funcNm='AuthenticationComplete()'|desiredEdit='EM'");
}

function AuthenticationComplete()
{
	if (window.print)
	{
		var printBtn = document.getElementById("printbtn");
		printBtn.innerHTML = getSeaPhrase("PRINT","ESS");
		self.printframe.stylePage();
	}
    stylePage();
	// Set the task title.
	setTaskHeader("header",getSeaPhrase("YEAR_TO_DATE","ESS"),"Pay");
	document.title = getSeaPhrase("YEAR_TO_DATE","ESS");
	showWaitAlert(getSeaPhrase("PROCESSING_WAIT","ESS"));
	GetQuartwage("PaintPayCheckHistory()");
}

//////////////////////////////////////////////////////////////////////////////////////////
// Paint front page containing the years user can drill down
//

function PaintPayCheckHistory()
{
	var strHtml = "";

	if (PayChecks.Year.length == 0) {
		strHtml += '<div class="fieldlabelboldleft" style="padding-top:5px;padding-left:5px">';
		strHtml += getSeaPhrase("NO_YTD_INFO","ESS");
		strHtml += '</div>';
	}
	else {
		strHtml += '<body>';
		strHtml += '<div style="padding-top:3px">';
    	strHtml += '<table border="0" cellspacing="0" cellpadding="0" width="100%">';
		strHtml += '<tr>';
		strHtml += '<td class="fieldlabelbold" style="width:50%">';
		strHtml += getSeaPhrase("SELECT_A_YEAR","ESS");
		strHtml += '</td>';
		strHtml += '<td class="plaintablecell" style="width:50%" nowrap>';
		strHtml += '<select class="inputbox" id="year" name="year" ';
		strHtml += 'onmouseover="window.status=\''+getSeaPhrase("VIEW_PAYMENTS","ESS").replace(/\'/g,"\\'")+'\';return true" ';
		strHtml += 'onmouseout="window.status=\'\';return true" ';
		strHtml += 'onchange="parent.GetYTDForYear(this)">';
		strHtml += '<option value="">';

		for (var i=0;i<PayChecks.Year.length;i++)
		{
			// This will filter out the payroll year if the current year is lesser than the payroll year.
			//<= is used so that the current year is not missed out which will happen if < or > is used.
			if (emssObjInstance.emssObj.futurePayments || (Number(PayChecks.Year[i].Year) <= Number(thisYr)))
			{
				strHtml += '<option value="'+PayChecks.Year[i].Year+'">'
				strHtml += PayChecks.Year[i].Year
			}
		}

		strHtml += '</select>';
		strHtml += '</td>';
		strHtml += '</table>';
		strHtml += '</div>';
		strHtml += '</body>';
	}

	try {
		self.yearselect.document.getElementById("paneHeader").innerHTML = getSeaPhrase("YEARS","ESS");
		self.yearselect.document.getElementById("paneBody").innerHTML = strHtml;
	}
	catch(e) {}

	self.yearselect.setLayerSizes();
	self.yearselect.stylePage();
	document.getElementById("yearselect").style.visibility = "visible";
	removeWaitAlert();
	fitToScreen();
}

function GetYTDForYear(selObj)
{
	selectedYear = "";
	selectedYear = selObj.options[selObj.selectedIndex].value;
	if (selectedYear != "") {
		if (PayChecks.YearDetail[selectedYear]) {
			PaintPaymentDetail(Number(selectedYear));
		}
		else {
			// if future payments should be displayed or we are viewing payments for a prior year, pull the records from the QUART files;
			// otherwise pull them from PAYMASTER and PAYDEDUCTN
			var thisYear = authUser.date.substring(0,4);
			if (emssObjInstance.emssObj.futurePayments || Number(selectedYear) < Number(thisYear)) {
				GetQuartDed(Number(selectedYear),"PaintPaymentDetail("+Number(selectedYear)+")");
			}
			else {
				GetYTDPaymentsForYear(Number(selectedYear),"PaintPaymentDetail("+Number(selectedYear)+")");
			}	
		}
	}
	else {
		ClearYTDHistory();
	}
}

function ClearYTDHistory()
{
	HidePaymentLink();
	HidePrintButton();
	document.getElementById("ytddetail").style.visibility = "hidden";
	document.getElementById("paycheck").style.visibility = "hidden";
	self.paycheck.location.replace("/lawson/xhrnet/dot.htm");
}

//////////////////////////////////////////////////////////////////////////////////////////
// Paint drill information
//

function PaintPaymentDetail(year)
{
	detailHtml = "";
	PayChecks.TotalWagesEarned(year);
	PayChecks.TotalDeductionsEarned(year);
	var pYearObj = PayChecks.FindYear(year);
	var tblHtml = "";

//////////////
//	WAGES	//
//////////////

	for (var i=0; i<pYearObj.Country.length; i++)
	{
		for(var j=0; j<pYearObj.Country[i].Currency.length; j++)
		{
			// Tables by country and currency: pYearObj.Country[i].Code+' - '+pYearObj.Country[i].Currency[j].Description
			tblHtml = '<table class="plaintableborder" border="0" cellspacing="0" cellpadding="0" width="100%" styler="list">'
			+ '<tr>'
			+ '<th class="plaintableheaderborder" style="text-align:center;width:47%">'
			+ getSeaPhrase("PAY_TYPE","ESS")+'</th>'
			+ '<th class="plaintableheaderborder" style="text-align:center;width:26%">'
			+ getSeaPhrase("HOURS","ESS")+'</th>'
			+ '<th class="plaintableheaderborder" style="text-align:center;width:27%">'
			+ getSeaPhrase("WAGES","ESS")+'</th>'
			+ '</tr>'

			var pWageObj = pYearObj.Country[i].Currency[j].Wages;
			for (var k=0; k<pWageObj.PaySumGrp.length; k++)
			{
 				if(pWageObj.PaySumGrp[k].TotalHours || pWageObj.PaySumGrp[k].TotalWages)
				{
					tblHtml += '<tr>'
					+ '<td class="plaintablecellborderright" style="width:47%" nowrap>'
					+ ((pWageObj.PaySumGrp[k].Description)?pWageObj.PaySumGrp[k].Description:'&nbsp;')+'</td>'
					+ '<td class="plaintablecellborderright" style="width:26%" nowrap>'
					+ ((roundToPennies(pWageObj.PaySumGrp[k].TotalHours))?roundToPennies(pWageObj.PaySumGrp[k].TotalHours):'&nbsp;')+'</td>'
					+ '<td class="plaintablecellborderright" style="width:27%" nowrap>'
					+ ((roundToPennies(pWageObj.PaySumGrp[k].TotalWages))?roundToPennies(pWageObj.PaySumGrp[k].TotalWages):'&nbsp;')+'</td>'
		  			+ '</tr>'
				}
			}

			tblHtml += '<tr>'
			+ '<td class="plaintablecellboldborderright" style="width:47%" nowrap>'
			+ getSeaPhrase("TOTAL","ESS")+'</td>'
			+ '<td class="plaintablecellborderright" style="width:26%" nowrap>'
			+ ((roundToPennies(pWageObj.TotalHours))?roundToPennies(pWageObj.TotalHours):'&nbsp;')+'</td>'
			+ '<td class="plaintablecellborderright" style="width:27%" nowrap>'
			+ ((roundToPennies(pWageObj.TotalWages))?roundToPennies(pWageObj.TotalWages):'&nbsp;')+'</td>'
			+ '</tr>'
			+ '</table>'

			var titleStr = getSeaPhrase("WAGES","ESS")
			+ ' - '+pYearObj.Country[i].Currency[j].Description+', '+pYearObj.Country[i].Code;

			detailHtml += uiTable(titleStr,tblHtml);

			if (pYearObj.Country[i].Code == "CA") {
				detailHtml += CAPayCheckFormat(pYearObj, i, j);
			}
			else {
				detailHtml += USPayCheckFormat(pYearObj, i, j);
			}
		}
	}

	// hide the paycheck listing, if it is visible
	document.getElementById("paycheck").style.visibility = "hidden";
	self.paycheck.location.replace("/lawson/xhrnet/dot.htm");
	document.getElementById("ytddetail").style.visibility = "visible";

	// write table HTML to the detail frame
	if (detailHtml != "") {	
		try {
			self.ytddetail.document.getElementById("paneBody").innerHTML = detailHtml;
		}
		catch(e) {}

		self.ytddetail.stylePage();
		self.ytddetail.setLayerSizes();
		ShowPrintButton();		
	}

	// display a link to the paycheck task for the selected year
	if (self.yearselect.document.getElementById("year").selectedIndex > 0) {
		document.getElementById("paymentlink").innerHTML = '<a href="" onclick="GetPaymentsForYear();return false">'
		+ getSeaPhrase("PAYMENT_DETAILS","ESS")
		+ '</a>';
		ShowPaymentLink();
    }
    else {
    	HidePaymentLink();
    }
    removeWaitAlert();
    fitToScreen();
}

function GetPaymentsForYear()
{
	var selObj = self.yearselect.document.getElementById("year");
	var selectedYear = Number(selObj.options[selObj.selectedIndex].value);

	showWaitAlert(getSeaPhrase("RETRIEVE_PAYMENT_INFO","ESS"));
	self.paycheck.location.replace("/lawson/xhrnet/paytyear.htm?year="+escape(selectedYear,1)+"&from=yeartodate");
	document.getElementById("yearselect").style.zIndex = "2";
	document.getElementById("ytddetail").style.zIndex = "2";
	document.getElementById("paycheck").style.zIndex = "1";
	HidePaymentLink();
	//document.getElementById("paycheck").style.visibility = "visible";
}

function HideYTDDetail()
{
	document.getElementById("ytddetail").style.visibility = "hidden";
	HidePrintButton();
	document.getElementById("paymentlink").innerHTML = '<a href="" onclick="BackToYearToDate();return false">'
	+ getSeaPhrase("BACK_TO_YTD","ESS")
	+ '</a>';
}

function ShowPrintButton()
{
	if (window.print)
	{
		document.getElementById("printbtn").style.visibility = "visible";
	}
}

function HidePrintButton()
{
	if (window.print)
	{
		document.getElementById("printbtn").style.visibility = "hidden";
	}
}

function ShowPaymentLink()
{
	document.getElementById("paymentlayer").style.visibility = "visible";	
}

function HidePaymentLink()
{
	document.getElementById("paymentlayer").style.visibility = "hidden";	
}

function BackToYearToDate()
{
	var selObj = self.yearselect.document.getElementById("year");
	GetYTDForYear(selObj);
}

//////////////////////////////////////////////////////////////////////////////////////////
// United states and default view
//

function USPayCheckFormat(pYearObj, i, j)
{
	var Index = 1;
	var tblStr = "";
	var rtnStr = "";

//////////////////////////////////////
//	TAXES & DEDUCTIONS - US FORMAT	//
/////////////////////////////////////

	while (Index < 7)
	{
		if (DoesSectionContainValues(Index, pYearObj.Country[i].Currency[j].Ded.DeductionGroups))
		{
			tblStr = '<table class="plaintableborder" border="0" cellspacing="0" cellpadding="0" width="100%" styler="list">'
			+ '<tr>'
			+ '<th class="plaintableheaderborder" style="text-align:center;width:47%">'
			+ getSeaPhrase("DEDUCTION","ESS")+'</th>'
			+ '<th class="plaintableheaderborder" style="text-align:center;width:26%">'
			+ getSeaPhrase("AMOUNT","ESS")+'</th>'

			if (Index == 1 || Index == 5) {
				tblStr += '<th class="plaintableheaderborder" style="text-align:center;width:27%">'
				+ getSeaPhrase("TAXABLE_WAGES","ESS")+'</th>';
			}
			else {
				tblStr += '<th class="plaintableheaderborder" style="text-align:center;width:27%">&nbsp;</th>';
			}

			tblStr += '</tr>';

			var TotalAmount = 0;
			var pDedObj = pYearObj.Country[i].Currency[j].Ded;

			for (var k=0; k<pDedObj.DeductionGroups.length; k++)
			{
				if ((pDedObj.DeductionGroups[k].Section == 1
				|| pDedObj.DeductionGroups[k].Section == 5)
				&& (pDedObj.DeductionGroups[k].Section == Index))
				{
					tblStr += '<tr>'
					+ '<td class="plaintablecellborderright" style="width:47%" nowrap>'
					+ ((pDedObj.DeductionGroups[k].Description)?pDedObj.DeductionGroups[k].Description:'&nbsp;')+'</td>'
					+ '<td class="plaintablecellborderright" style="width:26%" nowrap>'
					+ ((roundToPennies(pDedObj.DeductionGroups[k].TotalAmount))?roundToPennies(pDedObj.DeductionGroups[k].TotalAmount):'&nbsp;')+'</td>'
					+ '<td class="plaintablecellborderright" style="width:27%" nowrap>'
					+ ((roundToPennies(pDedObj.DeductionGroups[k].TotalWages))?roundToPennies(pDedObj.DeductionGroups[k].TotalWages):'&nbsp;')+'</td>'
					+ '</tr>';

					TotalAmount += (roundToPennies(Number(pDedObj.DeductionGroups[k].TotalAmount)))?Number(roundToPennies(Number(pDedObj.DeductionGroups[k].TotalAmount))):Number(0);
				}
				else if ((pDedObj.DeductionGroups[k].Section == 2
				|| pDedObj.DeductionGroups[k].Section == 3
				|| pDedObj.DeductionGroups[k].Section == 4
				|| pDedObj.DeductionGroups[k].Section == 6)
				&& (pDedObj.DeductionGroups[k].Section == Index))
				{
					tblStr += '<tr>'
					+ '<td class="plaintablecellborderright" style="width:47%" nowrap>'
					+ ((pDedObj.DeductionGroups[k].Description)?pDedObj.DeductionGroups[k].Description:'&nbsp;')+'</td>'
					+ '<td class="plaintablecellborderright" style="width:26%" nowrap>'
					+ ((roundToPennies(pDedObj.DeductionGroups[k].TotalAmount))?roundToPennies(pDedObj.DeductionGroups[k].TotalAmount):'&nbsp;')+'</td>'
					+ '<td class="plaintablecellborderright" style="width:27%" nowrap>&nbsp;</td>'
					+ '</tr>';

					TotalAmount += (roundToPennies(Number(pDedObj.DeductionGroups[k].TotalAmount)))?Number(roundToPennies(Number(pDedObj.DeductionGroups[k].TotalAmount))):Number(0);
				}
			}

			// Totals table row
			tblStr += '<tr>'
			+ '<td class="plaintablecellboldborderright" style="width:47%" nowrap>'
			+ getSeaPhrase("TOTAL","ESS")+'</td>'
			+ '<td class="plaintablecellborderright" style="width:26%" nowrap>'
			+ ((roundToPennies(TotalAmount))?roundToPennies(TotalAmount):'&nbsp;')+'</td>'
			+ '<td class="plaintablecellborderright" style="width:27%" nowrap>&nbsp;</td>'
			+ '</tr>'
			+ '</table>';

			switch(Index)
			{
				case 1:	rtnStr += uiTable(getSeaPhrase("TAXES","ESS"),tblStr); break;
				case 2:	rtnStr += uiTable(getSeaPhrase("PRE_TAX_DEDUCTIONS","ESS"),tblStr);	break;
				case 3:	rtnStr += uiTable(getSeaPhrase("AFTER_TAX_DEDUCTIONS","ESS"),tblStr); break;
				case 4:	rtnStr += uiTable(getSeaPhrase("ADD_TO_NET_PAY","ESS"),tblStr); break;
				case 5:	rtnStr += uiTable(getSeaPhrase("COMPANY_TAXES","ESS"),tblStr); break;
				case 6:	rtnStr += uiTable(getSeaPhrase("COMPANY_DEDUCTIONS","ESS"),tblStr); break;
				default: break;
			}
		}
		Index++;
	}
	return rtnStr;
}

//////////////////////////////////////////////////////////////////////////////////////////
// Canadian view
//

function CAPayCheckFormat(pYearObj, i, j)
{
	var Index = 1;
	var tblStr = "";
	var rtnStr = "";

//////////////////////////////////////
//	TAXES & DEDUCTIONS - CA FORMAT	//
/////////////////////////////////////

	while (Index < 7)
	{
		if(DoesSectionContainValues(Index, pYearObj.Country[i].Currency[j].Ded.DeductionGroups))
		{
			tblStr = '<table class="plaintableborder" border="0" cellspacing="0" cellpadding="0" width="100%" styler="list">'
			+ '<tr>'
			+ '<th class="plaintableheaderborder" style="text-align:center;width:47%">'
			+ getSeaPhrase("DEDUCTION","ESS")+'</th>'
			+ '<th class="plaintableheaderborder" style="text-align:center;width:26%">'
			+ getSeaPhrase("AMOUNT","ESS")+'</th>'

			if (Index == 1 || Index == 4) {
				tblStr += '<th class="plaintableheaderborder" style="text-align:center;width:27%">'
				+ getSeaPhrase("TAXABLE_WAGES","ESS")+'</th>';
			}
			else {
				tblStr += '<th class="plaintableheaderborder" style="text-align:center;width:27%">&nbsp;</th>';
			}

			tblStr += '</tr>';

			var TotalAmount = 0;
			var pDedObj = pYearObj.Country[i].Currency[j].Ded;

			for (var k=0; k<pDedObj.DeductionGroups.length; k++)
			{
				if ((pDedObj.DeductionGroups[k].Section == 1
				|| pDedObj.DeductionGroups[k].Section == 4)
				&& (pDedObj.DeductionGroups[k].Section == Index))
				{
					tblStr += '<tr>'
					+ '<td class="plaintablecellborderright" style="width:47%" nowrap>'
					+ ((pDedObj.DeductionGroups[k].Description)?pDedObj.DeductionGroups[k].Description:'&nbsp;')+'</td>'
					+ '<td class="plaintablecellborderright" style="width:26%" nowrap>'
					+ ((roundToPennies(pDedObj.DeductionGroups[k].TotalAmount))?roundToPennies(pDedObj.DeductionGroups[k].TotalAmount):'&nbsp;')+'</td>'
					+ '<td class="plaintablecellborderright" style="width:27%" nowrap>'
					+ ((roundToPennies(pDedObj.DeductionGroups[k].TotalWages))?roundToPennies(pDedObj.DeductionGroups[k].TotalWages):'&nbsp;')+'</td>'
					+ '</tr>';

					TotalAmount += (roundToPennies(Number(pDedObj.DeductionGroups[k].TotalAmount)))?Number(roundToPennies(Number(pDedObj.DeductionGroups[k].TotalAmount))):Number(0);
				}
				else if((pDedObj.DeductionGroups[k].Section == 2
				|| pDedObj.DeductionGroups[k].Section == 3)
				&& (pDedObj.DeductionGroups[k].Section == Index))
				{
					tblStr += '<tr>'
					+ '<td class="plaintablecellborderright" style="width:47%" nowrap>'
					+ ((pDedObj.DeductionGroups[k].Description)?pDedObj.DeductionGroups[k].Description:'&nbsp;')+'</td>'
					+ '<td class="plaintablecellborderright" style="width:26%" nowrap>'
					+ ((roundToPennies(pDedObj.DeductionGroups[k].TotalAmount))?roundToPennies(pDedObj.DeductionGroups[k].TotalAmount):'&nbsp;')+'</td>'
					+ '<td class="plaintablecellborderright" style="width:27%" nowrap>&nbsp;</td>'
					+ '</tr>';

					TotalAmount += (roundToPennies(Number(pDedObj.DeductionGroups[k].TotalAmount)))?Number(roundToPennies(Number(pDedObj.DeductionGroups[k].TotalAmount))):Number(0);
				}
			}

			// Totals table row
			tblStr += '<tr>'
			+ '<td class="plaintablecellboldborderright" style="width:47%" nowrap>'
			+ getSeaPhrase("TOTAL","ESS")+'</td>'
			+ '<td class="plaintablecellborderright" style="width:26%" nowrap>'
			+ ((roundToPennies(TotalAmount))?roundToPennies(TotalAmount):'&nbsp;')+'</td>'
			+ '<td class="plaintablecellborderright" style="width:27%" nowrap>&nbsp;</td>'
			+ '</tr>'
			+ '</table>';

			switch(Index)
			{
				case 1:	rtnStr += uiTable(getSeaPhrase("DEDUCTIONS","ESS"),tblStr); break;
				case 2:	rtnStr += uiTable(getSeaPhrase("TAXABLE_BENEFITS","ESS"),tblStr);	break;
				case 3:	rtnStr += uiTable(getSeaPhrase("ADD_TO_NET_PAY","ESS"),tblStr); break;
				case 4:	rtnStr += uiTable(getSeaPhrase("COMPANY_TAXES","ESS"),tblStr); break;
				case 5:	rtnStr += uiTable(getSeaPhrase("COMPANY_DEDUCTIONS","ESS"),tblStr); break;
				default: break;
			}
		}
		Index++;
	}
	return rtnStr;
}

function printForm()
{
	var empName = (PayChecks && PayChecks.EmployeeName) ? PayChecks.EmployeeName : authUser.name; 
	var headerHtml = '<table>'	
		+ '<tr>'
		+ '<td class="plaintablecell"><span class="dialoglabel" style="padding:0px;margin:0px">' + getSeaPhrase("EMPLOYEE_NAME","ESS") + ':</span></td>'
		+ '<td class="plaintablecell">' + empName + '</td>'
		+ '</tr>'	
		+ '<tr>'
		+ '<td class="plaintablecell"><span class="dialoglabel" style="padding:0px;margin:0px">' + getSeaPhrase("EMPLOYEE_NUMBER","ESS") + ':</span></td>'
		+ '<td class="plaintablecell">' + authUser.employee + '</td>'
		+ '</tr>'					
		+ '</table><div style="height:20px">&nbsp;</div>';
		
    self.printframe.document.title = getSeaPhrase("YEAR_TO_DATE","ESS") + " - " + selectedYear;
	self.printframe.document.body.innerHTML = headerHtml + detailHtml;
	self.printframe.stylePage();
	self.printframe.focus();
	self.printframe.print();
}

function fitToScreen()
{
	if (typeof(window["styler"]) == "undefined" || window.styler == null)
	{
		window.stylerWnd = findStyler(true);
	}

	if (!window.stylerWnd)
	{
		return;
	}

	if (typeof(window.stylerWnd["StylerEMSS"]) == "function")
	{
		window.styler = new window.stylerWnd.StylerEMSS();
	}
	else
	{
		window.styler = window.stylerWnd.styler;
	}

	var winWidth = 1024;	
	var winHeight = 768;

	// resize the table frame to the screen dimensions
	if (document.body.clientHeight)
	{
		winHeight = document.body.clientHeight;
		winWidth = document.body.clientWidth;
	}
	else if (window.innerHeight)
	{
		winHeight = window.innerHeight;
		winWidth = window.innerWidth;
	}

	var contentLeftWidth;
	var contentLeftBorderWidth;
	var contentRightWidth;
	var contentRightBorderWidth;
	var contentTopHeight;
	var contentTopBorderHeight;	
	var contentHeight;
	var contentBorderHeight;
	
	if (window.styler && window.styler.showInfor)
	{
		contentLeftWidth = parseInt(winWidth*.40,10) - 10;
		var elmPad = 2;
		if ((navigator.appName.indexOf("Microsoft") >= 0) && (!document.documentMode || document.documentMode < 8))
			elmPad = 7;		
		contentLeftBorderWidth = contentLeftWidth + elmPad;
		contentRightWidth = parseInt(winWidth*.60,10) - 10;
		contentRightBorderWidth = contentRightWidth + elmPad;
		contentTopHeight = parseInt(winHeight*.20,10) - 30;
		contentTopBorderHeight = (navigator.appName.indexOf("Microsoft") >= 0) ? contentTopHeight + 30 : contentTopHeight + 25;		
		contentHeight = winHeight - 50;
		contentBorderHeight = (navigator.appName.indexOf("Microsoft") >= 0) ? contentHeight + 30 : contentHeight + 25;	
	}
	else if (window.styler && window.styler.showLDS)
	{
		contentLeftWidth = parseInt(winWidth*.40,10) - 20;
		contentLeftBorderWidth = contentLeftWidth + 17;
		contentRightWidth = parseInt(winWidth*.60,10) - 20;
		contentRightBorderWidth = contentRightWidth + 17;
		contentTopHeight = parseInt(winHeight*.20,10) - 30;
		contentTopBorderHeight = (navigator.appName.indexOf("Microsoft") >= 0) ? contentTopHeight + 30 : contentTopHeight + 25;	
		contentHeight = winHeight - 50;
		contentBorderHeight = (navigator.appName.indexOf("Microsoft") >= 0) ? contentHeight + 30 : contentHeight + 25;				
	}
	else
	{
		contentLeftWidth = parseInt(winWidth*.40,10) - 10;
		contentLeftBorderWidth = contentLeftWidth;
		contentRightWidth = parseInt(winWidth*.60,10) - 10;
		contentRightBorderWidth = contentRightWidth;
		contentTopHeight = parseInt(winHeight*.20,10) - 30;
		contentTopBorderHeight = contentTopHeight + 24;	
		contentHeight = winHeight - 50;
		contentBorderHeight = contentHeight + 24;				
	}	
	if (self.yearselect.onresize && self.yearselect.onresize.toString().indexOf("setLayerSizes") >= 0)
	{
		self.yearselect.onresize = null;
	}	
	try
	{
		document.getElementById("yearselect").style.height = parseInt(winHeight*.20,10) + "px";
		self.yearselect.document.getElementById("paneBorder").style.width = contentLeftBorderWidth + "px";
		self.yearselect.document.getElementById("paneBorder").style.height = contentTopBorderHeight + "px";		
		self.yearselect.document.getElementById("paneBodyBorder").style.width = contentLeftWidth + "px";
		self.yearselect.document.getElementById("paneBodyBorder").style.height = contentTopHeight + "px";
		self.yearselect.document.getElementById("paneBody").style.width = contentLeftWidth + "px";
		self.yearselect.document.getElementById("paneBody").style.height = contentTopHeight + "px";
		self.yearselect.document.getElementById("paneBody").style.overflow = "auto";		
	}
	catch(e)
	{}		
	if (self.ytddetail.onresize && self.ytddetail.onresize.toString().indexOf("setLayerSizes") >= 0)
	{
		self.ytddetail.onresize = null;
	}	
	try
	{
		document.getElementById("ytddetail").style.left = parseInt(winWidth*.40,10) + "px";
		document.getElementById("ytddetail").style.height = winHeight + "px";
		self.ytddetail.document.getElementById("paneBorder").style.width = contentRightBorderWidth + "px";
		self.ytddetail.document.getElementById("paneBorder").style.height = contentBorderHeight + "px";		
		self.ytddetail.document.getElementById("paneBodyBorder").style.width = contentRightWidth + "px";
		self.ytddetail.document.getElementById("paneBodyBorder").style.height = contentHeight + "px";
		self.ytddetail.document.getElementById("paneBody").style.width = contentRightWidth + "px";
		self.ytddetail.document.getElementById("paneBody").style.height = contentHeight + "px";
		self.ytddetail.document.getElementById("paneBody").style.overflow = "auto";		
	}
	catch(e)
	{}
	document.getElementById("paycheck").style.width = winWidth + "px";
	document.getElementById("paycheck").style.height = winHeight + "px";
	if (window.styler && window.styler.textDir == "rtl")
	{
		document.getElementById("yearselect").style.left = "";
		document.getElementById("yearselect").style.right = "0px";
		document.getElementById("paycheck").style.left = "";
		document.getElementById("paycheck").style.right = "0px";
		document.getElementById("ytddetail").style.left = "0px";
		document.getElementById("paymentlayer").style.left = "0px";
	}
	else
	{
		document.getElementById("ytddetail").style.left = parseInt(winWidth*.40,10) + "px";
		document.getElementById("paymentlayer").style.left = parseInt(winWidth*.40,10) + "px";
	}		
}
</script>
</head>
<body style="width:100%;height:100%;overflow:hidden" onload="StartPayChecksProgram()" onresize="fitToScreen()">
	<div id="paymentlayer" class="plaintableheadertallwhite" style="visibility:hidden;position:absolute;height:24px;left:40%;width:60%;top:26px;z-index:999">
	<table border="0" cellspacing="0" cellpadding="0" width="100%">
	<tr>
	<td id="paymentlink" class="plaintableheadertallwhite" style="padding-left:0px;vertical-align:middle">&nbsp;</td>
	<td class="plaintableheadertallwhite" style="padding-left:0px;padding-top:0px;vertical-align:top">
	<div id="btnlayer" class="buttonBar"><button onclick="printForm();return false" id="printbtn" class="button" style="visibility:hidden" styler="pushbutton">Print</button></div>
	</td>	
	</tr>
	</table>
	</div>
	<iframe id="header" name="header" style="visibility:hidden;position:absolute;height:32px;width:803px;left:0px;top:0px" src="/lawson/xhrnet/ui/header.htm" frameborder="no" marginwidth="0" marginheight="0" scrolling="no"></iframe>
	<iframe id="yearselect" name="yearselect" src="/lawson/xhrnet/ui/headerpane.htm" style="visibility:hidden;position:absolute;left:0px;width:40%;top:32px;height:120px" frameborder="no" marginwidth="0" marginheight="0" scrolling="no"></iframe>
	<iframe id="ytddetail" name="ytddetail" src="/lawson/xhrnet/ui/pane.htm" style="visibility:hidden;position:absolute;left:40%;width:60%;top:48px;height:464px" frameborder="no" marginwidth="0" marginheight="0" scrolling="no"></iframe>
	<iframe id="paycheck" name="paycheck" src="/lawson/xhrnet/dot.htm" style="visibility:hidden;position:absolute;left:0px;width:803px;top:32px;height:464px" frameborder="no" marginwidth="0" marginheight="0" scrolling="no"></iframe>
	<iframe id="jsreturn" name="jsreturn" style="visibility:hidden;height:0px;width:0px;" src="/lawson/xhrnet/dot.htm" frameborder="no" marginwidth="0" marginheight="0" scrolling="no"></iframe>
	<iframe id="printframe" name="printframe" src="/lawson/xhrnet/ui/pane.htm" style="visibility:visible;height:1px;width:100%" frameborder="no" marginwidth="0" marginheight="0" scrolling="no"></iframe>
</body>
</html>
<!-- Version: 8-)@(#)@10.00.02.00.29 -->
<!-- $Header: /cvs/cvs_archive/applications/webtier/shr/src/xhrnet/yeartodate.htm,v 1.4.2.32 2012/06/29 17:12:06 brentd Exp $ -->
<!--************************************************************
 *                                                             *
 *                           NOTICE                            *
 *                                                             *
 *   THIS SOFTWARE IS THE PROPERTY OF AND CONTAINS             *
 *   CONFIDENTIAL INFORMATION OF INFOR AND/OR ITS              *
 *   AFFILIATES OR SUBSIDIARIES AND SHALL NOT BE DISCLOSED     *
 *   WITHOUT PRIOR WRITTEN PERMISSION. LICENSED CUSTOMERS MAY  *
 *   COPY AND ADAPT THIS SOFTWARE FOR THEIR OWN USE IN         *
 *   ACCORDANCE WITH THE TERMS OF THEIR SOFTWARE LICENSE       *
 *   AGREEMENT. ALL OTHER RIGHTS RESERVED.                     *
 *                                                             *
 *   (c) COPYRIGHT 2012 INFOR.  ALL RIGHTS RESERVED.           *
 *   THE WORD AND DESIGN MARKS SET FORTH HEREIN ARE            *
 *   TRADEMARKS AND/OR REGISTERED TRADEMARKS OF INFOR          *
 *   AND/OR ITS AFFILIATES AND SUBSIDIARIES. ALL               *
 *   RIGHTS RESERVED.  ALL OTHER TRADEMARKS LISTED HEREIN ARE  *
 *   THE PROPERTY OF THEIR RESPECTIVE OWNERS.                  *
 *                                                             *
 ************************************************************-->
