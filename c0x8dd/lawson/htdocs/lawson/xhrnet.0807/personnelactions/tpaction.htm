<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Personnel Actions</title>
<meta name="viewport" content="width=device-width" />
<script type="text/javascript" src="/lawson/webappjs/data.js"></script>
<script type="text/javascript" src="/lawson/webappjs/transaction.js"></script>
<script type="text/javascript" src="/lawson/webappjs/common.js"></script>
<script type="text/javascript" src="/lawson/webappjs/commonHTTP.js"></script>
<script type="text/javascript" src="/lawson/webappjs/user.js"></script>
<script type="text/javascript" src="/lawson/xhrnet/email.js"></script>
<script type="text/javascript" src="/lawson/xhrnet/esscommon80.js"></script>
<script type="text/javascript" src="/lawson/xhrnet/dr.js"></script>
<script type="text/javascript" src="/lawson/xhrnet/prlockout.js"></script>
<script type="text/javascript" src="/lawson/xhrnet/empinfo.js"></script>
<script type="text/javascript" src="/lawson/xhrnet/xml/xmldateroutines.js"></script>
<script type="text/javascript" src="/lawson/xhrnet/xml/xmlcommon.js"></script>
<script type="text/javascript" src="/lawson/xhrnet/ui/ui.js"></script>
<script src="/lawson/webappjs/javascript/objects/Transaction.js"></script>
<script src="/lawson/webappjs/javascript/objects/ProcessFlow.js"></script>
<script type="text/javascript" src="/lawson/xhrnet/personnelactions/personnelactionsfiles/pactionslib.js"></script>
<script type="text/javascript">
var fromTask = (window.location.search)?unescape(window.location.search):"";
var empIndex = "";
var Rules = new Array();
var appObj;
var positionFldIndex = -1;
var salaryClassFldIndex = -1;
var payRateFldIndex = -1;
var gradeFldIndex = -1;
var stepFldIndex = -1;
// DirectReports defined in dr.js
if (fromTask)
{
	empIndex = getVarFromString("index",fromTask);
}

if (empIndex && NonSpace(empIndex)!=0) {
	DirectReports = parent.emps;
	for (var i=0; i<parent.emps.length; i++) {
		DirectReports[i].Code = parent.emps[i].employee;
		DirectReports[i].FullName = parent.emps[i].full_name;
	}
} else {
	empIndex = -1;
}

function doAuthentication()
{
	authenticate("frameNm='jsreturn'|funcNm='AuthenticateFinished()'|sysenv=true|desiredEdit='EM'");
}

function AuthenticateFinished()
{
    stylePage();
	// to initialize fmttoday
	StoreDateRoutines();

	if (fromTask) {
		parent.showWaitAlert(getSeaPhrase("ACTION_LOADING","ESS"));
	}

	fitToScreen();
	getLawsonApplicationVersion();
}

function getLawsonApplicationVersion()
{
	if (!appObj)
		appObj = new AppVersionObject(authUser.prodline, "HR");

	// if you call getAppVersion() right away and the IOS object isn't set up yet,
	// then the code will be trying to load the sso.js file, and your call for
	// the appversion will complete before the ios version is set
	if (iosHandler.getIOS() == null || iosHandler.getIOSVersionNumber() == null)
	{
       		setTimeout("getLawsonApplicationVersion()", 10);
       		return;
	}


	Call_HS10(authUser.company, authUser.employee, "PERSONNEL", false);
}

function sortByName(obj1, obj2)
{
	var name1 = obj1.LastName + ' ' + obj1.FullName;
	var name2 = obj2.LastName + ' ' + obj2.FullName;
	if (name1 < name2)
		return -1;
	else if (name1 > name2)
		return 1;
	else
		return 0;
}

function Do_HS10_1_Call_PERSONNEL_Finished()
{
	if (DirectReports.length > 0) {
		DirectReports.sort(sortByName);
	}
	else {
		parent.seaAlert(getSeaPhrase("NO_DIRECT_REPORTS","ESS"));
	}

	Rules = new Array();
	var obj	= new DMEObject(authUser.prodline, "PERSACTYPE");
	obj.out = "JAVASCRIPT";
	obj.field = "action-code;description;web-available;web-avail-supv;web-immediate;workflow-flag";

	if (appObj && appObj.getAppVersion() != null && appObj.getAppVersion().toString() >= "09.00.01")
	{
		obj.field += ";require-reason;dft-reason;action-reason.act-reason-cd";
		obj.otmmax = "1";
	}

	obj.key = parseInt(authUser.company,10) + "=TERMPEND";
	obj.max	= "1";
	obj.debug = false;
	obj.func = "getActionFinished()";
	DME(obj, "jsreturn");
}

function getActionFinished()
{
	for (var n=0; n<self.jsreturn.NbrRecs; n++) {
		var obj = self.jsreturn.record[n];
		var len = Rules.length;
		Rules[len] = new RulesObject(obj.description, obj.action_code, obj.web_available,
			obj.web_avail_supv, obj.web_immediate, obj.workflow_flag);
		if (appObj && appObj.getAppVersion() != null && appObj.getAppVersion().toString() >= "09.00.01")
		{
			if (obj.require_reason != "" && !isNaN(parseInt(obj.require_reason, 10)))
			{
				Rules[len].NbrRequiredReasons = obj.require_reason;
			}
			if (obj.dft_reason_1 != "")
			{
				Rules[len].DefaultReasonCode1 = obj.dft_reason_1;
			}
			if (obj.dft_reason_2 != "")
			{
				Rules[len].DefaultReasonCode2 = obj.dft_reason_2;
			}
			if (obj.action_reason_act_reason_cd != "")
			{
				Rules[len].ReasonCodesExist = true;
			}
		}
	}
	paintEmployeeActionSelects();
	setDefaultReasonCodes();
	GetTermReasons('V');
}

function startOver()
{
	var obj = self.main.document.getElementById("fieldsTable");
	if (obj != null && typeof(obj) == "object")
	{
		obj.innerHTML = "";
	}
	//clearRequiredKeyFields();
	self.main.document.getElementById("continueButton").style.visibility = "visible";
	self.document.getElementById("main").style.visibility = "visible";
	self.main.setLayerSizes();
	self.main.stylePage();
	fitToScreen();
}

// Populate any default reason codes for the selected action.
function setDefaultReasonCodes()
{
	var reason1Obj = self.main.document.getElementById("reasonSelect1");
	var reason2Obj = self.main.document.getElementById("reasonSelect2");

	if (emssObjInstance.emssObj.filterSelect)
	{
		_RULESINDEX = 0;

		reason2Obj.value = "";
	}
	else
	{
		_RULESINDEX = 0;

		reasonCodes = new Array();
		removeAllSelectItems(reason2Obj);
	}


	if (Rules.length == 0 || _RULESINDEX < 0)
	{
		return;
	}

	if (Rules[_RULESINDEX].NbrRequiredReasons > 0)
	{
		self.main.document.getElementById("reasonSelect1RequiredIcon").style.display = "";
		if (Rules[_RULESINDEX].NbrRequiredReasons > 1)
		{
			self.main.document.getElementById("reasonSelect2RequiredIcon").style.display = "";
		}
		else
		{
			self.main.document.getElementById("reasonSelect2RequiredIcon").style.display = "none";
		}
	}
	else
	{
		self.main.document.getElementById("reasonSelect1RequiredIcon").style.display = "none";
		self.main.document.getElementById("reasonSelect2RequiredIcon").style.display = "none";
	}

	if (emssObjInstance.emssObj.filterSelect)
	{
		if (Rules[_RULESINDEX].DefaultReasonCode1 != null)
		{
			self.main.document.getElementById("reasonSelect1").value = Rules[_RULESINDEX].DefaultReasonCode1;
		}
	}
	else
	{
		if (Rules[_RULESINDEX].DefaultReasonCode1 != null)
		{
			var dataArray = new Array();
			dataArray[0] = new Object();
			dataArray[0].name = Rules[_RULESINDEX].DefaultReasonCode1;
			dataArray[0].code = Rules[_RULESINDEX].DefaultReasonCode1;
			generateSelectOptions("reasonSelect1", dataArray, true);
			var reason1s = self.main.document.getElementById("reasonSelect1");
			self.main.styleElement(reason1s)

		}
	}

	if (emssObjInstance.emssObj.filterSelect)
	{
		if (Rules[_RULESINDEX].DefaultReasonCode2 != null)
		{
			self.main.document.getElementById("reasonSelect2").value = Rules[_RULESINDEX].DefaultReasonCode2;
		}
	}
	else
	{
		if (Rules[_RULESINDEX].DefaultReasonCode2 != null)
		{
			var dataArray = new Array();
			dataArray[0] = new Object();
			dataArray[0].name = Rules[_RULESINDEX].DefaultReasonCode2;
			dataArray[0].code = Rules[_RULESINDEX].DefaultReasonCode2;
			generateSelectOptions("reasonSelect2", dataArray, true);
			var reason2s = self.main.document.getElementById("reasonSelect2");
			self.main.styleElement(reason2s)

		}
	}
}

function generateReportsSelect()
{
	var html = '<select id="reportsSelect" class="inputbox" onchange="parent.startOver();return false">';
	if (empIndex == -1)
		html += '<option value="" selected="selected"></option>';
	else
		html += '<option value=""></option>';
	for (var i=0; i<DirectReports.length; i++) {
		html += '<option value="' + DirectReports[i].Code + '"';
		if (empIndex == i)
			html += ' selected="selected"';
		html += '>' + DirectReports[i].FullName + '</option>';
	}
	html += '</select>';
	return html;
}


function ReturnDate(date)
{
	 var effectiveDate = self.main.document.getElementById("effectiveDate");
	 var oldDate = effectiveDate.value;
	 effectiveDate.value = date;
	 if (oldDate != date)
	 	startOver();	
}

function generateReasonSelect(i)
{
	var htmlStr;

	htmlStr = '<span id="reasonSelect' + i + 'Cell">';
	//GDD  First line needs to be blank because of delivered code

	if (i == 1) {
		htmlStr += '<select id="reasonSelect'+i+'" class="inputbox" style="width:100px" onchange="parent.ResetReason2(this);return false"';
		htmlStr += '>';
		htmlStr += '<option value=""></option>';
		htmlStr += '<option value="TOV" selected>Voluntary</option>';
		htmlStr += '<option value="TOI">Involuntary</option>';
		htmlStr += '</select>';
	}
	else {
		htmlStr += '<select id="reasonSelect'+i+'" class="inputbox" style="width:200px">';
		htmlStr += '</select>';
	}
	htmlStr += '</span>';
	return htmlStr;
}

//GDD  reset selected index if blank selected because of delivered code
function ResetReason2(obj)
{

	var reason1 = obj.value;
	if (obj.selectedIndex == 0) reason1 = "TOV";
	GetTermReasons(reason1.substring(2,3));
}

function GetTermReasons(TermType)
{
	var object 		= new DMEObject(authUser.prodline,"PAACTREAS")
	object.out 	= "JAVASCRIPT"
	object.index	= "creset3"
	object.field	= "act-reason-cd;description"
	object.key	= String(authUser.company);
		
	if (Rules[_RULESINDEX].ReasonCodesExist)
	{
		object.index	= "creset4"
		object.key += "=" + Rules[_RULESINDEX].ActionCode;
	}
	object.select   = "description%7E"+TermType+"-";
	object.cond 	= "active";
	object.func     = "LoadSelect2()";
	object.max	= "600"
	object.debug 	= false;
	DME(object,"jsreturn")

}

function LoadSelect2()
{
	var select2Obj = self.main.document.getElementById("reasonSelect2");
	for (var k=0;k<select2Obj.options.length;k++) {
		select2Obj.options[i] = null;
	}
	select2Obj.options.length = 0;
	var option = document.createElement("option");
	option.value = "";
	option.text = "";
	select2Obj.options.add(option);
	for (var i=0;i<self.jsreturn.NbrRecs;i++) {
		var option = document.createElement("option");
		option.value = self.jsreturn.record[i].act_reason_cd;
		option.text = self.jsreturn.record[i].description.substring(2);
		select2Obj.options.add(option);
	}
	select2Obj.selectedIndex = 1;
	startOver();
} 


function paintEmployeeActionSelects()
{
	self.main.document.getElementById("paneHeader").innerHTML = getSeaPhrase("PERSONNEL_ACTION_CRITERIA","ESS");

	var htmlStr = '<table style="width:auto" border="0" cellspacing="0" cellpadding="0">';
	htmlStr += '<tr>';
	htmlStr += '<td class="fieldlabelboldleft" style="padding-left:10px"><label for="reportsSelect">'+getSeaPhrase("SELECT_EMPLOYEE","ESS")+'</label></td>';
	htmlStr += '<input type="hidden" id="actionsSelect" class="inputbox" size="10" maxlength="10" value="TERMPEND">'
	htmlStr += '</tr>';
	
	htmlStr += '<tr>';
	htmlStr += '<td class="plaintablecell" style="padding-left:10px" nowrap><span id="reportsCell">'+generateReportsSelect()+'</span>'+uiRequiredIcon()+'</td>';
	htmlStr += '</td>';
	htmlStr += '</tr>';

	htmlStr += '<tr>';
	htmlStr += '<td class="fieldlabelboldleft" style="padding-top:10px;padding-left:10px"><label for="effectiveDate">Termination Date</label></td>';
	htmlStr += '<td class="fieldlabelboldleft" style="padding-top:10px" colspan="2"><label for="reasonSelect1"><label for="reasonSelect2">'+getSeaPhrase("SELECT_REASON","ESS")+'</label></label></td>';
	htmlStr += '</tr>';

	htmlStr += '<tr>';
	htmlStr += '<td id="effectiveDateCell" class="plaintablecell" style="vertical-align:top;padding-left:10px" nowrap>';
	htmlStr += '<input class="inputbox" id="effectiveDate" type="text" size="12" maxlength="10" value="'+fmttoday+'" onchange="parent.startOver();return false;">';
	htmlStr += '<a href="" onclick="parent.DateSelect(\'date\');return false">';
    htmlStr += uiCalendarIcon()+'</a>'+uiDateFormatSpan3()+uiRequiredIcon();
    htmlStr += '</td>';
	htmlStr += '<td class="plaintablecell" style="vertical-align:top">';

	if (emssObjInstance.emssObj.filterSelect)
	{
		htmlStr += '<table border="0" cellspacing="0" cellpadding="0">';
		htmlStr += '<tr><td class="plaintablecell" nowrap><span id="reasonSelect1Cell">'+generateReasonSelect(1)+'</span><span id="reasonSelect1RequiredIcon" style="display:none">'+uiRequiredIcon()+'</span></td><td><span id="reasonSelect2Cell">'+generateReasonSelect(2)+'</span><span id="reasonSelect2RequiredIcon" style="display:none">'+uiRequiredIcon()+'</span></td></tr>';
		htmlStr += '</table>';
	}
	else
	{
		htmlStr += '<span id="reasonSelect1Cell" style="white-space:nowrap">'+generateReasonSelect(1)+'</span><span id="reasonSelect1RequiredIcon" style="display:none">'+uiRequiredIcon()+'</span>';
		htmlStr += ' ';
		htmlStr += '<span id="reasonSelect2Cell" style="white-space:nowrap">'+generateReasonSelect(2)+'</span><span id="reasonSelect2RequiredIcon" style="display:none">'+uiRequiredIcon()+'</span>';
	}

    htmlStr += '</td>';
    
    htmlStr += '<td class="plaintablecellright" style="vertical-align:top" nowrap>';
	htmlStr += '<span id="continueButton">';
	if (empIndex != -1) {
		htmlStr += uiButton(getSeaPhrase("CONTINUE","ESS"),"parent.continueClicked();return false","margin-top:0px");
		htmlStr += uiButton(getSeaPhrase("BACK","ESS"),"parent.parent.backToMain('personnelactions');return false","margin-top:0px;margin-right:5px;margin-left:5px;");
	}
	else {
		htmlStr += uiButton(getSeaPhrase("CONTINUE","ESS"),"parent.continueClicked();return false","margin-top:0px;margin-right:5px;margin-left:5px");
	}
	htmlStr += '</span>';
	htmlStr += '</td>';
	htmlStr += '</tr>';

	htmlStr += '</table>';
	htmlStr += '<div id="fieldsTable" class="floatLeft" style="position:relative;top:0px;width:auto;height:auto"></div>';

	self.main.document.getElementById("paneBody").innerHTML = htmlStr;
	self.main.stylePage();
	if (fromTask) {
		parent.removeWaitAlert();
	}
	fitToScreen();
}

var _DRINDEX = 0;
var _RULESINDEX = 0;

function continueClicked()
{
	if (self.main.document.getElementById("reportsSelect").selectedIndex <= 0) {
		setRequiredField(self.main.document.getElementById("reportsCell"));
		parent.seaAlert(getSeaPhrase("SELECT_EMPLOYEE","ESS"));
		return;
	} else
		clearRequiredField(self.main.document.getElementById("reportsCell"));

	if (self.main.document.getElementById("reasonSelect1").selectedIndex == 0) {
		parent.seaAlert("Must select Voluntary or Involuntary");
		self.main.document.getElementById("reasonSelect1").selectedIndex = 1;
		return;
	}

	if (self.main.document.getElementById("reasonSelect2").selectedIndex == 0) {
		parent.seaAlert("Must enter secondary reason");
		return;
	}

	if (emssObjInstance.emssObj.filterSelect) {
		if (NonSpace(self.main.document.getElementById("actionsSelect").value) == 0) {
			setRequiredField(self.main.document.getElementById("actionsSelect"));
			parent.seaAlert(getSeaPhrase("SELECT_PERSONNEL_ACTION","ESS"));
			return;
		} else if (Rules.length == 0 && lookUpUserEnteredActionCode(self.main.document.getElementById("actionsSelect"), "continueClicked()")) {
			// validate user entered action code
			return;
		} else if (Rules[_RULESINDEX].ActionCode == "INVALID_ACTION_CODE") {
			setRequiredField(self.main.document.getElementById("actionsSelect"));
			parent.seaAlert(getSeaPhrase("INVALID_PERSONNEL_ACTION","ESS"));
			return;
		} else
			clearRequiredField(self.main.document.getElementById("actionsSelect"));
	} else {
		if (self.main.document.getElementById("actionsSelect").selectedIndex <= 0) {
			setRequiredField(self.main.document.getElementById("actionsCell"));
			parent.seaAlert(getSeaPhrase("SELECT_PERSONNEL_ACTION","ESS"));
			return;
		} else
			clearRequiredField(self.main.document.getElementById("actionsCell"));
	}

	if (NonSpace(self.main.document.getElementById("effectiveDate").value) == 0) {
		setRequiredField(self.main.document.getElementById("effectiveDate"));
		parent.seaAlert(getSeaPhrase("MUST_ENTER_DATE","ESS"));
		return;
	} else if (!dateIsValid(self.main.document.getElementById("effectiveDate").value)) {
		setRequiredField(self.main.document.getElementById("effectiveDate"));
		return;
	} else {
		self.main.document.getElementById("effectiveDate").value = FormatDte4(formjsDate(dateIsValid(self.main.document.getElementById("effectiveDate").value)));
		clearRequiredField(self.main.document.getElementById("effectiveDate"));
	}

/*	if (emssObjInstance.emssObj.filterSelect) {
		clearRequiredField(self.main.document.getElementById("reasonSelect1"));
		clearRequiredField(self.main.document.getElementById("reasonSelect2"));
	} else {
		clearRequiredField(self.main.document.getElementById("reasonSelect1Cell"));
		clearRequiredField(self.main.document.getElementById("reasonSelect2Cell"));
	}  */

	self.main.document.getElementById("continueButton").style.visibility = "hidden";

	_DRINDEX = self.main.document.getElementById("reportsSelect").selectedIndex - 1;
	if (emssObjInstance.emssObj.filterSelect) {
		_RULESINDEX = 0;
	} else {
		_RULESINDEX = self.main.document.getElementById("actionsSelect").selectedIndex - 1;
	}
	Rules[_RULESINDEX].EffectiveDate = self.main.document.getElementById("effectiveDate").value;
	//Sync immediate flag to the rules; on an immediate action, the user may have elected to pend the same action for a different effective date
	Rules[_RULESINDEX].WebImmediate = Rules[_RULESINDEX].OrigWebImmediate;
	
	GetPersactypeForSecondWindow();
	self.main.stylePage();
}

function validateEffectiveDate()
{
	if (NonSpace(self.main.document.getElementById("effectiveDate").value) == 0) {
		setRequiredField(self.main.document.getElementById("effectiveDate"));
		parent.seaAlert(getSeaPhrase("MUST_ENTER_DATE","ESS"));
		return false;
	} else if (!dateIsValid(self.main.document.getElementById("effectiveDate").value)) {
		setRequiredField(self.main.document.getElementById("effectiveDate"));
		return false;
	} else {
		self.main.document.getElementById("effectiveDate").value = FormatDte4(formjsDate(dateIsValid(self.main.document.getElementById("effectiveDate").value)));
		clearRequiredField(self.main.document.getElementById("effectiveDate"));
	}
	return true;
}

function generateFieldSelect(selectID, fldNbr, where, changeText, maxLen)
{
	var maxLenStr = (maxLen) ? ' maxlength="'+maxLen+'"' : '';
	var htmlStr = '';
	if ((2000 <= fldNbr) && (fldNbr <= 2099)) {
		// launch user fields as pop-ups, and allow user to enter value in text box
		htmlStr = '<input type="text" id="'+selectID+'" class="inputbox" style="width:250px" value="';
		if (typeof(changeText)!="undefined" && changeText!=null)
			htmlStr += changeText;
		htmlStr += '"'+maxLenStr+'><a href="" onclick="parent.MakeCallToDME(\''+selectID+'\', '+fldNbr+', \''+where+'\', true);return false">';
		htmlStr += '<img src="/lawson/xhrnet/ui/images/ico_form_dropmenu.gif" border="0" style="margin-bottom:-3px" alt="'+getSeaPhrase("SELECT_VALUE","ESS")+'">';
		htmlStr += '</a>';
	} else if ((where == "DME") && (emssObjInstance.emssObj.filterSelect)) {
		// launch user fields as pop-ups, and allow user to enter value in text box
		if (fldNbr == 136) {
			htmlStr += '<input type="hidden" id="'+selectID+'_indicator" class="inputbox">';
			htmlStr += '<input type="hidden" id="'+selectID+'_effectdate" class="inputbox">';
			htmlStr += '<input type="text" id="'+selectID+'" class="inputbox" style="width:250px" onkeyup="parent.main.document.getElementById(\''+selectID+'_indicator\').value=\'\';parent.main.document.getElementById(\''+selectID+'_effectdate\').value=\'\';parent.main.document.getElementById(\'xlt_'+selectID+'\').innerHTML=\'\';" value="';
			if (typeof(changeText)!="undefined" && changeText!=null)
				htmlStr += changeText;
			htmlStr += '"'+maxLenStr+'>';
		} else {
			htmlStr += '<input type="text" id="'+selectID+'" class="inputbox" style="width:250px" onkeyup="parent.main.document.getElementById(\'xlt_'+selectID+'\').innerHTML=\'\';" value="';
			if (typeof(changeText)!="undefined" && changeText!=null)
				htmlStr += changeText;
			htmlStr += '"'+maxLenStr+'>';
		}
		htmlStr += '<a href="" onclick="parent.MakeCallToDME(\''+selectID+'\', '+fldNbr+', \''+where+'\', true);return false">';
		htmlStr += '<img src="/lawson/xhrnet/ui/images/ico_form_dropmenu.gif" border="0" style="margin-bottom:-3px" alt="'+getSeaPhrase("SELECT_VALUE","ESS")+'">';
		htmlStr += '</a><span class="fieldlabelleft" style="width:250px" id="xlt_'+selectID+'"></span>';
	} else {
		htmlStr = '<select id="'+selectID+'" class="inputbox" style="width:250px"';
		htmlStr += ' onclick="parent.MakeCallToDME(\''+selectID+'\', '+fldNbr+', \''+where+'\');return false"';
		if (fldNbr == 64) {
			htmlStr += ' onchange="parent.CalculatePayRatePercentage();return false"';
		} else if (fldNbr == 136) {
			htmlStr += ' onchange="parent.ScheduleChanged();return false"';
		}
		htmlStr += '>';
		// treat an existing value on a pending action the same as a default value, so it will get removed when the user
		// clicks on the dropdown to populate the complete list of field values.
		if (typeof(changeText)!="undefined" && changeText!=null) {
			htmlStr += '<option value="DEFAULT_VALUE"></option>';
			htmlStr += '<option value="'+changeText+'" selected="">'+changeText+'</option>';
		}
		else {
			htmlStr += '<option value=""></option>';
		}
		htmlStr += '</select>';
	}
	return htmlStr;
}

function PaintFieldsForAction()
{
	positionFldIndex = -1;
	salaryClassFldIndex = -1;
	payRateFldIndex = -1;
	gradeFldIndex = -1;
	stepFldIndex = -1;

	var htmlStr = '<p id="pendOrNotMsg" class="fieldlabelboldleft">';
	if (Rules[_RULESINDEX].WebImmediate == "Y") {
		htmlStr += getSeaPhrase("ACTION_PEND_A","ESS");
		htmlStr += '&nbsp;<input id="pendOrNot" type="checkbox">';
	} else
		htmlStr += getSeaPhrase("ACTION_PEND_B","ESS");
	htmlStr += "</p>";

	htmlStr += '<table class="plaintableborder" style="border-left:0px;width:100%" align="center" cellpadding="0" cellspacing="0" styler="list" styler_edit="true">';
	htmlStr += '<tr>';
	htmlStr += '<th class="plaintableheaderbordersidesbold" style="width:33%">'+getSeaPhrase("FIELD","ESS")+'</th>';
	htmlStr += '<th class="plaintableheaderborder" style="width:33%">'+getSeaPhrase("CURRENT_VALUE","ESS")+'</th>';
	htmlStr += '<th class="plaintableheaderborder" style="width:33%" styler_edit="true">'+getSeaPhrase("CHANGE_TO","ESS")+'</th>';
	htmlStr += '</tr>';

	if (!Data.length)
	{
		htmlStr += '<tr><td class="fieldlabelbold" style="text-align:center" colspan="3">'+getSeaPhrase("NO_FIELDS","ESS")+'</td></tr>';
	}
	else 
	{
		var maxFldLen = (appObj && appObj.getAppVersion() != null && appObj.getAppVersion().toString() >= "10.00.00") ? 60 : 30;
		for (var n=0; n<Data.length; n++) 
		{
			htmlStr += '<tr>';
			if (Data[n].FldNbr == 62) 
			{
				htmlStr += '<td class="plaintableheaderbordersidesonly" style="white-space:nowrap" nowrap="nowrap"><label for="percentage'+n+'">'+((Data[n].Field)?Data[n].Field:'&nbsp;')+'</label></td>';
				htmlStr += '<td class="plaintablerowheaderdisplay" style="white-space:nowrap" nowrap="nowrap"><label for="fieldSelect'+n+'">'+((Data[n].CurrentValue)?Data[n].CurrentValue:'&nbsp;')+'</label></td>';
			}
			else 
			{
				htmlStr += '<td class="plaintableheaderbordersidesonly" style="white-space:nowrap" nowrap="nowrap"><label for="fieldSelect'+n+'">'+((Data[n].Field)?Data[n].Field:'&nbsp;')+'</label></td>';
				htmlStr += '<td class="plaintablerowheaderdisplay" style="white-space:nowrap" nowrap="nowrap"><label for="fieldSelect'+n+'">'+((Data[n].CurrentValue)?Data[n].CurrentValue:'&nbsp;')+'</label></td>';
			}
			htmlStr += '<td id="actionFldCell'+n+'" class="plaintablecell" style="white-space:nowrap" nowrap="nowrap">';
			if (Data[n].FldNbr == 62) 
			{
				payRateFldIndex = n;
				var rateAmount = (Data[n].ChangeText) ? roundToDecimal(parseFloat(((Data[n].ChangeText/Data[n].CurrentValue)-1)*100),4) : '';
				htmlStr += '<input class="inputbox" type="text" size="9" maxlength="9" id="percentage'+n+'" name="percentage'+n+'"';
				htmlStr += ' onBlur="parent.Calculate('+n+',\'percent\')" value="'+rateAmount+'">';
				htmlStr += '<span class="plaintablecell">% =</span>';
				htmlStr += '<input class="inputbox" type="text" size="15" id="fieldSelect'+n+'" name="select'+n+'"';
				htmlStr += ' onchange="parent.Calculate('+n+',\'amount\')" value="';
				if (typeof(Data[n].ChangeText)!="undefined" && Data[n].ChangeText!=null && NonSpace(Data[n].ChangeText)>0) {
					htmlStr += roundToDecimal(Data[n].ChangeText, 4);
				}
				htmlStr += '">';
			}
			else if (Data[n].FldNbr == 20) {
				htmlStr += '<input type="text" id="fieldSelect'+n+'" class="text" style="width:250px" value="TP" readonly>';
			}
			else 
			{
				if (Data[n].FldNbr == 64) 
				{
					salaryClassFldIndex = n;
				}
				else if (Data[n].FldNbr == 126) 
				{
					positionFldIndex = n;
				}
				else if (Data[n].FldNbr == 134) 
				{
					stepFldIndex = n;
				}
				else if (Data[n].FldNbr == 135) 
				{
					gradeFldIndex = n;
				}
				else if (Data[n].FldNbr == 140) 
				{
					// if we are running on top of 8.1.1 applications, perform a DME to get the veteran status select;
					// otherwise use a hard-coded value list.
					if (appObj && appObj.getAppVersion() != null && appObj.getAppVersion().toString() >= "08.01.01")
					{
						DMEFunctions[140] = "GetHrctrycode('VS')";
					}
					else
					{
						HardCodedLists[140] =  VeteranLiterals;
					}
				}

				if (typeof(HardCodedLists[Data[n].FldNbr])!="undefined" && HardCodedLists[Data[n].FldNbr]!=null)
				{
					htmlStr += generateFieldSelect("fieldSelect"+n, Data[n].FldNbr, "HARDCODED", Data[n].ChangeText, maxFldLen);
				}
				else if (typeof(DMEFunctions[Data[n].FldNbr])!="undefined" && DMEFunctions[Data[n].FldNbr]!=null)
				{
					htmlStr += generateFieldSelect("fieldSelect"+n, Data[n].FldNbr, "DME", Data[n].ChangeText, maxFldLen);
				}
				else if (2000<=Data[n].FldNbr && Data[n].FldNbr<=2099)
				{
					htmlStr += generateFieldSelect("fieldSelect"+n, Data[n].FldNbr, Data[n].FldNbr.toString().substring(2), Data[n].ChangeText, maxFldLen);
				}
				else 
				{
					htmlStr += '<input class="inputbox" type="text" id="fieldSelect'+n+'" name="fieldSelect'+n+'" style="width:250px" maxlength="'+maxFldLen+'" value="';
					if (typeof(Data[n].ChangeText)!="undefined" && Data[n].ChangeText!=null)
						htmlStr += Data[n].ChangeText;
					htmlStr += '">';
				}
			}
			htmlStr += '</td></tr>';
		}
		
		var commentText = (Comments) ? Comments.Text : "";
		htmlStr += '<tr><td class="plaintableheaderbordersides" style="white-space:nowrap" nowrap="nowrap">'+getSeaPhrase("COMMENTS","ESS") + '</th>'
		+ '<td class="plaintablerowheaderborderbottomdisplay" style="white-space:nowrap" nowrap="nowrap">&nbsp;</td>'
		+ '<td class="plaintablecell" style="white-space:nowrap" nowrap="nowrap"><textarea name="comments" id="comments" value="" rows="4" cols="31"'
		+ ' class="inputbox" style="width:250px" onfocus="this.select()">'+ commentText +'</textarea></td></tr>'
	}
	htmlStr += '<tr>';
	htmlStr += '<td class="plaintablecell" style="white-space:nowrap" nowrap="nowrap">&nbsp;</td><td class="plaintablecell" style="white-space:nowrap" nowrap="nowrap">&nbsp;</td>';
	htmlStr += '<td class="plaintablecell" style="white-space:nowrap" nowrap="nowrap">';
	htmlStr += uiButton(getSeaPhrase("UPDATE","ESS"),"parent.Update("+positionFldIndex+");return false");

	if (positionFldIndex >= 0) {
		htmlStr += uiButton(getSeaPhrase("FILL_DEFAULTS","ESS"),"parent.fillDefaults("+positionFldIndex+");return false","margin-left:5px");
	}

	htmlStr += uiButton(getSeaPhrase("CANCEL","ESS"),"parent.cancelClicked();return false","margin-left:5px");
	htmlStr += '</td>';
	htmlStr += '</tr>';
	htmlStr += '</table>';

    self.main.document.getElementById("fieldsTable").innerHTML = htmlStr;
	self.main.stylePage();
	fitToScreen();
}

function cancelClicked()
{
	if (emssObjInstance.emssObj.filterSelect)
	{
		Rules = new Array();
		self.main.document.getElementById("actionsSelect").value = "";
		try
		{
			self.main.document.getElementById("xlt_actionsSelect").innerHTML ="";
		}
		catch(e)
		{}
	}
	else
	{
		self.main.document.getElementById("actionsSelect").selectedIndex = 0;
		var actionS = self.main.document.getElementById("actionsSelect");
		self.main.styleElement(actionS)
	}
	self.main.document.getElementById("effectiveDate").value = "";
	self.main.document.getElementById("reasonSelect1").selectedIndex = 0;
	self.main.document.getElementById("reasonSelect2").selectedIndex = 0;
	var reason1s = self.main.document.getElementById("reasonSelect1");
	self.main.styleElement(reason1s);
	var reason2s = self.main.document.getElementById("reasonSelect2");
	self.main.styleElement(reason2s);
	startOver();
}

function RulesObject(Description, ActionCode, WebAvail, WebAvailSuper, WebImmediate, WorkFlowFlag)
{
	this.Description = Description;
	this.ActionCode = ActionCode;
	this.WebAvail = WebAvail;
	this.WebAvailSuper = WebAvailSuper;
	this.WebImmediate = WebImmediate;
	this.OrigWebImmediate = WebImmediate;
	this.WorkFlowFlag = WorkFlowFlag;
	this.EffectiveDate = null;
	this.Reason1 = null;
	this.Reason2 = null;
	this.ActionType = null;
	this.Company = null;
	this.Employee = null;
	this.FicaNbr = null;
	this.EmployeeName = null;
	this.UpdateBenefit = null;
	this.ReasonText = null;
	this.EmailAddress = null;
	this.DoEmail = 0;
	this.AddressChange = false;
	this.SuppAddrChange = false;
	this.SchoolDist = "";
	this.OldState = "";
	this.NewState = "";
	this.EmpTaxFilter = 0;
	this.PrsEmpTaxAddr = 0;
	this.PrsTaxFilter = 0;
	this.DefaultReasonCode1 = null;
	this.DefaultReasonCode2 = null;
	this.ReasonCodesExist = false;
	this.NbrRequiredReasons = 0;
	this.CommentsFlag = null;
	this.ActionNbr = "";
}

function fitToScreen()
{
	if (typeof(window["styler"]) == "undefined" || window.styler == null)
	{
		window.stylerWnd = findStyler(true);
	}

	if (!window.stylerWnd)
	{
		return;
	}

	if (typeof(window.stylerWnd["StylerEMSS"]) == "function")
	{
		window.styler = new window.stylerWnd.StylerEMSS();
	}
	else
	{
		window.styler = window.stylerWnd.styler;
	}

	var winHeight = 768;
	var winWidth = 1024;

	// resize the table frame to the screen dimensions
	if (document.body.clientHeight)
	{
		winHeight = document.body.clientHeight;
		winWidth = document.body.clientWidth;
	}
	else if (window.innerHeight)
	{
		winHeight = window.innerHeight;
		winWidth = window.innerWidth;
	}

	var contentWidth;
	var contentBorderWidth;
	var contentHeight;
	var contentBorderHeight;	
	
	if (window.styler && window.styler.showInfor)
	{
		contentWidth = winWidth - 10;
		contentBorderWidth = (navigator.appName.indexOf("Microsoft") >= 0) ? contentWidth + 7 : contentWidth + 2;
		contentHeight = winHeight - 65;
		contentBorderHeight = (navigator.appName.indexOf("Microsoft") >= 0) ? contentHeight + 30 : contentHeight + 25;	
	}
	else if (window.styler && window.styler.showLDS)
	{
		contentWidth = winWidth - 20;
		contentBorderWidth = contentWidth + 17;
		contentHeight = winHeight - 65;
		contentBorderHeight = (navigator.appName.indexOf("Microsoft") >= 0) ? contentHeight + 30 : contentHeight + 25;				
	}
	else
	{
		contentWidth = winWidth - 10;
		contentBorderWidth = contentWidth;
		contentHeight = winHeight - 65;
		contentBorderHeight = contentHeight + 24;				
	}	
	if (self.main.onresize && self.main.onresize.toString().indexOf("setLayerSizes") >= 0)
	{
		self.main.onresize = null;
	}	
	try
	{
		document.getElementById("main").style.height = winHeight + "px";
		document.getElementById("main").style.width = winWidth + "px";
		self.main.document.getElementById("paneBorder").style.width = contentBorderWidth + "px";
		self.main.document.getElementById("paneBorder").style.height = contentBorderHeight + "px";		
		self.main.document.getElementById("paneBodyBorder").style.width = contentWidth + "px";
		self.main.document.getElementById("paneBodyBorder").style.height = contentHeight + "px";
		self.main.document.getElementById("paneBody").style.width = contentWidth + "px";
		self.main.document.getElementById("paneBody").style.height = contentHeight + "px";
		self.main.document.getElementById("paneBody").style.overflow = "auto";		
	}
	catch(e)
	{}
	try
	{
		self.main.document.getElementById("fieldsTable").style.width = "100%";
	}
	catch(e)
	{}
}
</script>
</head>
<body style="overflow:hidden" onload="doAuthentication()" onresize="fitToScreen()">
	<iframe id="main" name="main" style="visibility:hidden;position:absolute;top:0px;left:0px;width:803px;height:564px" marginwidth="0" marginheight="0" frameborder="no" scrolling="no" src="/lawson/xhrnet/ui/headerpanehelp.htm"></iframe>
	<iframe name="jsreturn" style="visibility:hidden;height:0px;width:0px;" src="/lawson/xhrnet/dot.htm"></iframe>
	<iframe name="lawheader" style="visibility:hidden;height:0px;width:0px;" src="/lawson/xhrnet/personnelactions/palawheader.htm"></iframe>
</body>
</html>
