<html>
<head>
<title>Birth</title>
<META HTTP-EQUIV="Pragma" CONTENT="No-Cache">
<META HTTP-EQUIV="Expires" CONTENT="Mon, 01 Jan 1990 00:00:01 GMT">
<script src="/lawson/webappjs/commonHTTP.js"></script>
<script src="/lawson/webappjs/data.js"></script>
<script src="/lawson/xhrnet/esscommon80.js"></script>
<script src="/lawson/xhrnet/empinfo.js"></script>
<script src="/lawson/webappjs/user.js"></script>
<script src="/lawson/xhrnet/xml/xmlcommon.js"></script>
<script src="/lawson/xhrnet/ui/ui.js"></script>
<script>
var fromTask = (window.location.search)?unescape(window.location.search):"";
var EmpInfo = new Object();
EmpInfo.employee_work_country = "";
var Benefits = new Array();
var dateneeded = getVarFromString("date",fromTask);
// Default all access to "Deny" except for Life Events Benefits Enrollment
var withholding = false;
var beneficiary = false;
var benefits = true;

function OpenBirth()
{
	authUser = null;
	try
	{
		// Check if a parent or opener document has already done an authenticate,
		// otherwise go get the webuser info.
		if (parent && typeof(parent.authUser) != "undefined" && parent.authUser != null)
		{
			authUser = parent.authUser;
			if (typeof(parent.EmpInfo) != "undefined" && parent.EmpInfo != null)
				EmpInfo = parent.EmpInfo;
		}
		else if (opener && typeof(opener.authUser) != "undefined" && opener.authUser != null)
		{
			authUser = opener.authUser;
			if (typeof(opener.EmpInfo) != "undefined" && opener.EmpInfo != null)
				EmpInfo = opener.EmpInfo;
		}
	}
	catch(e)
	{
		authUser = null;
		EmpInfo = new Array();
		CalledEmpInfo = false;	
	}
	if (!authUser)
	{
		authenticate("frameNm='jsreturn'|funcNm='GetBenefits()'|officeObjects=true|desiredEdit='EM'");
		return;
	}
	GetBenefits();
}

function GetBenefits()
{
	document.title = parent.parent.getSeaPhrase("LIFE_EVENTS_6","ESS");

	var object 		= new DMEObject(authUser.prodline, "BENEFIT");
	object.out 		= "JAVASCRIPT";
	object.index 	= "benset3";
	object.field 	= "plan-type;employee.work-country";
	object.key 		= parseInt(authUser.company,10) +"="+ parseInt(authUser.employee,10);
	object.func 	= "BirthEvent()";
	object.max 		= "600";
	DME(object,"jsreturn");
}

function BirthEvent()
{
	Benefits = Benefits.concat(self.jsreturn.record);

	if (self.jsreturn.Next != "")
	{
		self.jsreturn.location.replace(self.jsreturn.Next);
		return;
	}

	if (Benefits.length > 0) EmpInfo.employee_work_country = Benefits[0].employee_work_country;

    if (typeof(authUser) != "undefined" && authUser.OfficeObject)
	{
		var Bookmarks = authUser.OfficeObject;

		for (var i=0; i<authUser.NbrOfOfficeObj; i++)
		{
			var bkName = Bookmarks[i].name.toUpperCase(); // the Lawson-assigned task name
			var bkLawName = (Bookmarks[i].lawnm) ? Bookmarks[i].lawnm.toUpperCase() : "";	// the Lawson-assigned Lawson name

			//PT 160400
			//if IOS version < 802 then there Lawson name property woun't be available so need to check that case
			if (bkLawName!=""){

				if (bkLawName == "XMLHRWITHHOLDING1" || bkLawName == "XMLHRWITHHOLDING")
				{
					// grant access to tax withholding
					withholding = true;
				}
				else if ( bkLawName == "XMLHRBENEFICIARY" || bkLawName == "XMLHRBENEFICIARY1")
				{
					// grant access to beneficiary
					beneficiary = true;
				}
			}
			else{

			 	if (bkName == "TAX WITHHOLDING")
				{
					// grant access to tax withholding
					withholding = true;
				}
				else if (bkName == "BENEFICIARY")
				{
					// grant access to beneficiary
					beneficiary = true;
				}
			}
		}
	}

  	// If there is a WITHHOLDING task set to "I" ("Include"), verify the employee's
	// work country before displaying in the list of items the employee can update.
    if (withholding)
	{
		if ((typeof(EmpInfo.employee_work_country) != "undefined" && NonSpace(EmpInfo.employee_work_country)) ||
			(Benefits.length > 0 && NonSpace(EmpInfo.employee_work_country) == 0) || CalledEmpInfo)
		{
			CheckEmpWorkCountry();
		}
		else
		{
			GetEmpInfo(authUser.prodline,authUser.company,authUser.employee,"paemployee",
				"employee.work-country;","CheckEmpWorkCountry()");
			return;
		}
	}
	else
	{
		DrawBirthScreen();
	}
}

function CheckEmpWorkCountry()
{
	withholding = (EmpInfo.employee_work_country!="US")?false:true;
	DrawBirthScreen();
}

function DrawBirthScreen()
{
  	var BirthContent = '<table border="0" cellspacing="0" cellpadding="0" styler="list">'
  	+ '<tr><th>&nbsp;</th><th>&nbsp;</th></tr>'

  	if (beneficiary && Benefits.length > 0)
  	{
      	for (var n=0; n<Benefits.length; n++)
	  	{
	   	  	if (Benefits[n].plan_type == "DB" || Benefits[n].plan_type == "DC" ||
	       	Benefits[n].plan_type == "DI" || Benefits[n].plan_type == "EL")
	      	{
				BirthContent += '<tr><td class="fieldlabel" valign="top">'
				+ uiCheckmarkIcon("beneficiaries_checkmark","visibility:hidden")
				+ '</td><td class="fieldlabelleft"><a href=javascript:parent.OpenBeneficiary()>'
    			+ parent.parent.getSeaPhrase("BENEFICIARIES","ESS")+'</a></td></tr>'
              	break;
          	}
      	}
  	}

  	// Don't require current benefits--enable Benefits Enrollment to verify eligibility
  	// and allow an add of a new benefit.
  	if (benefits)
  	{
		BirthContent += '<tr><td class="fieldlabel" valign="top">'
		+ uiCheckmarkIcon("benefits_checkmark","visibility:hidden")
		+ '</td><td class="fieldlabelleft"><a href=javascript:parent.OpenBenefits()>'
    	+ parent.parent.getSeaPhrase("BENEFITS","ESS")+'</a></td></tr>'
  	}

	if (withholding)
	{
		BirthContent += '<tr><td class="fieldlabel" valign="top">'
		+ uiCheckmarkIcon("w4form_checkmark","visibility:hidden")
		+ '</td><td class="fieldlabelleft"><a href=javascript:parent.OpenW4()>'
    	+ parent.parent.getSeaPhrase("LIFE_EVENTS_2","ESS")+'</a></td></tr>'
	}

  	BirthContent += '</table>';

	self.MAIN.document.getElementById("paneHeader").innerHTML = parent.parent.getSeaPhrase("ADDL_CHANGES","ESS")
	self.MAIN.document.getElementById("paneBody").innerHTML = '<div style="padding-left:20px;padding-right:20px;padding-top:20px;padding-bottom:20px">'
	+'<div class="fieldlabelboldleft">'+parent.parent.getSeaPhrase("MARRIAGE_CHANGE_INFO_1","ESS")+'</div>'
	+'</div><div style="padding-left:20px;padding-right:20px">'+BirthContent+'</div>';

	self.MAIN.stylePage();
	self.MAIN.setLayerSizes();
	fitToScreen();

	// if this task has been launched as a related link, remove any processing message
	try {
		parent.parent.removeWaitAlert();
	}
	catch(e) {}
}

function setImageVisibility(imgID,visibleState)
{
	var imgs = window.MAIN.document.images;
	var i=0;
	var found = false;
	while (i<imgs.length && !found)
	{
		if(imgs[i].id == imgID)
		{
			found = true;
			imgs[i].style.visibility = visibleState;
		}
		i++;
	}
}

function OpenBeneficiary()
{
   	if (parent.fullrelatedtask.location.href.indexOf("SHR002.htm")==-1)
   	{
   		parent.parent.showWaitAlert(parent.parent.getSeaPhrase("GATHERING_INFO","ESS"));
   		parent.fullrelatedtask.location.replace("/lawson/xhrnet/Beneficiaries/SHR002.htm?from=birth");
   	}
   	try {
   		parent.document.getElementById("left").style.visibility = "hidden";
   	}
   	catch(e) {}
   	try {
   		parent.document.getElementById("leftform").style.visibility = "hidden";
   	}
   	catch(e) {}
   	try {
   		parent.document.getElementById("right").style.visibility = "hidden";
   	}
   	catch(e) {}
   	try {
   		parent.document.getElementById("relatedtask").style.visibility = "hidden";
   	}
   	catch(e) {}
   	try {
   		parent.document.getElementById("fullrelatedtask").style.visibility = "visible";
   	}
   	catch(e) {}
   	parent.fitToScreen();
}

function OpenW4()
{
	//force reload to check for payroll lockout
   	if (parent.emssObjInstance.emssObj.payrollLockout || parent.fullrelatedtask.location.href.indexOf("w4.htm")==-1)
   	{
   		parent.parent.showWaitAlert(parent.parent.getSeaPhrase("GATHERING_INFO","ESS"));
   		parent.fullrelatedtask.location.replace("/lawson/xhrnet/w4/w4.htm?from=birth");
   	}
   	try {
   		parent.document.getElementById("left").style.visibility = "hidden";
   	}
   	catch(e) {}
   	try {
   		parent.document.getElementById("leftform").style.visibility = "hidden";
   	}
   	catch(e) {}
   	try {
   		parent.document.getElementById("right").style.visibility = "hidden";
   	}
   	catch(e) {}
   	try {
   		parent.document.getElementById("relatedtask").style.visibility = "hidden";
   	}
   	catch(e) {}
   	try {
   		parent.document.getElementById("fullrelatedtask").style.visibility = "visible";
   	}
   	catch(e) {}
   	parent.fitToScreen();
}

function OpenBenefits()
{
   	//if (parent.fullrelatedtask.location.href.indexOf("benleenroll.htm")==-1)
   	//{
   		parent.parent.showWaitAlert(parent.parent.getSeaPhrase("GATHERING_INFO","ESS"));
   		parent.fullrelatedtask.location.replace("/lawson/xbnnet/benleenroll.htm?event=B&date="+escape(dateneeded,1));
   	//}
   	try {
   		parent.document.getElementById("left").style.visibility = "hidden";
   	}
   	catch(e) {}
   	try {
   		parent.document.getElementById("leftform").style.visibility = "hidden";
   	}
   	catch(e) {}
   	try {
   		parent.document.getElementById("right").style.visibility = "hidden";
   	}
   	catch(e) {}
   	try {
   		parent.document.getElementById("relatedtask").style.visibility = "hidden";
   	}
   	catch(e) {}
   	try {
   		parent.document.getElementById("fullrelatedtask").style.visibility = "visible";
   	}
   	catch(e) {}
   	parent.fitToScreen();
}

function fitToScreen()
{
	if (typeof(window["styler"]) == "undefined" || window.styler == null)
	{
		window.stylerWnd = findStyler(true);
	}

	if (!window.stylerWnd)
	{
		return;
	}

	if (typeof(window.stylerWnd["StylerEMSS"]) == "function")
	{
		window.styler = new window.stylerWnd.StylerEMSS();
	}
	else
	{
		window.styler = window.stylerWnd.styler;
	}

	var mainFrame = document.getElementById("MAIN");
	var winHeight = 768;
	var winWidth = 1024;

	// resize the table frame to the screen dimensions
	if (document.body.clientHeight)
	{
		winHeight = document.body.clientHeight;
		winWidth = document.body.clientWidth;
	}
	else if (window.innerHeight)
	{
		winHeight = window.innerHeight;
		winWidth = window.innerWidth;
	}

	var contentHeightBorder;
	var contentHeight;	
	var contentWidthBorder;
	var contentWidth;		

	if (window.styler && window.styler.showInfor)
	{	
		contentWidth = winWidth - 12;
		contentWidthBorder = (navigator.appName.indexOf("Microsoft") >= 0) ? contentWidth + 7 : contentWidth + 2;				
		contentHeight = winHeight - 65;
		contentHeightBorder = contentHeight + 30;	
	}
	else if (window.styler && window.styler.showLDS)
	{
		contentWidth =  winWidth - 23;
		contentWidthBorder =  winWidth - 2;		
		contentHeight = winHeight - 60;	
		contentHeightBorder = winHeight - 30;		
	}
	else
	{
		contentWidth = (navigator.appName.indexOf("Microsoft") >= 0) ? winWidth - 17 :winWidth - 12;
		contentWidthBorder = contentWidth;		
		contentHeight = winHeight - 65;
		contentHeightBorder = winHeight - 41;		
	}

	mainFrame.style.width = winWidth + "px";
	mainFrame.style.height = winHeight + "px";
	try
	{
		if (self.MAIN.onresize && self.MAIN.onresize.toString().indexOf("setLayerSizes") >= 0)
		{
			self.MAIN.onresize = null;
		}			
	}
	catch(e)
	{}
	try
	{
		self.MAIN.document.getElementById("paneBorder").style.width = contentWidthBorder + "px";
		self.MAIN.document.getElementById("paneBodyBorder").style.width = contentWidth + "px";
		self.MAIN.document.getElementById("paneBorder").style.height = contentHeightBorder + "px";
		self.MAIN.document.getElementById("paneBodyBorder").style.height = contentHeight + "px";
		self.MAIN.document.getElementById("paneBody").style.width = contentWidth + "px";
		self.MAIN.document.getElementById("paneBody").style.height = contentHeight + "px";
	}
	catch(e)
	{}	
}
</script>
</head>
<body style="overflow:hidden" onload="fitToScreen();OpenBirth()" onresize="fitToScreen()">
	<iframe id="MAIN" name="MAIN" src="/lawson/xhrnet/ui/headerpane.htm" style="position:absolute;left:0%;top:0px;width:100%;height:464px" frameborder="no" marginwidth="0" marginheight="0" scrolling="no"></iframe>
	<iframe id="jsreturn" name="jsreturn" style="visibility:hidden;height:0px;width:0px;" src="/lawson/xhrnet/dot.htm" frameborder="no" marginwidth="0" marginheight="0" scrolling="no"></iframe>
</body>
</html>
<!-- Version: 8-)@(#)@10.00.02.00.29 -->
<!-- $Header: /cvs/cvs_archive/applications/webtier/shr/src/xhrnet/birth1.htm,v 1.13.2.27 2012/07/26 15:50:33 brentd Exp $ -->
<!--************************************************************
 *                                                             *
 *                           NOTICE                            *
 *                                                             *
 *   THIS SOFTWARE IS THE PROPERTY OF AND CONTAINS             *
 *   CONFIDENTIAL INFORMATION OF INFOR AND/OR ITS              *
 *   AFFILIATES OR SUBSIDIARIES AND SHALL NOT BE DISCLOSED     *
 *   WITHOUT PRIOR WRITTEN PERMISSION. LICENSED CUSTOMERS MAY  *
 *   COPY AND ADAPT THIS SOFTWARE FOR THEIR OWN USE IN         *
 *   ACCORDANCE WITH THE TERMS OF THEIR SOFTWARE LICENSE       *
 *   AGREEMENT. ALL OTHER RIGHTS RESERVED.                     *
 *                                                             *
 *   (c) COPYRIGHT 2012 INFOR.  ALL RIGHTS RESERVED.           *
 *   THE WORD AND DESIGN MARKS SET FORTH HEREIN ARE            *
 *   TRADEMARKS AND/OR REGISTERED TRADEMARKS OF INFOR          *
 *   AND/OR ITS AFFILIATES AND SUBSIDIARIES. ALL               *
 *   RIGHTS RESERVED.  ALL OTHER TRADEMARKS LISTED HEREIN ARE  *
 *   THE PROPERTY OF THEIR RESPECTIVE OWNERS.                  *
 *                                                             *
 ************************************************************-->
