<?xml version="1.0"?>
<!-- $Header: /cvs/cvs_archive/LawsonPlatform/toolkit/studio/tools/domref/dom.xml,v 1.1.4.1.4.29.16.5 2012/08/08 12:48:54 jomeli Exp $ -->
<!-- $NoKeywords: $ -->
<!-- LaVersion=8-)@(#)@9.0.1.11.231 2012-09-05 04:00:00 -->
<!--		*************************************************************** -->
<!--		*                                                             * -->
<!--		*                           NOTICE                            * -->
<!--		*                                                             * -->
<!--		*   THIS SOFTWARE IS THE PROPERTY OF AND CONTAINS             * -->
<!--		*   CONFIDENTIAL INFORMATION OF INFOR AND/OR ITS              * -->
<!--		*   AFFILIATES OR SUBSIDIARIES AND SHALL NOT BE DISCLOSED     * -->
<!--		*   WITHOUT PRIOR WRITTEN PERMISSION. LICENSED CUSTOMERS MAY  * -->
<!--		*   COPY AND ADAPT THIS SOFTWARE FOR THEIR OWN USE IN         * -->
<!--		*   ACCORDANCE WITH THE TERMS OF THEIR SOFTWARE LICENSE       * -->
<!--		*   AGREEMENT. ALL OTHER RIGHTS RESERVED.                     * -->
<!--		*                                                             * -->
<!--		*   (c) COPYRIGHT 2012 INFOR.  ALL RIGHTS RESERVED.           * -->
<!--		*   THE WORD AND DESIGN MARKS SET FORTH HEREIN ARE            * -->
<!--		*   TRADEMARKS AND/OR REGISTERED TRADEMARKS OF INFOR          * -->
<!--		*   AND/OR ITS AFFILIATES AND SUBSIDIARIES. ALL               * -->
<!--		*   RIGHTS RESERVED.  ALL OTHER TRADEMARKS LISTED HEREIN ARE  * -->
<!--		*   THE PROPERTY OF THEIR RESPECTIVE OWNERS.                  * -->
<!--		*                                                             * -->
<!--		*************************************************************** -->
<CONSTRUCTORS>
	<!-- portal objects ====================================================-->
	<PORTAL>
		<!-- global variables ==============================================-->
		<CONSTRUCTOR name="Global Variables">
			<GLOBAL name="AGSPath" type="string">
				<NOTES>
				This variable holds the path to the transaction service, typically '/servlet/Router/Transaction/Erp'
				</NOTES>
			</GLOBAL>
			<GLOBAL name="cmnDlg" type="object/CommonDialog">
				<NOTES>
				This is an instance of the CommonDialog object.
				</NOTES>
				<EXAMPLES>portalWnd.cmnDlg.messageBox(message,"ok","stop",window);</EXAMPLES>
			</GLOBAL>
			<GLOBAL name="DMEPath" type="string">
				<NOTES>
				This variable holds the path to the data mining service, typically '/servlet/Router/Data/Erp'
				</NOTES>
			</GLOBAL>
			<GLOBAL name="IDAPath" type="string">
				<NOTES>
				This variable holds the path to the Drill Around service, typically '/servlet/Router/Drill/Erp'
				</NOTES>
			</GLOBAL>
			<GLOBAL name="GETATTACHPath" type="string">
				<NOTES>
				This variable holds the path to the Get Attachment service, typically '/cgi-lawson/getattach.exe'
				</NOTES>
			</GLOBAL>
			<GLOBAL name="JOBSERVPath" type="string">
				<NOTES>
				This variable holds the path to the Job Server service, typically '/servlet/JobServer'
				</NOTES>
			</GLOBAL>
			<GLOBAL name="lawsonPortal" type="object/lawPortalObj">
				<NOTES>
				This is an instance of the lawPortalObj object.
				</NOTES>
			</GLOBAL>
			<GLOBAL name="objFactory" type="object/ObjectFactory">
				<NOTES>
				This is an instance of the ObjectFactory object.
				</NOTES>
			</GLOBAL>
			<GLOBAL name="oBrowser" type="object/SSOBrowser">
				<NOTES>
				This is an instance of the SSOBrowser object.
				</NOTES>
				<EXAMPLES>if (!portalWnd.oBrowser.isIE)
{
	var msg = "Only Internet Explorer is supported for this customization.";
	portalWnd.cmnDlg.messageBox(msg,"ok","stop",window);
	return;
}</EXAMPLES>
			</GLOBAL>
			<GLOBAL name="oUserProfile" type="object/UserProfile">
				<NOTES>
				This is an instance of the UserProfile object.
				</NOTES>
				<EXAMPLES>if (!portalWnd.oUserProfile.isPortalAdmin())
{
	var msg = "Must have Portal Administration rights to access this feature.";
	portalWnd.cmnDlg.messageBox(msg,"ok","stop",window);
	return;
}</EXAMPLES>
			</GLOBAL>
			<GLOBAL name="WRITEATTACHPath" type="string">
				<NOTES>
				This variable holds the path to the Write Attachment service, typically '/cgi-lawson/writeattach.exe'
				</NOTES>
			</GLOBAL>
		</CONSTRUCTOR>
		<!-- global functions ==============================================-->
		<CONSTRUCTOR name="Global Functions">
			<FUNCTION name="cmnErrorHandler" returntype="">
				<PARAMETERS>
					<PARAMETER name="e" type="object/exception" required="1" comment="Javascript exception object" />
					<PARAMETER name="wnd" type="object/window" required="0" comment="typically 'window'" />
					<PARAMETER name="filename" type="string" required="0" comment="name of the custom XML file (or Javascript file if 'included')" />
					<PARAMETER name="msg" type="string" required="0" comment="optional prefix to error message" />
					<PARAMETER name="func" type="string" required="0" comment="name of the function in which the exception was caught" />
				</PARAMETERS>
				<NOTES>
				This function would never be called directly, but instead would be used in
				conjunction with a Javascript try/catch block where there is a likelihood of
				an exception occuring.

				It will produce the standard Portal exception dialog window and interface with
				any implemented exception handling.
				</NOTES>
				<EXAMPLES>function FORM_OnAfterTransaction(data)
{
	if (formState.agsError)
		return;

	try {
		// some complex additional functionality: possibly performing another transaction
		...
	} catch (e) {
		var preMsg="Error performing secondary transaction:\n";
		portalWnd.cmnErrorHandler(e,window,"myCustom.xml",preMsg,"FORM_OnAfterTransaction")
		return false;
	}
	return true;
}
				</EXAMPLES>
			</FUNCTION>
			<FUNCTION name="edFormatDate" returntype="string">
				<PARAMETERS>
					<PARAMETER name="strDate" type="string" required="1" />
					<PARAMETER name="sz" type="string" required="0" />
				</PARAMETERS>
				<NOTES>
				This function formats the strDate parameter as a date string in the user's
				profile specified date format (ie MM/DD/YYYY).  The size (sz) parameter is
				optional and only required if the date field size is 4.

				A special character may be passed in the strDate parameter if today's date
				is required (t).
				</NOTES>
				<EXAMPLES>function FORM_OnBeforeTransaction(fc)
{
	// default today's date if not supplied (text6 = DATE-ACQUIRED)
	if (lawForm.getDataValueId("text6") == "")
		lawForm.setDataValueById("text6", portalWnd.edFormatDate("t"));

	return true;
}
				</EXAMPLES>
			</FUNCTION>
			<FUNCTION name="envFindObjectWindow" returntype="object/window">
				<PARAMETERS>
					<PARAMETER name="strObj" type="string" required="1" />
					<PARAMETER name="startWnd" type="object/window" required="0" />
				</PARAMETERS>
				<NOTES>
				This function will return a window reference where the specified javascript
				object is declared.  If the object is not found, the return value is null.

				The startWnd parameter is optional and only required when searching for a
				window reference in a popup or modal dialog window.

				A reference to the Portal window is already available in forms and portal page
				scripting (portalWnd) which should be used instead of the 'top' reference.

				This function is global to the current context if the file servenv.js is included
				(which it is for all delivered portal functionality).
				</NOTES>
				<EXAMPLES>function myFunction()
{
	var portalWnd = envFindObjectWindow("lawsonPortal",window.opener);
	if (!portalWnd) return;

	...
}
				</EXAMPLES>
			</FUNCTION>
			<FUNCTION name="getHttpStatusMsg" returntype="string">
				<PARAMETERS>
					<PARAMETER name="status" type="string" required="1" />
				</PARAMETERS>
				<NOTES>
				This function returns the standard HTTP message for the specified status code.
				</NOTES>
				<EXAMPLES>var oDOM=portalWnd.SSORequest("custom.xml");
if (!oDOM || oDOM.status)
{
	// error retrieving file: display message
	var msg="Error retrieving custom.xml.";
	if (oDOM)
		msg+=("\n"+portalWnd.getHttpStatusMsg(oDOM.status));
	portalWnd.cmnDlg.messageBox(msg,"ok","stop",window);
	return;
}
				</EXAMPLES>
			</FUNCTION>
			<FUNCTION name="getVarFromString" returntype="string">
				<PARAMETERS>
					<PARAMETER name="varName" type="string" required="1" comment="variable name to search for" />
					<PARAMETER name="str" type="string" required="1" comment="string to search" />
				</PARAMETERS>
				<NOTES>
				Use this method to extract ? and &amp; separated string parameters. The method
				allows for (ignores) the presence of an underscore (_) preceeding varName and
				the match is not case sensitive.

				This method is useful for retrieving parameter values from a URL query string.
				</NOTES>
				<EXAMPLES>The following examples assume a browser URL of:
'http://server.domain.com:80/lawson/portal/?_TKN=CU01.1

var str = portalWnd.getVarFromString("_TKN",portalWnd.document.location);
portalWnd.cmnDlg.messageBox(str);		// displays 'CU01.1"
				
var str = portalWnd.getVarFromString("tkn",portalWnd.document.location);
portalWnd.cmnDlg.messageBox(str);		// also displays 'CU01.1"
				</EXAMPLES>
			</FUNCTION>
			<FUNCTION name="httpRequest" returntype="object/DataStorage">
				<PARAMETERS>
					<PARAMETER name="url" type="string" required="1" comment="" />
					<PARAMETER name="pkg" type="string/object" required="0" comment="package to POST" />
					<PARAMETER name="cntType" type="string" required="0" comment="content type" default="text/xml" />
					<PARAMETER name="outType" type="string" required="0" comment="output type" default="text/xml" />
					<PARAMETER name="bShowErrors" type="boolean" required="0" comment="indicates whether to show standard error messages" default="true"/>
				</PARAMETERS>
				<NOTES> The first parameter is a required string that holds the URL to invoke while the
				pkg parameter is optional and may be a string or an object.  Either a non-empty string
				or an object (presumably an MS DOMDocument object) passed as the second parameter will
				cause the method to perform a POST of pkg contents.  Otherwise, a GET command is executed.

				If bShowErrors is false it is assumed the caller will handle any errors.				
				</NOTES>
				<EXAMPLES>var oDOM=httpRequest("custom.xml");
if (!oDOM || oDOM.status)
{
	// error retrieving file: display message
	var msg="Error retrieving custom.xml.";
	if (oDOM)
		msg+=("\n"+portalWnd.getHttpStatusMsg(oDOM.status));
	portalWnd.cmnDlg.messageBox(msg,"ok","stop",window);
	return;
}
				</EXAMPLES>
			</FUNCTION>
			<FUNCTION name="processMessageString" returntype="string">
				<PARAMETERS>
					<PARAMETER name="s" type="string" required="1" />
				</PARAMETERS>
				<NOTES>
				This function will perform substition of tokens in the supplied string.

				Double ampersand delimitted tokens are replaced by a phraseObj localised phrase.
				Double bracket delimitted tokens are replaced by a user variable.
				</NOTES>
				<EXAMPLES>// get the localized welcome phrase
var str=portalWnd.processMessageString("&amp;&amp;divWel&amp;&amp;");		// str="Welcome"
portalWnd.cmnDlg.messageBox(str);

// get the user's printer name
str=portalWnd.processMessageString("&amp;lt;&amp;lt;PrinterName>>");		// str=user's default printer
portalWnd.cmnDlg.messageBox(str);
				</EXAMPLES>
			</FUNCTION>
			<FUNCTION name="strFillChar" returntype="string">
				<PARAMETERS>
					<PARAMETER name="str" type="string" required="1" comment="string value to pad" />
					<PARAMETER name="len" type="number" required="1" comment="length of string to return" />
					<PARAMETER name="dir" type="string" required="1" comment="right/left: if not='right', 'left' is assumed" />
					<PARAMETER name="ch" type="string (character)" required="0" comment="character to use for padding, typically a space or zero" default="space"/>
				</PARAMETERS>
				<NOTES>
				This function will pad a string right or left with the specified character up
				to a specified length.
				</NOTES>
				<EXAMPLES>var str=portalWnd.strFillChar("ABC",6,"right"," ");		// str="ABC   "
				</EXAMPLES>
			</FUNCTION>
			<FUNCTION name="strLimitLen" returntype="string">
				<PARAMETERS>
					<PARAMETER name="str" type="string" required="1" comment="string to check" />
					<PARAMETER name="len" type="number" required="1" comment="length of string to return" />
				</PARAMETERS>
				<NOTES>
				This function will insure that a string is no longer that the specifed length.
				</NOTES>
				<EXAMPLES>var inStr="United States of America";
var str=portalWnd.strLimitLen(inStr,13);		// str="United States"
				</EXAMPLES>
			</FUNCTION>
			<FUNCTION name="strStripChar" returntype="string">
				<PARAMETERS>
					<PARAMETER name="str" type="string" required="1" comment="string to inspect" />
					<PARAMETER name="ch" type="string (character)" required="0" comment="character to strip" default="space"/>
				</PARAMETERS>
				<NOTES>
				This function will strip a specified character from the supplied string.
				</NOTES>
				<EXAMPLES>var str=portalWnd.strStripChar("123,456",",");		// str="123456"
				</EXAMPLES>
			</FUNCTION>
			<FUNCTION name="strTrim" returntype="string">
				<PARAMETERS>
					<PARAMETER name="s" type="string" required="1" />
				</PARAMETERS>
				<NOTES>
				This function will trim the leading and trailing spaces from the supplied string.
				(This method replaces the 'trim' function.)
				</NOTES>
				<EXAMPLES>var str=portalWnd.strTrim(" hello ");		// str="hello"
				</EXAMPLES>
			</FUNCTION>
			<FUNCTION name="switchContents" returntype="">
				<PARAMETERS>
					<PARAMETER name="url" type="string" required="1" />
				</PARAMETERS>
				<NOTES>
				This function is used to display new content in the portal's main content window.
				</NOTES>
				<EXAMPLES>function BUTTON_OnClick(id,row)
{
	var bReturnVal=true;
	if (id == "btnYahoo")
	{
		portalWnd.switchContents("http://www.yahoo.com");
		bReturnVal=false;
	}
	return bReturnVal;
}
				</EXAMPLES>
			</FUNCTION>
		</CONSTRUCTOR>
		<!-- kotkey handling ===============================================-->
		<CONSTRUCTOR name="Hotkey Handling">
			<FUNCTION name="Introduction" returntype="">
				<NOTES>
				The portal uses an XML configuration file to describe the implementation 
				of hotkeys. Client are able to modify the file (using the UI implemented in
				Role Manager or in User Preferences) so that a different set of keyboard 
				combinations are used to support pre-defined functions in the Portal. The 
				keyboard combinations will be limited to some industry standards, however 
				it is possible to implement combinations that will override most browser
				actions.
				
				For example, in Internet Explorer the F4 key sets focus to and opens
				the address line history while LID users are accustomed to the F4 key causing
				a drill select to activate. With the Portal interface it is possible to change
				the F4 key to open a drill select.

				This section describes requirements of developers in implementing onkeydown
				event handlers and how to detect and implement hotkey actions.

				NOTE: Hotkey handling is defined and fixed in the Portal for custom forms
				and Portal pages.  The customizations of hotkeys defined in this section is
				not supported for those features of Design Studio.  The description of hotkey
				features provided here is for other applications running within the Portal
				framework.

				Custom forms, however, do have a hook (event notification) to the keydown event 
				and can detect hotkey actions and take special action.  It is recommended that any
				action taken be limitted to either inhibiting an action or a custom implementation
				of the 'spirit' of the intended action. (See FORM_OnKeyDown event.)
				</NOTES>
			</FUNCTION>
			<FUNCTION name="onKeyDown" returntype="">
				<PARAMETERS>
					<PARAMETER name="evt" type="object/event" required="1" comment="browser event object" />
				</PARAMETERS>
				<NOTES>
				This is a function that must be implemented on each HTML page in order
				for Portal level hotkeys to be acted upon.  The name of the function is not
				significant, but it must be declared as the onkeydown handler in the HTML body
				tag (see example below).

				This function serves two purposes: 1) to give the Portal an opportunity to act
				on a keystroke before the page or the browser does and 2) to give the page an
				opportunity to implement Portal level hotkeys or to detect and act on it's own 
				hotkeys, if any have been loaded. To see how to load hotkeys refer to the
				keyMgr.addHotkeySet function.

				In this and the other hotkey examples, we use 'myhotkeys' as the identifier for
				a custom set of hotkeys that the page has loaded.
				</NOTES>
				<EXAMPLES>In HTML Page:

&amp;lt;body onkeydown="onPageKeyDown(event)">

In page Javascript:

function onPageKeyDown(evt)
{
	// be sure we have a valid event object
	evt = evt ? evt : portalWnd.getEventObject();
	if (!evt) return;

	// ask Portal if it wants to handle
	var action = portalWnd.getFrameworkHotkey(evt,"myhotkeys");
	if ( !action )
	{
		// framework handled the keystroke
		portalWnd.setEventCancel(evt)
		return;
	}

	// is it one of my hotkeys?
	if (action != "myhotkeys")
	{
		// hotkey defined for this keystroke
		cntxtActionHandler(evt,action);
		portalWnd.setEventCancel(evt)
		return;
	}

	// any special keyhandling goes here
	// cancel event if keystroke handled
} 
				</EXAMPLES>
			</FUNCTION>
			<FUNCTION name="cntxtActionHandler" returntype="boolean">
				<PARAMETERS>
					<PARAMETER name="evt" type="object/event" required="1" comment="browser event object" />
					<PARAMETER name="action" type="string/null" required="1" comment="hotkey action name" />
				</PARAMETERS>
				<NOTES>
				This is an optional function that must be implemented if the page has loaded a
				custom set of hotkeys or if the page is to implement Portal level hotkeys.  The
				name and parameter list is significant and must be implemented exactly as specified.

				This function consists of two parts: 1) a check to see if the Portal has called it
				(in which case the action is null) and 2) a switch statement of the hotkeys being 
				implemented.  The switch statement may include Portal level hotkeys implementations.
				In the example below, two Portal level hotkey actions (doNext and doPrev) are 
				implemented and two custom hotkeys (doNextPanel and doPrevPanel based on example
				under XML Format).

				In this and the other hotkey examples, we use 'myhotkeys' as the identifier for
				a custom set of hotkeys that the page has loaded.
				</NOTES>
				<EXAMPLES>function cntxtActionHandler(evt,action)
{
	if (action==null)
	{
		// called by the portal
		action = portalWnd.getFrameworkHotkey(evt,"myhotkeys");
		if (!action || action=="myhotkeys")
			return false;
	}

	var bHandled=false;
	switch (action)
	{
	case "doNext":				// Portal level hotkey
		doFunction("N");		// do my 'next' function
		bHandled=true;
		break;
	case "doPrev":				// Portal level hotkey
		doFunction("P");		// do my 'previous' function
		bHandled=true;
		break;

	// additional case statements as needed
	// ...
	case "doNextPanel":			// my hotkey
		doPanel("N");			// do my 'next panel' function
		bHandled=true;
		break;
	case "doPrevPanel":			// my hotkey
		doPanel("P");			// do my 'previous panel' function
		bHandled=true;
		break;
	}
	return(bHandled)
}
				</EXAMPLES>
			</FUNCTION>
			<FUNCTION name="getFrameworkHotkey" returntype="string/null">
				<PARAMETERS>
					<PARAMETER name="evt" type="object/event" required="1" comment="browser event object" />
					<PARAMETER name="context" type="string" required="1" comment="context name" />
				</PARAMETERS>
				<NOTES>
				This is a Portal function that asks the hotkey manager object (keyMgr member of lawsonPortal)
				whether a keystroke has an associated hotkey action.

				This method requires two parameters, the event object from the context's keydown handler, 
				and a string identifying the context.  There are 3 possible returns from this method:

				1) null - this means the portal handled the hotkey and the calling context should cancel the event.
				2) context - this means a hotkey definition was not found for the current key stroke.
				3) action - this means a hotkey definition was found and the caller should respond if the 
				action/function is being implemented in the context.  In either case (implemented or not), 
				the caller should cancel the event.
				</NOTES>
				<EXAMPLES>see examples for onKeyDown and cntxtActionHandler.</EXAMPLES>
			</FUNCTION>
			<FUNCTION name="keyMgr.addHotkeySet" returntype="">
				<PARAMETERS>
					<PARAMETER name="cntxtName" type="string" required="1" comment="context name: used to identify hotkey set" />
					<PARAMETER name="cntxtFolder" type="string" required="1" comment="context folder: where hotkeys XML will be found" />
					<PARAMETER name="phrases" type="object/phraseObj" required="0" comment="phrase object for phraseid lookup" default="null" />
					<PARAMETER name="bDispError" type="boolean" required="0" comment="true/false: display errors during load" default="true" />
				</PARAMETERS>
				<NOTES>
				The keymgr member variable of the lawPortalObj object is the hotkey manager object.  This object
				manages hotkey sets.  To add a new set of hotkeys, use the addHotkeySet method.

				Two parameters are required: the name of the set and the folder in which to find an XML
				file defining the hotkeys.  The manager will first look for a file of the name &amp;lt;portal role>
				and if not found, 'hotkeys.xml'. The XML file format is described in a section below.

				A phrase object reference can be passed for localization of phrases describing the hotkeys and their
				actions.  If a phrase object is passed, the labelid attributes are assumed to be an id of a phrase 
				in the phrase object. As with all phrase objects, if a match on id is not found the phraseid is used 
				for the text.  So another alternative is to not use a phrase object and simply specify text in the 
				labelid attribute (phraseid).  This is done in the XML format example below.

				The addHotkeySet method can be called any number of times, but the hotkey set will only be
				loaded once.
				</NOTES>
				<EXAMPLES>portalObj.keyMgr.addHotkeySet("myhotkeys",portalObj.path+"/myfolder");
				</EXAMPLES>
			</FUNCTION>
			<FUNCTION name="XML Format" returntype="">
				<NOTES>A hotkey set is defined in an XML file in a format similar to the example below.
				When a hotkey set is added using the method described above, the hotkey manager object 
				will first look for a file with a name matching the PortalRole attribute of the logged in
				user.  If that file is not found, the hotkey manager will look for a file named 'hotkeys.xml'.

				Two XML nodes are significant, EVENTS and EVENT.

				The EVENTS node provides two attributes:
				1) context - this is the context name or the hotkey set name.
				2) labelid - a phraseid of a string table node (or the actual text) which describes the context.

				An EVENT node has the following attributes:
				1) labelid - the id of a string table node (or the actual text) which describes the action of this hotkey.
				2) code - the event keycode to trap for. (Refer to VB keycodes for more information.)
				3) alt,ctrl,shft - the event key modifier states to trap for. (1=key pressed,0=key not pressed)
				4) action - the action/function id associated with the hotkey. (for example, 'doNext' or 'doPrev')

				In the example below, two hotkeys are defined. A 'Show Next Panel' is defined as Ctrl+F6 and a 
				'Show Previous Panel' hotkey is defined as Ctrl+Shift+F6.  Note: if a hotkey is already defined 
				for the same combination as one specified in your set, your hotkey may not activate as desired.
				</NOTES>
				<EXAMPLES>&amp;lt;?xml version="1.0"?>
&amp;lt;EVENTS context="myhotkeys" labelid="My Hotkeys">
	&amp;lt;EVENT labelid="Show Next Panel" code="117" alt="0" ctrl="1" shift="0" action="doNextPanel" />
	&amp;lt;EVENT labelid="Show Previous Panel" code="117" alt="0" ctrl="1" shift="1" action="doPrevPanel" />
&amp;lt;/EVENTS>

				</EXAMPLES>
			</FUNCTION>
		</CONSTRUCTOR>
		<!-- portal objects ================================================-->
		<CONSTRUCTOR name="SSOBrowser">
			<PROPERTY name="isIE" type="boolean" construct="">
				<NOTES>If true, browser is Internet Explorer.</NOTES>
			</PROPERTY>
			<PROPERTY name="isMAC" type="boolean" construct="">
				<NOTES>If true, browser is running on a Macintosh.</NOTES>
			</PROPERTY>
			<PROPERTY name="isNS" type="boolean" construct="">
				<NOTES>If true, browser is Netscape Navigator.</NOTES>
			</PROPERTY>
			<PROPERTY name="isWIN" type="boolean" construct="">
				<NOTES>If true, browser is running on Windows.</NOTES>
			</PROPERTY>
			<PROPERTY name="isXP" type="boolean" construct="">
				<NOTES>If true, browser is running on Windows XP.</NOTES>
			</PROPERTY>
			<PROPERTY name="language" type="string" construct="">
				<NOTES>The browser's ISO language code, 'en-us' for example.</NOTES>
			</PROPERTY>
			<PROPERTY name="osVersion" type="string" construct="">
				<NOTES>The client operating system version string.</NOTES>
			</PROPERTY>
			<PROPERTY name="version" type="string" construct="">
				<NOTES>Browser's version string.</NOTES>
			</PROPERTY>
			<NOTES>
			An object determining information about the user's browser. A global
			variable of this type is instantiated as oBrowser.
			</NOTES>
			<EXAMPLES>var msg = (portalWnd.oBrowser.isIE
	? "Your browser is Internet Explorer."
	: "Your browser is not Internet Explorer.");
portalWnd.cmnDlg.messageBox(msg);
			</EXAMPLES>
		</CONSTRUCTOR>
		<CONSTRUCTOR name="CommonDialog">
			<PARAMETERS>
				<PARAMETER name="portalWnd" type="oject/window" required="0"/>
				<PARAMETER name="path" type="string" required="0"/>
			</PARAMETERS>
			<NOTES>
			An object for displaying standard messages and prompting for responses
			to questions. A global variable of this type is instantiated as cmnDlg.

			Most of the features of this object are only supported for the Internet Explorer
			browser.  For other browsers, the methods simply use the supplied Javascript counterparts.
			</NOTES>
			<PROPERTY name="portalWnd" type="object/window" construct="">
				<NOTES>A reference to the portal window.</NOTES>
			</PROPERTY>
			<PROPERTY name="path" type="string" construct="">
				<NOTES>The web server path to the Portal code, typically '/lawson/portal'.</NOTES>
			</PROPERTY>
			<EXAMPLES></EXAMPLES>
			<METHOD name="messageBox" returntype="string" construct="">
				<PARAMETERS>
					<PARAMETER name="msg" type="string" required="1" comment="message to display" />
					<PARAMETER name="type" type="string" required="0" comment="ok,okcancel,yesno,yesnocancel,stopcontinue" default="ok" />
					<PARAMETER name="icon" type="string" required="0" comment="info,alert,question,stop,trash" />
					<PARAMETER name="wnd" type="object/window" required="0" comment="typically, 'window'" />
					<PARAMETER name="showPrint" type="boolean" required="0" comment="a true value adds a print button to the dialog" default="false" />
				</PARAMETERS>
				<NOTES>Used to display a message with icons indicating severity level and various
				response buttons.  The string return value indicates the button selected.

				The print feature is only supported in Internet Explorer.
				</NOTES>
				<EXAMPLES>if (portalWnd.cmnDlg.messageBox("OK to continue?","okcancel","question",window,false) != "ok")
	return;</EXAMPLES>
			</METHOD>
			<METHOD name="prompt" returntype="string/null" construct="">
				<PARAMETERS>
					<PARAMETER name="initValue" type="string" required="1" comment="an initial value to prime the user response" />
					<PARAMETER name="title" type="string" required="1" comment="the title to display on the prompt window" />
					<PARAMETER name="phrase" type="string" required="1" comment="the phrase to indicate the type of response requested" />
					<PARAMETER name="wnd" type="object/window" required="0" comment="typically, window to return focus to current window" />
				</PARAMETERS>
				<NOTES>Used to the prompt the user to input a text value.
				</NOTES>
				<EXAMPLES>var strTitle="New Help Text";
var strPrompt="Please enter new help text.";
var helpText=portalWnd.cmnDlg.prompt("help text",strTitle,strPrompt,window);
if (!helpText) return;
				</EXAMPLES>
			</METHOD>
			<METHOD name="show" returntype="string/object/null" construct="">
				<PARAMETERS>
					<PARAMETER name="url" type="string" required="1"/>
					<PARAMETER name="features" type="string" required="0" comment="string specifying modal window properties" />
					<PARAMETER name="args" type="array" required="0" comment="used to pass values to the HTML page" />
					<PARAMETER name="wnd" type="object/window" required="0" comment="typically, window to return focus to current window" />
				</PARAMETERS>
				<NOTES>Used to display a modal window (Internet Explorer only) which may
				be used to return a value. This is an advanced feature which could be used
				to display a custom HTML page for gathering input and returning a value.
				</NOTES>
				<EXAMPLES>function myCustomFunction()
{
	var htmPath = portalObj.path+"/content/forms/MyCustom.htm";
	var features = "dialogWidth:500px;dialogHeight:400px;center:yes;" +
			"help:no;scroll:no;status:no;resizable:yes;";
	var myArgs = new Array();
	myArgs[0] = portalWnd;
	myArgs[1] = "some value";

	var retVal = portalWnd.cmnDlg.show(htmPath,features,myArgs,window);
	return (retVal ? retVal : null);
}
				</EXAMPLES>
			</METHOD>
		</CONSTRUCTOR>
		<CONSTRUCTOR name="DataStorage">
			<PARAMETERS>
				<PARAMETER name="construct" type="string/object" required="1"/>
				<PARAMETER name="portalWnd" type="oject/window" required="0"/>
			</PARAMETERS>
			<NOTES>
			A browser independent "DOM" object for storage XML data.

			The construct parameter can be an XML string or a DOM object.
			</NOTES>
			<EXAMPLES>// assumes api is a string containing service call which returns XML
var oXml=portalWnd.httpRequest(api);
oXml = (oXml ? new DataStorage(oXml) : null);
if (oXml &amp;&amp; oXml.document.status)
{
	// error
	portalWnd.cmnDlg.messageBox("Error calling "+api,"ok","alert",window);
	return;
}

// use oXml DataStorage object
			</EXAMPLES>
			<PROPERTY name="document" type="object/DOMDocument" construct="">
				<NOTES>The DOM storage object.</NOTES>
			</PROPERTY>
			<PROPERTY name="portalWnd" type="object/window" construct="">
				<NOTES>A reference to the portal window.</NOTES>
			</PROPERTY>
			<METHOD name="getDataString" returntype="string" construct="">
				<PARAMETERS>
					<PARAMETER name="bFormat" type="boolean" required="0"/>
				</PARAMETERS>
				<NOTES>Returns the data in the DOM document as a string.  The format
				parameter indicates whether to format the output with newlines and tab
				characters if possible.</NOTES>
				<EXAMPLES>// assumes api is a string containing service call which returns XML
var oXml=portalWnd.httpRequest(api);
oXml = (oXml ? new DataStorage(oXml) : null);
if (oXml &amp;&amp; oXml.document.status)
{
	// error
	portalWnd.cmnDlg.messageBox("Error calling "+api,"ok","alert",window);
	return;
}

// show DataStorage document contents
portalWnd.cmnDlg.messageBox(oXml.getDataString(true),"ok","info",window);
				</EXAMPLES>
			</METHOD>
			<METHOD name="setElementValue" returntype="object/node" construct="">
				<PARAMETERS>
					<PARAMETER name="nodeName" type="string" required="1"/>
					<PARAMETER name="value" type="string" required="1"/>
					<PARAMETER name="index" type="number" required="0" default="0"/>
				</PARAMETERS>
				<NOTES>Stores a value for the specified node name.</NOTES>
				<EXAMPLES>var storage= new DataStorage("&amp;lt;ROOT>&amp;lt;/ROOT>",portalWnd);
storage.setElementValue("_f2", "4321");
				</EXAMPLES>
			</METHOD>
			<METHOD name="getElementValue" returntype="string" construct="">
				<PARAMETERS>
					<PARAMETER name="nodeName" type="string" required="1"/>
					<PARAMETER name="index" type="number" required="0" default="0"/>
				</PARAMETERS>
				<NOTES>Returns the value of the specifed node name.</NOTES>
				<EXAMPLES>storage.getElementValue("_f2");</EXAMPLES>
			</METHOD>
			<METHOD name="getNodeByAttributeId" returntype="object/node" construct="">
				<PARAMETERS>
					<PARAMETER name="nodeName" type="string" required="1"/>
					<PARAMETER name="attrName" type="string" required="1"/>
					<PARAMETER name="attrVal" type="string" required="1"/>
				</PARAMETERS>
				<NOTES>Returns a node (or null) with the specified attribute name and value.</NOTES>
				<EXAMPLES>// assume the following XML structure in DataStorage object ds:
&amp;lt;ROOT>
	&amp;lt;NODE id="node1" />
	&amp;lt;NODE id="node2" />
	&amp;lt;NODE id="node3" />
&amp;lt;/ROOT>

// find the NODE whose id attribute is node2
var node=ds.getNodeByAttributeId("NODE","id","node2");
				</EXAMPLES>
			</METHOD>
			<METHOD name="getNodeByName" returntype="object/node" construct="">
				<PARAMETERS>
					<PARAMETER name="nodeName" type="string" required="1"/>
					<PARAMETER name="index" type="number" required="0" default="0"/>
				</PARAMETERS>
				<NOTES>Returns the node (or null) with the specified node.</NOTES>
				<EXAMPLES>var ds=new portalWnd.DataStorage(oResponse);
var msgNode=ds.getNodeByName("MESSAGE");
if (msgNode &amp;&amp; msgNode.getAttribute("status")=="1")
	portalWnd.cmnDlg.messageBox("Error:\n" + msgNode.firstChild.nodeValue,"ok","alert",window);
				</EXAMPLES>
			</METHOD>
			<METHOD name="getRootNode" returntype="object/node" construct="">
				<NOTES>Returns the DataStorage document root element (or null).</NOTES>
				<EXAMPLES>// assume the following XML structure in DataStorage object ds:
&amp;lt;ROOT id="rootNode">
	&amp;lt;NODE id="node1" />
	&amp;lt;NODE id="node2" />
	&amp;lt;NODE id="node3" />
&amp;lt;/ROOT>

// display the id of the root node
var root=ds.getRootNode();
if (root)
	portalWnd.cmnDlg.messageBox(root.getAttribute("id"));		// displays 'rootNode'
				</EXAMPLES>
			</METHOD>
		</CONSTRUCTOR>
		<CONSTRUCTOR name="Drill">
			<PROPERTY name="attachType" type="string" construct=""/>
			<PROPERTY name="callback" type="function" construct="">
				<NOTES>The function in target to execute when processing complete.</NOTES>
			</PROPERTY>
			<PROPERTY name="formTitle" type="string" construct="">
				<NOTES>The title of target window.</NOTES>
			</PROPERTY>
			<PROPERTY name="idaCall" type="string" construct="">
				<NOTES>The IDA API string passed to the Drill Around service.</NOTES>
			</PROPERTY>
			<PROPERTY name="listUpdate" type="function" construct=""/>
			<PROPERTY name="makeIda" type="function" construct="">
				<NOTES>The function in target that provides the necessary IDA API string.</NOTES>
			</PROPERTY>
			<PROPERTY name="maximized" type="boolean" construct=""/>
			<PROPERTY name="mode" type="string" construct="">
				<NOTES>Indicates the drill object mode: attachment, explorer, list, select.</NOTES>
			</PROPERTY>
			<PROPERTY name="nbrRecords" type="integer" construct=""/>
			<PROPERTY name="oReqFields" type="collection" construct=""/>
			<PROPERTY name="target" type="window" construct="">
				<NOTES>The window owning the drill processing.</NOTES>
			</PROPERTY>
			<METHOD name="doAttachment" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="target" type="window" required="1"/>
					<PARAMETER name="callback" type="function" required="1"/>
					<PARAMETER name="idaCall" type="string" required="1"/>
					<PARAMETER name="attachType" type="string" required="1"/>
				</PARAMETERS>
				<NOTES>Call this method to initiate a drill attachment process.</NOTES>
				<EXAMPLES>function BUTTON_OnClick(id,row)
{
	var bReturnVal=true;
	if (id == "btnAttachment")
	{
		// need logic here to construct idaCall string
		// and to determine the attachment type

		// disable keyboard input
		formState.setValue("formReady",false);

		portalObj.drill.doAttachment(window, "lawformRestoreCallback", idaCall, attType);
		bReturnVal=false;
	}
	return bReturnVal;
}
				</EXAMPLES>
			</METHOD>
			<METHOD name="doCallback" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="retVal" type="object" required="1"/>
				</PARAMETERS>
				<NOTES>Performs the callback function.  Normally only invoked by the Drill object itself.</NOTES>
			</METHOD>
			<METHOD name="doDrill" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="target" type="window" required="1"/>
					<PARAMETER name="callback" type="function" required="1"/>
					<PARAMETER name="idaCall" type="string" required="1"/>
					<PARAMETER name="idaPath" type="string" required="0" default="portalWnd.IDAPath"/>
				</PARAMETERS>
				<NOTES>Call this method to initiate a drill explorer process.</NOTES>
				<EXAMPLES>function BUTTON_OnClick(id,row)
{
	var bReturnVal=true;
	if (id == "btnExplorer")
	{
		// need logic here to construct IDACall string

		// disable keyboard input
		formState.setValue("formReady",false);

		portalObj.drill.doDrill(window,"lawformRestoreCallback",IDACall);
		bReturnVal=false;
	}
	return bReturnVal;
}
				</EXAMPLES>
			</METHOD>
			<METHOD name="doList" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="target" type="window" required="1"/>
					<PARAMETER name="callback" type="function" required="1"/>
					<PARAMETER name="oReqFields" type="collection" required="1"/>
					<PARAMETER name="makeIda" type="function" required="1"/>
					<PARAMETER name="formTitle" type="string" required="1"/>
					<PARAMETER name="listUpdate" type="function" required="1"/>
					<PARAMETER name="idaPath" type="string" required="0" default="portalWnd.IDAPath" />
				</PARAMETERS>
				<NOTES>Call this method to initiate a drill list process.</NOTES>
				<EXAMPLES>function BUTTON_OnClick(id,row)
{
	var bReturnVal=true;
	if (id == "btnList")
	{
		// disable keyboard input
		formState.setValue("formReady",false);

		portalObj.drill.doList(window, "lawformListDone", listColl,
			"frmMakeIDAString", strTitle, "lawformListUpdated");
		bReturnVal=false;
	}
	return bReturnVal;
}
				</EXAMPLES>
			</METHOD>
			<METHOD name="doSelect" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="target" type="window" required="1"/>
					<PARAMETER name="callback" type="function" required="1"/>
					<PARAMETER name="idaCall" type="string" required="1"/>
					<PARAMETER name="idaPath" type="string" required="0" default="portalWnd.IDAPath"/>
				</PARAMETERS>
				<NOTES>Call this method to initiate a drill select process.</NOTES>
				<EXAMPLES>function BUTTON_OnClick(id,row)
{
	var bReturnVal=true;
	if (id == "btnSelect")
	{
		// need logic here to construct IDAcall string

		// disable keyboard input
		formState.setValue("formReady",false);

		portalObj.drill.doSelect(window, "lawformDrillSel", IDACall);
		bReturnVal=false;
	}
	return bReturnVal;
}				</EXAMPLES>
			</METHOD>
			<NOTES>
			This object controls processing for the various Drill Around functions: drill
			select, drill explorer, attachments and lists.

			A global instance of this object can be accessed via the lawsonPortal global object
			(or the local application form variable, portalObj).
			</NOTES>
			<EXAMPLES>portalObj.drill.doSelect(window, "myDrillCallback", IDACall);
			</EXAMPLES>
		</CONSTRUCTOR>
		<CONSTRUCTOR name="helpOptions">
			<PROPERTY name="items" type="collection" construct="">
				<NOTES>The collection of help items.</NOTES>
			</PROPERTY>
			<PROPERTY name="target" type="object/window" construct="">
				<NOTES>The window owning the callback function.</NOTES>
			</PROPERTY>
			<METHOD name="addItem" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="id" type="string" required="1" comment="abritrary menu item id" />
					<PARAMETER name="caption" type="string" required="1" comment="menu item text" />
					<PARAMETER name="callback" type="string" required="1" comment="string to evaluate when item selected" />
					<PARAMETER name="target" type="window" required="1" comment="window object where callback is declared" />
				</PARAMETERS>
				<NOTES>Call this method (after the portal framework has been initialized)
				to add an item to the help menu.</NOTES>
				<EXAMPLES>function FORM_OnAfterFrameworkInit()
{
	portalObj.helpOptions.addItem("myhelp","Custom Help", "myCustomHelp()", window);
}
function myCustomHelp()
{
	window.open("myCustomHelp.htm?token="+strTKN+"&amp;title="+strTitle);
}				</EXAMPLES>
			</METHOD>
			<METHOD name="clearItems" returntype="" construct="">
				<NOTES>Call this method to clear existing form helpOptions.</NOTES>
				<EXAMPLES>portalObj.helpOptions.clearItems();</EXAMPLES>
			</METHOD>
			<METHOD name="removeItem" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="id" type="string" required="1"/>
				</PARAMETERS>
				<NOTES>Call this method to clear a single form helpOption item.</NOTES>
				<EXAMPLES>function FORM_OnAfterFrameworkInit()
{
	var formHelpId=lawForm.getPhrase("LBL_FORM_HELP");
	portalObj.helpOptions.removeItem(formHelpId);
}
				</EXAMPLES>
			</METHOD>
			<NOTES>This object can be accessed via the global lawsonPortal object (or the local
			application form variable, portalObj) helpOptions property.</NOTES>
			<EXAMPLES>portalObj.helpOptions.clearItems();</EXAMPLES>
		</CONSTRUCTOR>
		<CONSTRUCTOR name="lawPortalObj">
			<NOTES>
			This object is instantiated as a global variable: lawsonPortal.  In addition,
			each application has a local variable of this type instantiated as portalObj.
			</NOTES>
			<EXAMPLES>portalWnd.cmnDlg.messageBox(portalObj.path);		// typically 'lawson/portal'
			</EXAMPLES>
			<PROPERTY name="browser" type="object" construct="SSOBrowser">
				<NOTES>An instance of the SSOBrowser object.</NOTES>
			</PROPERTY>
			<PROPERTY name="contentFrame" type="object" construct="">
				<NOTES>A reference to the Portal's main content window.</NOTES>
			</PROPERTY>
			<PROPERTY name="drill" type="object" construct="Drill">
				<NOTES>An instance of the Drill object.</NOTES>
			</PROPERTY>
			<PROPERTY name="formsDir" type="string" construct="">
				<NOTES>The web server path to the portal forms code, typically '/lawson/portal/forms'.</NOTES>
			</PROPERTY>
			<PROPERTY name="helpOptions" type="object" construct="helpOptions">
				<NOTES>An instance of the helpOptions object.</NOTES>
			</PROPERTY>
			<PROPERTY name="path" type="string" construct="">
				<NOTES>The web server path to the Portal code, typically '/lawson/portal'.</NOTES>
			</PROPERTY>
			<PROPERTY name="previewMode" type="boolean" construct="">
				<NOTES>If true, Portal is executing a Design Studio preview.</NOTES>
			</PROPERTY>
			<PROPERTY name="profile" type="object" construct="DataStorage">
				<NOTES>The logged in user's profile data.

				Note: direct reference of this object is discouraged. Instead, access user data via the
				global variable oUserProfile.
				</NOTES>
			</PROPERTY>
			<PROPERTY name="toolbar" type="object" construct="toolbar">
				<NOTES>An instance of the Toolbar object.</NOTES>
			</PROPERTY>
			<PROPERTY name="tabArea" type="object" construct="tabobj">
				<NOTES>An instance of the TabObject object.</NOTES>
			</PROPERTY>
			<METHOD name="getMessage" returntype="string" construct="">
				<NOTES>Returns the last message sent to the browser status bar.</NOTES>
				<EXAMPLES>portalWnd.cmnDlg.messageBox(portalObj.getMessage());</EXAMPLES>
			</METHOD>
			<METHOD name="setMessage" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="message" type="string" required="1"/>
				</PARAMETERS>
				<NOTES>Sends a mesage to the browser status bar.</NOTES>
				<EXAMPLES>portalObj.setMessage("Please enter value.");</EXAMPLES>
			</METHOD>
			<METHOD name="getPhrase" returntype="string" construct="">
				<PARAMETERS>
					<PARAMETER name="phraseID" type="string" required="1"/>
				</PARAMETERS>
				<NOTES>Returns a localized phrase from the Portal profile object.</NOTES>
				<EXAMPLES>var msg = portalObj.getPhrase("INVALID_LINE_FC"); 
portalObj.setMessage(msg);</EXAMPLES>
			</METHOD>
			<METHOD name="getTitle" returntype="string" construct="">
				<NOTES>Returns the current main content title displayed by the Portal.</NOTES>
				<EXAMPLES>var strTitle=portalObj.getTitle();</EXAMPLES>
			</METHOD>
			<METHOD name="setTitle" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="title" type="string" required="1"/>
					<PARAMETER name="token" type="string" required="0"/>
					<PARAMETER name="pdl" type="string" required="0"/>
				</PARAMETERS>
				<NOTES>This method sets the title displayed in the Portal's banner area.
				
				To override the title of a custom form (for example, to insure that the token id
				is not displayed) call this function in the OnAfterFrameworkInit event.
				</NOTES>
				<EXAMPLES>function FORM_OnAfterFrameworkInit()
{
	portalObj.setTitle("My Custom Vendor Screen");
}				</EXAMPLES>
			</METHOD>
			<METHOD name="getUserVariable" returntype="string" construct="">
				<PARAMETERS>
					<PARAMETER name="varName" type="string" required="1"/>
				</PARAMETERS>
				<NOTES>
				Deprecated: Use the UserProfile object getAttribute method.
				</NOTES>
			</METHOD>
			<METHOD name="setUserVariable" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="varName" type="string" required="1"/>
					<PARAMETER name="value" type="string" required="1"/>
				</PARAMETERS>
				<NOTES>
				Deprecated: Use the UserProfile object setAttribute method.
				</NOTES>
			</METHOD>
			<METHOD name="saveUserFile" returntype="" construct="">
				<NOTES>
				Deprecated: Use the UserProfile object save method.
				</NOTES>
			</METHOD>
			<METHOD name="setWelcomeMsg" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="msg" type="string" required="1"/>
				</PARAMETERS>
				<NOTES>This method changes the Portal's welcome message displayed in the banner area.

				Note: the welcome message can also be customized via the use of portal role files.
				</NOTES>
				<EXAMPLES>var str=portalWnd.processMessageString("&amp;&amp;divWel&amp;&amp; &amp;lt;&amp;lt;LONGNAME>> on &amp;lt;&amp;lt;PRODLINE>>");
portalObj.setWelcomeMsg(str);
				</EXAMPLES>
			</METHOD>
		</CONSTRUCTOR>
		<CONSTRUCTOR name="NavletObject">
			<PARAMETERS>
				<PARAMETER name="portalWnd" type="object/window" required="1"/>
				<PARAMETER name="id" type="string" required="1"/>
			</PARAMETERS>
			<PROPERTY name="portalWnd" type="object/window" construct="">
				<NOTES>A reference to the portal window.</NOTES>
			</PROPERTY>
			<PROPERTY name="id" type="string" construct="">
				<NOTES>The id of the navlet object.</NOTES>
			</PROPERTY>
			<PROPERTY name="items" type="collection" construct="Object">
				<NOTES>The collection of menu items (links) displayed within the navlet.</NOTES>
			</PROPERTY>
			<PROPERTY name="title" type="string" construct="">
				<NOTES>The title displayed in the header area of the navlet.</NOTES>
			</PROPERTY>
			<METHOD name="addItem" returntype="object/item" construct="">
				<PARAMETERS>
					<PARAMETER name="itemId" type="string" required="1"/>
					<PARAMETER name="caption" type="string" required="1"/>
					<PARAMETER name="action" type="string" required="0"/>
					<PARAMETER name="mouseover" type="string" required="0"/>
					<PARAMETER name="indent" type="integer" required="0"/>
				</PARAMETERS>
				<NOTES>Adds an item to the navlet items collection.</NOTES>
				<EXAMPLES>var oTransNav=portalObj.tabArea.tabs["PAGE"].getNavlet("lawformtransfers");
oTransNav.addItem("CU01.1","Currency Code","lawformDoTransfer('CU01.1')","(CU01.1) Currency Code");
				</EXAMPLES>
			</METHOD>
			<METHOD name="changeItem" returntype="object/item" construct="">
				<PARAMETERS>
					<PARAMETER name="itemId" type="string" required="1"/>
					<PARAMETER name="caption" type="string" required="1"/>
					<PARAMETER name="action" type="string" required="0"/>
					<PARAMETER name="mouseover" type="string" required="0"/>
					<PARAMETER name="indent" type="integer" required="0"/>
				</PARAMETERS>
				<NOTES>Allows you to change various properties of an item in the navlet items collection.</NOTES>
				<EXAMPLES>var oTransNav=portalObj.tabArea.tabs["PAGE"].getNavlet("lawformtransfers");
oTransNav.changeItem("CU01.1","Currency Code Maitenance");
				</EXAMPLES>
			</METHOD>
			<METHOD name="changeItemName" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="itemId" type="string" required="1"/>
					<PARAMETER name="name" type="string" required="1"/>
				</PARAMETERS>
				<NOTES>Allows you to change name property of an item in the navlet items collection.

				The following example has the same result as the changeItem example.
				</NOTES>
				<EXAMPLES>var oTransNav=portalObj.tabArea.tabs["PAGE"].getNavlet("lawformtransfers");
oTransNav.changeItemName("CU01.1","Currency Code Maintenance");
				</EXAMPLES>
			</METHOD>
			<METHOD name="changeItemState" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="itemId" type="string" required="1"/>
					<PARAMETER name="state" type="string" required="1" comment="selected,disabled,enabled,focus"/>
				</PARAMETERS>
				<NOTES>Allows you to change the state property of an item in the navlet items collection.</NOTES>
				<EXAMPLES>var oTransNav=portalObj.tabArea.tabs["PAGE"].getNavlet("lawformtransfers");
oTransNav.changeItemState("CU01.1","disabled");
				</EXAMPLES>
			</METHOD>
			<METHOD name="clearItems" returntype="" construct="">
				<NOTES>Clears all the items in the navlet items collection.</NOTES>
			</METHOD>
			<METHOD name="collapse" returntype="" construct="">
				<NOTES>Collapses an expanded navlet.</NOTES>
			</METHOD>
			<METHOD name="expand" returntype="" construct="">
				<NOTES>Expands a collapsed navlet.</NOTES>
			</METHOD>
			<METHOD name="hide" returntype="" construct="">
				<NOTES>Hides (makes not visible) the navlet.</NOTES>
			</METHOD>
			<METHOD name="removeItem" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="itemId" type="string" required="1"/>
				</PARAMETERS>
				<NOTES>Removes an item from the navlet items collection.</NOTES>
				<EXAMPLES>var oTransNav=portalObj.tabArea.tabs["PAGE"].getNavlet("lawformtransfers");
oTransNav.removeItem("CU01.1");
				</EXAMPLES>
			</METHOD>
			<METHOD name="selectFirst" returntype="" construct="">
				<NOTES>Highlights the first item of the navlet.</NOTES>
			</METHOD>
			<METHOD name="selectLast" returntype="" construct="">
				<NOTES>Highlights the last item of the navlet.</NOTES>
			</METHOD>
			<METHOD name="selectNext" returntype="" construct="">
				<NOTES>Highlights the item after the current highlighted item in the navlet.</NOTES>
			</METHOD>
			<METHOD name="selectPrevious" returntype="" construct="">
				<NOTES>Highlights the item previous to the current highlighted item in the navlet.</NOTES>
			</METHOD>
			<METHOD name="show" returntype="" construct="">
				<NOTES>Makes a hidden navlet visible.</NOTES>
			</METHOD>
			<NOTES/>
			<EXAMPLES/>
		</CONSTRUCTOR>
		<CONSTRUCTOR name="NavTabPage">
			<PARAMETERS>
				<PARAMETER name="portalWnd" type="object/window" required="1" />
				<PARAMETER name="id" type="string" required="1" />
				<PARAMETER name="title" type="string" required="1" />
				<PARAMETER name="name" type="string" required="1" />
			</PARAMETERS>
			<NOTES>
			A NavTabPage object is a member of the items collection of the TabObject object.

			The 3 Portal tabpage objects can be referrenced through the lawsonPortal global variable
			(or the local application form variable, portalObj) tabArea property.
			</NOTES>
			<EXAMPLES>var oTransNav=portalObj.tabArea.tabs["PAGE"].getNavlet("lawformtransfers");
			</EXAMPLES>
			<PROPERTY name="portalWnd" type="object/window" construct="">
				<NOTES>A reference to the portal window.</NOTES>
			</PROPERTY>
			<PROPERTY name="id" type="string" construct="">
				<NOTES>The internal name of the tabpage: dt1, dt2, dt3.</NOTES>
			</PROPERTY>
			<PROPERTY name="name" type="string" construct="">
				<NOTES>Not used.</NOTES>
			</PROPERTY>
			<PROPERTY name="navletObjects" type="collection" construct="navObj">
				<NOTES>The collection of navlets (navObj) on the tab page.</NOTES>
			</PROPERTY>
			<PROPERTY name="title" type="string" construct="">
				<NOTES>The text that appears on the tab.</NOTES>
			</PROPERTY>
			<METHOD name="addNavlet" returntype="object" construct="navObj">
				<PARAMETERS>
					<PARAMETER name="caption" type="string" required="1"/>
					<PARAMETER name="navletID" type="string" required="1"/>
					<PARAMETER name="target" type="object" required="1"/>
					<PARAMETER name="phraseId" type="string" required="0"/>
				</PARAMETERS>
				<NOTES>This method adds a new navlet to the tab page navlets collection (navletObjects).

				To insure a localized string appears in the navlet header, use the optional phraseId parameter
				which is used for a lookup from the lawsonPortal phraseObj.
				</NOTES>
				<EXAMPLES>var pageTab=portalObj.tabArea.tabs["PAGE"];
oTransNav=pageTab.addNavlet('Related Links','lawformtransfers',window,'LBL_RELATED_LINKS');</EXAMPLES>
			</METHOD>
			<METHOD name="clearNavlets" returntype="" construct="">
				<NOTES>This method will clear all the navlets currently defined on a tab page.</NOTES>
				<EXAMPLES>function FORM_OnAfterFrameworkInit()
{
	var pageTab=portalObj.tabArea.tabs["PAGE"];
	pageTab.clearNavlets();
	var myNavlet=pageTab.addNavlet('Custom Links','mytransfers',window);
	myNavlet.addItem("CU01.1","Currency Code","lawformDoTransfer('CU01.1')","(CU01.1) Currency Code");
}				</EXAMPLES>
			</METHOD>
			<METHOD name="collapseNavlets" returntype="" construct="">
				<NOTES>This method will set all the navletObjects to a collapsed state.</NOTES>
			</METHOD>
			<METHOD name="expand_collapseNavlets" returntype="" construct="">
				<NOTES>This is a 'toggle' method to expand navletObject if they are collapsed or to
				collapse them all if they are expanded.</NOTES>
			</METHOD>
			<METHOD name="expandNavlets" returntype="" construct="">
				<NOTES>This method will set all the navletObjects to an expanded state.</NOTES>
			</METHOD>
			<METHOD name="getNavlet" returntype="string" construct="">
				<PARAMETERS>
					<PARAMETER name="id" type="string" required="1"/>
				</PARAMETERS>
				<NOTES>This method will retrieve a reference to the specified navlet.</NOTES>
				<EXAMPLES>var pageTab=portalObj.tabArea.tabs["PAGE"];
var oTransNav=pageTab.getNavlet("lawformtransfers");</EXAMPLES>
			</METHOD>
			<METHOD name="getTitle" returntype="string" construct="">
				<NOTES>This method returns the title or text of the tab for this tab page.</NOTES>
			</METHOD>
			<METHOD name="setTitle" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="title" type="string" required="1"/>
				</PARAMETERS>
				<NOTES>This method set the title or text of the tab for this tab page.</NOTES>
			</METHOD>
			<METHOD name="hide" returntype="" construct="">
				<NOTES>This method set the visible state of the tab page to hidden.</NOTES>
				<EXAMPLES>portalObj.tabArea.tabs["PAGE"].hide();
				</EXAMPLES>
			</METHOD>
			<METHOD name="removeNavlet" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="navletID" type="string" required="1"/>
				</PARAMETERS>
				<NOTES>This method will remove the specified navlet.</NOTES>
				<EXAMPLES>function FORM_OnAfterFrameworkInit()
{
	var pageTab=portalObj.tabArea.tabs["PAGE"];
	pageTab.removeNavlet("lawformtransfers");
}				</EXAMPLES>
			</METHOD>
			<METHOD name="selectFirst" returntype="object/NavletObject" construct="">
				<NOTES>This method will select (highlight) the first item in the items collection.</NOTES>
			</METHOD>
			<METHOD name="selectLast" returntype="object/NavletObject" construct="">
				<NOTES>This method will select (highlight) the last item in the items collection.</NOTES>
			</METHOD>
			<METHOD name="selectNext" returntype="object/NavletObject" construct="">
				<PARAMETERS>
					<PARAMETER name="navletID" type="string" required="1"/>
				</PARAMETERS>
				<NOTES>This method will select (highlight) the next item in the items collection after the
				currently selected item.</NOTES>
			</METHOD>
			<METHOD name="selectPrevious" returntype="object/NavletObject" construct="">
				<PARAMETERS>
					<PARAMETER name="navletID" type="string" required="1"/>
				</PARAMETERS>
				<NOTES>This method will select (highlight) the previous item in the items collection preceding the
				currently selected item.</NOTES>
			</METHOD>
			<METHOD name="show" returntype="" construct="">
				<NOTES>This method sets the visible state of the tab page to visible.</NOTES>
				<EXAMPLES>portalObj.tabArea.tabs["PAGE"].show();
				</EXAMPLES>
			</METHOD>
		</CONSTRUCTOR>
		<CONSTRUCTOR name="SSOObjectFactory">
			<PARAMETERS>
				<PARAMETER name="portalWnd" type="window" required="1"/>
			</PARAMETERS>
			<NOTES>
			This object is instantiated as a global variable (by SSO): objFactory.

			Note: Familiarity with Microsoft MSXML objects and methods is assumed if using this object.
			</NOTES>
			<EXAMPLES />
			<PROPERTY name="xmlVersion" type="string" construct=""/>
			<PROPERTY name="xmlDOMProgId" type="string" construct=""/>
			<PROPERTY name="xmlHTTPProgId" type="string" construct=""/>
			<PROPERTY name="xmlFTDOMProgId" type="string" construct=""/>
			<PROPERTY name="xmlXSLTProgId" type="string" construct=""/>
			<METHOD name="getMSXMLVersion" returntype="string" construct="" >
				<NOTES>This method returns the version of MSXML installed on the client machine.

				Note: Familiarity with Microsoft MSXML objects and methods is assumed if using this method.</NOTES>
			</METHOD>
			<METHOD name="createInstance" returntype="object" construct="">
				<PARAMETERS>
					<PARAMETER name="type" type="string" required="1"/>
				</PARAMETERS>
				<NOTES>This method is used to instantiate an ActiveXObject, typically "HTTP" or "DOM".

				Note: Familiarity with Microsoft MSXML objects and methods is assumed if using this method.
				</NOTES>
				<EXAMPLES>var domObj=portalWnd.objFactory.createInstance("DOM");
domObj.async=false;
domObj.load("some.xml");
				</EXAMPLES>
			</METHOD>
		</CONSTRUCTOR>
		<CONSTRUCTOR name="phraseObj">
			<PARAMETERS>
				<PARAMETER name="construct" type="string" required="1"/>
			</PARAMETERS>
			<NOTES>
			The object is used to serve up localized phrases used in the Portal. The parameter
			in the constructor may be a web-addresable path to an XML file containing the 
			phrases.  For message files in the standard data persisted location, simply pass
			the filename minus the XML extension.
			</NOTES>
			<EXAMPLES>var myPhrases=new portalWnd.phraseObj("forms");
var inqErrorMsg=myPhrases.getPhrase("ERR_MUST_INQUIRE_FIRST");
			</EXAMPLES>
			<PROPERTY name="phraseDoc" type="object/DataStorage" construct=""/>
			<METHOD name="getXML" returntype="string" construct="">
				<NOTES>Returns the contents of the phraseDoc storage as a string.</NOTES>
			</METHOD>
			<METHOD name="getPhrase" returntype="string" construct="">
				<PARAMETERS>
					<PARAMETER name="phraseid" type="string" required="1"/>
				</PARAMETERS>
				<NOTES>
				This method retrieves the phrase associated with the specified phrase id.  If
				a phrase matching the id is not found, the phraseId is returned.
				</NOTES>
				<EXAMPLES>portalWnd.cmnDlg.messageBox(portalWnd.erpPhrases.getPhrase("ERR_FORM_MAGICINIT"),"ok","stop",window);
				</EXAMPLES>
			</METHOD>
			<NOTES/>
			<EXAMPLES/>
		</CONSTRUCTOR>
		<CONSTRUCTOR name="PortalRole">
			<PARAMETERS>
				<PARAMETER name="portalWnd" type="window" required="1"/>
				<PARAMETER name="id" type="string" required="1"/>
			</PARAMETERS>
			<NOTES>
			A global of this object for the logged on user can be reference through the global 
			instance of the UserProfile object oRole property.

			Each of the role object's properties have getters and setters and it is recommeded that their values
			be accessed using those methods rather than referencing the properties directly.
			</NOTES>
			<EXAMPLES>var homePage=portalWnd.oUserProfile.oRole.getHome();
			</EXAMPLES>
			<PROPERTY name="portalWnd" type="object/window" construct="">
				<NOTES>A reference to the portal window.</NOTES>
			</PROPERTY>
			<PROPERTY name="id" type="string" construct="">
				<NOTES>The id of the role, actually an XML file name.  The default role id is 'default.xml'.</NOTES>
			</PROPERTY>
			<PROPERTY name="home" type="string" construct="">
				<NOTES>The home page for the role, by default 'home.htm'.</NOTES>
			</PROPERTY>
			<PROPERTY name="accessKnowledgeBase" type="boolean" construct="">
				<NOTES>If true, users assigned the role are presented with a link to Lawson KnowledgeBase where available.</NOTES>
			</PROPERTY>
			<PROPERTY name="allowHotkeys" type="boolean" construct="">
				<NOTES>If true, users assigned the role are are able to customize portal hotkeys.</NOTES>
			</PROPERTY>
			<PROPERTY name="useFind" type="boolean" construct="">
				<NOTES>If true, users assigned the role are presented the search box.</NOTES>
			</PROPERTY>
			<PROPERTY name="useMenus" type="boolean" construct="">
				<NOTES>If true, users assigned the role are presented the standard Portal menus.</NOTES>
			</PROPERTY>
			<PROPERTY name="useShortcuts" type="boolean" construct="">
				<NOTES>If true, users assigned the role are able to set up custom shortcuts in User Options.</NOTES>
			</PROPERTY>
			<METHOD name="getAccessKnowledgeBase" returntype="boolean" construct="">
				<NOTES>Retrieves the value of the accessKnowledgeBase property.</NOTES>
				<EXAMPLES>var bAccess=portalWnd.oUserProfile.oRole.getAccessKnowledgeBase();
				</EXAMPLES>
			</METHOD>
			<METHOD name="setAccessKnowledgeBase" returntype="boolean" construct="">
				<PARAMETERS>
					<PARAMETER name="bAccess" type="boolean" required="0" default="true"/>
				</PARAMETERS>
				<NOTES>Sets the value of the accessKnowledgeBase property.</NOTES>
				<EXAMPLES>portalWnd.oUserProfile.oRole.setAccessKnowledgeBase(false);
				</EXAMPLES>
			</METHOD>
			<METHOD name="getAllowHotkeys" returntype="boolean" construct="">
				<NOTES>Retrieves the value of the allowHotkeys property.</NOTES>
				<EXAMPLES>var bAllow=portalWnd.oUserProfile.oRole.getAllowHotkeys();
				</EXAMPLES>
			</METHOD>
			<METHOD name="setAllowHotkeys" returntype="boolean" construct="">
				<PARAMETERS>
					<PARAMETER name="bAllow" type="boolean" required="0" default="true"/>
				</PARAMETERS>
				<NOTES>Sets the value of the allowHotkeys property.</NOTES>
				<EXAMPLES>portalWnd.oUserProfile.oRole.setAllowHotkeys(false);
				</EXAMPLES>
			</METHOD>
			<METHOD name="getHome" returntype="string" construct="">
				<NOTES>Retrieves the value of the home property.</NOTES>
				<EXAMPLES>var homePage=portalWnd.oUserProfile.oRole.getHome();
				</EXAMPLES>
			</METHOD>
			<METHOD name="setHome" returntype="string" construct="">
				<PARAMETERS>
					<PARAMETER name="home" type="string" required="1"/>
				</PARAMETERS>
				<NOTES>Sets the value of the home property.</NOTES>
				<EXAMPLES>var newHome=portalWnd.oUserProfile.oRole.setHome("myHome.htm");
				</EXAMPLES>
			</METHOD>
			<METHOD name="getId" returntype="string" construct="">
				<NOTES>Retrieves the value of the dd property.</NOTES>
				<EXAMPLES>var roleId=portalWnd.oUserProfile.oRole.getId();
				</EXAMPLES>
			</METHOD>
			<METHOD name="getUseFind" returntype="boolean" construct="">
				<NOTES>Retrieves the value of the useFind property.</NOTES>
				<EXAMPLES>var bAllow=portalWnd.oUserProfile.oRole.getUseFind();
				</EXAMPLES>
			</METHOD>
			<METHOD name="setUseFind" returntype="boolean" construct="">
				<PARAMETERS>
					<PARAMETER name="bAllow" type="boolean" required="0" default="true"/>
				</PARAMETERS>
				<NOTES>Sets the value of the useFind property.</NOTES>
				<EXAMPLES>portalWnd.oUserProfile.oRole.setUseFind(false);
				</EXAMPLES>
			</METHOD>
			<METHOD name="getUseMenus" returntype="boolean" construct="">
				<NOTES>Retrieves the value of the useMenus property.</NOTES>
				<EXAMPLES>var bAllow=portalWnd.oUserProfile.oRole.getUseMenus();
				</EXAMPLES>
			</METHOD>
			<METHOD name="setUseMenus" returntype="boolean" construct="">
				<PARAMETERS>
					<PARAMETER name="bAllow" type="boolean" required="0" default="true"/>
				</PARAMETERS>
				<NOTES>Sets the value of the useMenus property.</NOTES>
				<EXAMPLES>portalWnd.oUserProfile.oRole.setUseMenus(false);
				</EXAMPLES>
			</METHOD>
			<METHOD name="getUseShortcuts" returntype="boolean" construct="">
				<NOTES>Retrieves the value of the useShortcuts property.</NOTES>
				<EXAMPLES>var bAllow=portalWnd.oUserProfile.oRole.getUseShortcuts();
				</EXAMPLES>
			</METHOD>
			<METHOD name="setUseShortcuts" returntype="boolean" construct="">
				<PARAMETERS>
					<PARAMETER name="bAllow" type="boolean" required="0" default="true"/>
				</PARAMETERS>
				<NOTES>Sets the value of the useShortcuts property.</NOTES>
				<EXAMPLES>portalWnd.oUserProfile.oRole.setUseShortcuts(false);
				</EXAMPLES>
			</METHOD>
		</CONSTRUCTOR>
		<CONSTRUCTOR name="TabObject">
			<PARAMETERS>
				<PARAMETER name="portalWnd" type="object/window" required="1"/>
			</PARAMETERS>
			<NOTES>This object is used to manipulate the Portal's navigation bar.

			A global instance of this object can be referenced on the lawsonPortal global variable
			(or the local application form variable, portalObj) tabArea property.
			</NOTES>
			<EXAMPLES>portalObj.tabArea.setVisibleState(true);</EXAMPLES>
			<PROPERTY name="portalWnd" type="object/window" construct="">
				<NOTES>A reference to the portal window.</NOTES>
			</PROPERTY>
			<PROPERTY name="tabs" type="object/collection" construct="NavTabPage">
				<NOTES>The collection of tab pages associated with the tab object.  There are 3 tab pages
				in the collection: HOME, MENU, and PAGE.</NOTES>
			</PROPERTY>
			<PROPERTY name="visible" type="boolean" construct="">
				<NOTES>The visible state of the tab object.</NOTES>
			</PROPERTY>
			<METHOD name="collapse" returntype="" construct="">
				<NOTES>Collapses the tab object.</NOTES>
			</METHOD>
			<METHOD name="expand" returntype="" construct="">
				<NOTES>Expands the tab object.</NOTES>
			</METHOD>
			<METHOD name="getVisibleState" returntype="boolean" construct="">
				<NOTES>Returns the visible state of the tab object.</NOTES>
			</METHOD>
			<METHOD name="setVisibleState" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="bVisible" type="boolean" required="0" />
				</PARAMETERS>
				<NOTES>Sets the visible state of the tab object to the specified state.  If the parameter is not
				supplied the default value is true.</NOTES>
			</METHOD>
			<METHOD name="initializeDisplay" returntype="" construct="">
				<NOTES>Sets the expanded state of the navlets based on the user preference. This method is
				invoked by the framework when the portal loads and for application forms.</NOTES>
			</METHOD>
			<METHOD name="saveVisibleState" returntype="" construct="">
				<NOTES>Persists the current visible state of the tab object (presumably because the application
				will change the state and should restore if on unload).</NOTES>
				<EXAMPLES>See restoreVisibleState</EXAMPLES>
			</METHOD>
			<METHOD name="restoreVisibleState" returntype="" construct="">
				<NOTES>Restores the visible state of the tab object to the last saved state.</NOTES>
				<EXAMPLES>function FORM_OnAfterFrameworkInit()
{
	// hide the navigation bar
	portalObj.tabArea.saveVisibleState();
	portalObj.tabArea.setVisibleState(false);
}
function FORM_OnTerminate()
{
	// restore state of navigation bar
	portalObj.tabArea.restoreVisibleState();
}
				</EXAMPLES>
			</METHOD>
			<METHOD name="switchActiveLeftPane" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="increment" type="number" required="1" />
				</PARAMETERS>
				<NOTES>This method will change the active tab page of the tab area.  Pass 1 to switch
				to the next tab page.  Pass -1 to switch to the previous tab page.</NOTES>
				<EXAMPLES>portalObj.tabArea.switchActiveLeftPane(1);</EXAMPLES>
			</METHOD>
			<METHOD name="switchActiveLeftPaneById" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="id" type="string" required="1" />
				</PARAMETERS>
				<NOTES>This method will change the active tab page of the tab area to the specified
				tab page id.  The tab page ids are: 'dt1' (HOME), 'dt2' (PAGE) and 'dt3' (MENU).</NOTES>
				<EXAMPLES>portalObj.tabArea.switchActiveLeftPaneById("dt2");</EXAMPLES>
			</METHOD>
		</CONSTRUCTOR>
		<CONSTRUCTOR name="Toolbar">
			<PARAMETERS>
				<PARAMETER name="portalWnd" type="object/window" required="1"/>
				<PARAMETER name="wnd" type="object/window" required="1"/>
				<PARAMETER name="tbContainer" type="object/div" required="0"/>
			</PARAMETERS>
			<NOTES>
			A global instance of this object can be referenced through the lawsonPortal global
			variable (or the local application form variable, portalObj) toolbar property.  This 
			reference is the main toolbar of the Portal.  However, other windows or portal pages 
			may have their own instance of a toolbar object.
			</NOTES>
			<EXAMPLES>with (portalObj.toolbar)
{
	target=window;
	clear();
	createButton(portalObj.getPhrase("LBL_OK"),lawformDoFunctionClick,"ok");
	createButton(portalObj.getPhrase("LBL_CANCEL"),MyCancel,"cancel");
}
			</EXAMPLES>
			<PROPERTY name="doc" type="object/document" construct="">
				<NOTES>The HTML document object for the target window.</NOTES>
			</PROPERTY>
			<PROPERTY name="portalWnd" type="object/window" construct="">
				<NOTES>A reference to the portal window.</NOTES>
			</PROPERTY>
			<PROPERTY name="target" type="object/window" construct="">
				<NOTES>The window owning the HTML document containing the toolbar.</NOTES>
			</PROPERTY>
			<PROPERTY name="tbar" type="object/element" construct="">
				<NOTES>The toolbar object's HTML element.</NOTES>
			</PROPERTY>
			<METHOD name="addSeparator" returntype="" construct="">
				<NOTES>This method adds an image separator to the toolbar.</NOTES>
			</METHOD>
			<METHOD name="clear" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="bWrap" type="boolean" required="0" comment="sets wrap/no wrap behavior" default="false"/>
				</PARAMETERS>
				<NOTES>This method clears all the buttons from the toolbar.

				If no wrap behavior is set on the toolbar and not all toolbar buttons can be
				painted in the available space, a dropdown list will be painted of remaining buttons.
				</NOTES>
				<EXAMPLES>function FORM_OnAfterFrameworkInit()
{
	with (portalObj.toolbar)
	{
		target=window;
		clear(true);			// force buttons to wrap
		// createButton calls here...presumably several buttons which when
		// the screen is resized will wrap to the next line
	}
}				</EXAMPLES>
			</METHOD>
			<METHOD name="createButton" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="caption" type="string" required="1"/>
					<PARAMETER name="action" type="function" required="1"/>
					<PARAMETER name="id" type="string" required="1"/>
					<PARAMETER name="state" type="string" required="0"/>
					<PARAMETER name="userdata" type="string" required="0"/>
					<PARAMETER name="ico" type="string" required="0"/>
				</PARAMETERS>
				<NOTES>This method adds a button to the toolbar.  Use the state parameter to set an
				initial state, "disabled" for example.  The userdata parameter is useful on application
				forms to pass a function code (fc) to the lawformDoFunction method. The ico parameter
				can be used to honor the user preference for toolbar button icons for a standard set of
				functions: "add", "chg", "del" and more.</NOTES>
				<EXAMPLES>function FORM_OnAfterFrameworkInit()
{
	with (portalObj.toolbar)
	{
		target=window;
		clear();
		createButton(portalObj.getPhrase("LBL_OK"),lawformDoFunctionClick,"ok","disabled","C","chg");
		createButton(portalObj.getPhrase("LBL_CANCEL"),MyCancel,"cancel");
	}
}				</EXAMPLES>
			</METHOD>
			<METHOD name="changeButtonIcon" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="id" type="string" required="1" comment="button id" />
					<PARAMETER name="ico" type="string" required="1" comment="icon id" />
				</PARAMETERS>
				<NOTES>Use this method to change the icon of a button.
				
				The icon must be found at: "&amp;lt;portal location>/images/ico_toolbutton_&amp;lt; ico>.gif"
				</NOTES>
				<EXAMPLES>portalObj.toolbar.changeButtonIcon("ok","chg");</EXAMPLES>
			</METHOD>
			<METHOD name="changeButtonState" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="id" type="string" required="1" comment="button id" />
					<PARAMETER name="state" type="string" required="1" comment="button state: enabled,disabled,hide,show" />
				</PARAMETERS>
				<NOTES>Use this method to change the state of a button.</NOTES>
				<EXAMPLES>portalObj.toolbar.changeButtonState("ok","enabled");</EXAMPLES>
			</METHOD>
			<METHOD name="changeButtonText" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="id" type="string" required="1" comment="button id" />
					<PARAMETER name="text" type="string" required="1" comment="new button text" />
				</PARAMETERS>
				<NOTES>Use this method to change the text of a button.</NOTES>
				<EXAMPLES>portalObj.toolbar.changeButtonText("ok",portalObj.getPhrase("LBL_CHANGE"));</EXAMPLES>
			</METHOD>
			<METHOD name="changeButtonTitle" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="id" type="string" required="1" comment="button id" />
					<PARAMETER name="title" type="string" required="1" comment="button title" />
				</PARAMETERS>
				<NOTES>Use this method to change the title (tooltip) of a button.</NOTES>
				<EXAMPLES>portalObj.toolbar.changeButtonTitle("ok","Click to Update");</EXAMPLES>
			</METHOD>
			<METHOD name="changeButtonWidth" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="id" type="string" required="1" comment="button id" />
					<PARAMETER name="width" type="string" required="1" comment="button id" />
				</PARAMETERS>
				<NOTES>Use this method to change the width (in pixels) of a button.</NOTES>
				<EXAMPLES>portalObj.toolbar.changeButtonText("ok","70");</EXAMPLES>
			</METHOD>
			<METHOD name="removeButton" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="id" type="string" required="1"/>
				</PARAMETERS>
				<NOTES>Use this method to remove a button from the toolbar.</NOTES>
				<EXAMPLES>portalObj.toolbar.removeButton("ok");</EXAMPLES>
			</METHOD>
		</CONSTRUCTOR>
		<CONSTRUCTOR name="UserProfile">
			<PARAMETERS>
				<PARAMETER name="portalWnd" type="window" required="1"/>
			</PARAMETERS>
			<NOTES>
			This object is instantiated as a global variable: oUserProfile.
			</NOTES>
			<EXAMPLES>var bIsAdmin=portalWnd.oUserProfile.isPortalAdmin();
			</EXAMPLES>
			<PROPERTY name="portalWnd" type="object/window" construct="">
				<NOTES>A reference to the portal window.</NOTES>
			</PROPERTY>
			<PROPERTY name="id" type="string" construct="">
				<NOTES>The user's RM id.</NOTES>
			</PROPERTY>
			<PROPERTY name="oRole" type="object/PortalRole" construct="">
				<NOTES>A global instance of the user's role object (PortalRole).</NOTES>
			</PROPERTY>
			<PROPERTY name="portalAdmin" type="boolean" construct="">
				<NOTES>Indicates whether or not the user has Portal Administration access.</NOTES>
			</PROPERTY>
			<METHOD name="isPortalAdmin" returntype="boolean" construct="">
				<NOTES>Indicates whether user has Portal Administration access.</NOTES>
				<EXAMPLES>var bIsAdmin=portalWnd.oUserProfile.isPortalAdmin();</EXAMPLES>
			</METHOD>
			<METHOD name="getAttribute" returntype="string" construct="">
				<PARAMETERS>
					<PARAMETER name="id" type="string" required="1"/>
					<PARAMETER name="bPrompt" type="boolean" required="0"/>
					<PARAMETER name="fPersist" type="object/function" required="0"/>
				</PARAMETERS>
				<EXAMPLES>var pdl=portalWnd.oUserProfile.getAttribute("ProductLine");
				</EXAMPLES>
			</METHOD>
			<METHOD name="setAttribute" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="id" type="string" required="1"/>
					<PARAMETER name="value" type="string" required=""/>
				</PARAMETERS>
				<NOTES>This method saves a temporary value (not persisted) in user profile data.</NOTES>
				<EXAMPLES>portalWnd.oUserProfile.setAttribute("ShoeSize","8");</EXAMPLES>
			</METHOD>
			<METHOD name="getId" returntype="string" construct="">
				<NOTES>Returns the users RM id.</NOTES>
				<EXAMPLES>var msg="Your user id is " + portalWnd.oUserProfile.getId();
portalWnd.cmnDlg.messageBox(msg);

// to get the Lawson user name use the following example:
var msg=msg="Your Lawson user name is " + 
		portalWnd.oUserProfile.getAttribute("LawsonUserName");
portalWnd.cmnDlg.messageBox(msg);
			</EXAMPLES>
			</METHOD>
		</CONSTRUCTOR>
	</PORTAL>
	<!-- forms objects =====================================================-->
	<FORMS>
		<!-- form events ===================================================-->
		<CONSTRUCTOR name="Form Events">
			<OBJECT name="Form" evtname="FORM">
				<EVENT name="OnInit" returntype="">
					<PARAMETERS/>
					<NOTES>
					Triggered as the form is being loaded and before the form's transactional object is initialized.
					</NOTES>
					<EXAMPLES>function FORM_OnInit()
{
	oWizard=new Wizard(window, strPDL, strTKN);
	oWizard.showWizard();
}
					</EXAMPLES>
				</EVENT>
				<EVENT name="OnTerminate" returntype="">
					<PARAMETERS/>
					<NOTES>
					Triggered on form unload.  Use this event with caution.  It is known that
					a browser refresh or the use of the back button can sometimes trigger this event in an
					unexpected manner.
					</NOTES>
				<EXAMPLES>function FORM_OnAfterFrameworkInit()
{
	// hide the navigation bar
	portalObj.tabArea.saveVisibleState();
	portalObj.tabArea.setVisibleState(false);
}
function FORM_OnTerminate()
{
	// restore state of navigation bar
	portalObj.tabArea.restoreVisibleState();
}
				</EXAMPLES>
				</EVENT>
				<EVENT name="OnKeyDown" returntype="boolean">
					<PARAMETERS>
						<PARAMETER name="evt" type="object/event" required="1" comment="browser's event object" />
						<PARAMETER name="action" type="string" required="1" comment="hotkey defined action name" />
					</PARAMETERS>
					<NOTES>
					Triggered before processing a form's key down event.
					Available form action codes can be seen in the Portal from the home page debug 
					information screen by clicking on the 'User Hotkeys' link once a Lawson application 
					has been accessed.

					To inhibit portal handling of the key action return false, otherwise return true.

					Note: implementation of this event could result in sluggish keyboard response if
					time-consuming logic is supplied.  Keep processing to a minimum in this event handler.
					</NOTES>
				<EXAMPLES>function FORM_OnKeyDown(evt, action)
{
	// any special keyhandling goes here
	switch(action)
	{
	case "doClearAll":
	case "doClearToEnd":
		// prevent user from using clear form hotkeys
		return false;
		break;

	// additional case statements as needed
	}
	return true;
}
				</EXAMPLES>
				</EVENT>
				<EVENT name="OnBeforeClearForm" returntype="boolean">
					<PARAMETERS>
						<PARAMETER name="fromField" type="string" required="0"/>
					</PARAMETERS>
					<NOTES>
					Triggered before the form is cleared by using the Portal Hot Keys 'Clear To 
					End Of Form' and 'Clear Entire Form'. The parameter 'fromField' is passed if 
					clearing to the end of the form.  No parameter is passed if clearing the entire form.
					
					Returning false will cancel the event.
					</NOTES>
					<EXAMPLES>
function FORM_OnBeforeClearForm(fromField)
{
	// replace lawson functionality with custom code to handle your unique needs.
	clearCustomForm(fromField);
	return false;
}
					</EXAMPLES>
				</EVENT>

				<EVENT name="OnAfterClearForm" returntype="">
					<PARAMETERS/>
					<NOTES>
					Triggered after the form is cleared.
					</NOTES>
					<EXAMPLES>
function FORM_OnAfterClearForm()
{
	// augment lawson functionality with custom code to handle your unique needs.
}
					</EXAMPLES>
				</EVENT>
				<EVENT name="OnBeforeDataExchange" returntype="object/CRTIOData">
					<PARAMETERS>
						<PARAMETER name="oCRTIO" type="object/CRTIOData" required="1"/>
					</PARAMETERS>
					<NOTES>
					Triggered before the transaction CRTIO processing.

					If this event is implemented (presumably to inquire on or manipulate
					the CRTIO object data) you should return the same object.
					</NOTES>
					<EXAMPLES>function FORM_OnBeforeDataExchange(oCRTIO)
{
	// inspect and manipulate oCRTIO data, then return it.
	return oCRTIO;
}
					</EXAMPLES>
				</EVENT>
				<EVENT name="OnAfterDataExchange" returntype="">
					<PARAMETERS>
						<PARAMETER name="oCRTIO" type="object/CRTIOData" required="1"/>
					</PARAMETERS>
					<NOTES>
					Triggered after the interface's CRTIO processing is complete.
					</NOTES>
					<EXAMPLES/>
				</EVENT>
				<EVENT name="OnAfterDataInit" returntype="">
					<PARAMETERS/>
					<NOTES>
					Triggered after the form's transactional object (tranMagic) is initialized.
					</NOTES>
					<EXAMPLES>FORM_OnAfterDataInit: This event is triggered after the form's 
transactional object (tranMagic) is initialized. Suppose you want to 
assign a default to vendor group in AP10 and disable the HTM element.

function FORM_OnAfterDataInit()
{
	lawForm.setFormValue("text1", portalObj.getUserVariable("VENDOR_GROUP"));
	var venGrp = lawForm.getFormElement("text1");
	if (venGrp)
		vengrp.disabled = true;
}
					</EXAMPLES>
				</EVENT>
				<EVENT name="OnAfterFrameworkInit" returntype="">
					<PARAMETERS/>
					<NOTES>
					Triggered after the form's framework elements (navigation bar, toolbar buttons
					help options) have been initialized.
					</NOTES>
					<EXAMPLES>FORM_OnAfterFrameworkInit: Suppose you want to add an additional help menu item
that would display a custom HTM page you developed and pass it the token and
description of the form opening it.

function FORM_OnAfterFrameworkInit()
{
	portalWnd.helpOptions.addItem("customHelp", "Custom Help" "myHelpFunction()", window);
}
var myHelpWnd=null;
function myHelpFunction()
{
	var helpURL="custom_help.htm?token="+strTKN+"&amp;title="+strTitle;
	if (myHelpWnd &amp;&amp; !myHelpWnd.closed)
	{
		myHelpWnd.navigate(helpURL);
		myHelpWnd.focus();
	}
	else
		myHelpWnd=window.open(helpURL);
}
					</EXAMPLES>
				</EVENT>
				<EVENT name="OnBeforeTransaction" returntype="boolean">
					<PARAMETERS>
						<PARAMETER name="fc" type="string" required="1" comment="form action code being performed" />
					</PARAMETERS>
					<NOTES>
					Triggered before the transaction is sent to application server.
					To inhibit the transaction return false, otherwise return true.
					</NOTES>
					<EXAMPLES>FORM_OnBeforeTransaction: The following example uses the 
OnBeforeTransaction event to perform a validation and then uses 
the positionInFieldById function to return focus back to a specified
field, this case, "text1".

function FORM_OnBeforeTransaction(fc)
{
	if (lawForm.getFormValue("text1) == "")
	{
		lawForm.setMessage("message");
		lawForm.positionInFieldById("text1");
		return false;
	}
	return true;
}
					</EXAMPLES>
				</EVENT>
				<EVENT name="OnAfterTransaction" returntype="">
					<PARAMETERS>
						<PARAMETER name="data" type="object" required="1" comment="transaction response data (as an XML DOM object)" />
					</PARAMETERS>
					<NOTES>
					Triggered after the transaction service response is loaded.
					</NOTES>
					<EXAMPLES>function FORM_OnAfterTransaction(data)
{
	// was the transaction successful?
	if (formState.agsError) return;

	// following an add transaction, clear the "_f2" field
	var fc=data.getElementsByTagName("_f1");
	if (fc &amp;&amp; fc.length &gt; 0)
		fc=fc[0];
	if (fc == "A")
		lawForm.setDataValue("GL-COMPANY","");
}
					</EXAMPLES>
				</EVENT>
				<EVENT name="OnBeforeTransfer" returntype="boolean">
					<PARAMETERS>
						<PARAMETER name="tkn" type="string" required="1"/>
					</PARAMETERS>
					<NOTES>
					Triggered before a form transfer.
					To inhibit the transfer return false, otherwise return true.
					</NOTES>
					<EXAMPLES>function FORM_OnBeforeTransfer(tkn)
{
	// only allow transfer to "CU01.1"
	return (tkn &amp;&amp; tkn.toUpperCase() == "CU01.1" ? true : false);
}
					</EXAMPLES>
				</EVENT>
			</OBJECT>
			<OBJECT name="Button" evtname="BUTTON">
				<EVENT name="OnClick" returntype="boolean">
					<PARAMETERS>
						<PARAMETER name="id" type="string" required="1" comment="an element id" />
						<PARAMETER name="row" type="string" required="0" comment="the current row if detail element, else -1" default="-1" />
					</PARAMETERS>
					<NOTES>
					Triggered when a button is clicked.
					To inhibit further button onclick logic (if you handle the action) return false, otherwise return true.
					</NOTES>
					<EXAMPLES>function BUTTON_OnClick(id,row)
{
	// if button is 'push1', be sure we have a company ('text2')
	if (id == "push1")
	{
		var compValue=lawForm.getFormValue("text2");
		if (compValue == "")
		{
			portalWnd.cmnDlg.messageBox("Please enter a company number","ok","alert",window);
			lawForm.positionInFieldById("text2");
			return false;
		}
	}
	return true;
}
					</EXAMPLES>
				</EVENT>
				<EVENT name="OnFocus" returntype="">
					<PARAMETERS>
						<PARAMETER name="id" type="string" required="1" comment="an element id" />
						<PARAMETER name="row" type="string" required="0" comment="the current row if detail element, else -1" default="-1"/>
					</PARAMETERS>
					<NOTES>
					Triggered when a button receives focus.
					This event cannot be cancelled and there is no return value.
					</NOTES>
					<EXAMPLES>function BUTTON_OnFocus(id,row)
{
	// if button 'push1' receives focus, be sure we have a company ('text2')
	if (id == "push1")
	{
		var compValue=lawForm.getFormValue("text2");
		if (compValue == "")
		{
			portalWnd.cmnDlg.messageBox("Please enter a company number","ok","alert",window);
			lawForm.positionInFieldById("text2");
		}
	}
}
					</EXAMPLES>
				</EVENT>
			</OBJECT>
			<OBJECT name="Checkbox" evtname="CHECK">
				<EVENT name="OnClick" returntype="">
					<PARAMETERS>
						<PARAMETER name="id" type="string" required="1" comment="an element id" />
						<PARAMETER name="row" type="string" required="0" comment="the current row if detail element, else -1" default="-1" />
					</PARAMETERS>
					<NOTES>
					Triggered when a checkbox is clicked.
					</NOTES>
					<EXAMPLES>function CHECK_OnClick(id, row)
{
}
					</EXAMPLES>
				</EVENT>
			</OBJECT>
			<OBJECT name="Image" evtname="IMAGE">
				<EVENT name="OnClick" returntype="">
					<PARAMETERS>
						<PARAMETER name="id" type="string" required="1" comment="an element id" />
						<PARAMETER name="row" type="string" required="0" comment="the current row if detail element, else -1" default="-1" />
					</PARAMETERS>
					<NOTES>
					Triggered when an image is clicked.
					</NOTES>
					<EXAMPLES>IMAGE_OnClick:
If you have an image ("image1") that is used to indicate a form 
state (such as summary/detail) that toggles when the user clicks the image,
you could script a "handler" for the image such as the following.

var bSummaryState = true;
function IMAGE_OnClick(id,row)
{
	if (id == "image1")
	{
		bSummaryState=!bSummaryState;
		var imgElem=lawForm.getFormElement(id);
		imgElem.src=(bSummaryState ? "summary.gif" : "detail.gif");
		if (bSummaryState)
		{
			// code to change form to reflect summary state
		}
		else
		{
			// code to change form to reflect detail state
		}
	}
}
					</EXAMPLES>
				</EVENT>
			</OBJECT>
			<OBJECT name="Listbox" evtname="VALUES">
				<EVENT name="OnBlur" returntype="boolean">
					<PARAMETERS>
						<PARAMETER name="id" type="string" required="1" comment="an element id" />
						<PARAMETER name="row" type="string" required="0" comment="the current row if detail element, else -1" default="-1" />
					</PARAMETERS>
					<NOTES>
					Triggered when a listbox loses focus.
					To inhibit the loss of focus return false, otherwise return true.
					</NOTES>
					<EXAMPLES>function VALUES_OnBlur(id, row)
{
	return true;
}
					</EXAMPLES>
				</EVENT>
				<EVENT name="OnFocus" returntype="boolean">
					<PARAMETERS>
						<PARAMETER name="id" type="string" required="1" comment="an element id" />
						<PARAMETER name="row" type="string" required="0" comment="the current row if detail element, else -1" default="-1" />
					</PARAMETERS>
					<NOTES>
					Triggered when a listbox gains focus.
					To inhibit the receiving of focus return false, otherwise return true.
					</NOTES>
					<EXAMPLES>function VALUES_OnFocus(id, row)
{
	return true;
}
					</EXAMPLES>
				</EVENT>
			</OBJECT>
			<OBJECT name="Radio Button" evtname="RADIO">
				<EVENT name="OnClick" returntype="">
					<PARAMETERS>
						<PARAMETER name="id" type="string" required="1" comment="an element id" />
						<PARAMETER name="row" type="string" required="0" comment="the current row if detail element, else -1" default="-1" />
					</PARAMETERS>
					<NOTES>
					Triggered when a radio button is clicked.
					</NOTES>
					<EXAMPLES>function RADIO_OnClick(id, row)
{
}
					</EXAMPLES>
				</EVENT>
			</OBJECT>
			<OBJECT name="Tab Region" evtname="TABREGION">
				<EVENT name="OnBeforeTabActivated" returntype="boolean">
					<PARAMETERS>
						<PARAMETER name="nbr" type="string" required="1" comment="tab nbr attribute, such as 'TF0-0'" />
					</PARAMETERS>
					<NOTES>
					Triggered before a tab page within a tab area is activated.
					To inhibit the button tab activation return false, otherwise return true.
					</NOTES>
					<EXAMPLES>function TABREGION_OnBeforeTabActivated(nbr)
{
	return true;
}
					</EXAMPLES>
				</EVENT>
				<EVENT name="OnAfterTabActivated" returntype="">
					<PARAMETERS>
						<PARAMETER name="nbr" type="string" required="1" comment="tab nbr attribute, such as 'TF0-0'" />
					</PARAMETERS>
					<NOTES>
					Triggered after a tab page within a tab area is activated.
					</NOTES>
					<EXAMPLES>function TABREGION_OnAfterTabActivated(nbr)
{
}
					</EXAMPLES>
				</EVENT>
			</OBJECT>
			<OBJECT name="Text" evtname="TEXT">
				<EVENT name="OnBlur" returntype="boolean">
					<PARAMETERS>
						<PARAMETER name="id" type="string" required="1" comment="an element id" />
						<PARAMETER name="row" type="string" required="0" comment="the current row if detail element, else -1" default="-1" />
					</PARAMETERS>
					<NOTES>
					Triggered when a textbox loses focus.
					To inhibit the loss of focus return false, otherwise return true.
					</NOTES>
					<EXAMPLES>function TEXT_OnBlur(id, row)
{
	return true;
}
					</EXAMPLES>
				</EVENT>
				<EVENT name="OnFocus" returntype="boolean">
					<PARAMETERS>
						<PARAMETER name="id" type="string" required="1" comment="an element id" />
						<PARAMETER name="row" type="string" required="0" comment="the current row if element id, else -1" default="-1" />
					</PARAMETERS>
					<NOTES>
					Triggered when a textbox gains focus.
					To inhibit the receiving of focus return false, otherwise return true.
					</NOTES>
					<EXAMPLES>function TEXT_OnFocus(id, row)
{
	return true;
}
					</EXAMPLES>
				</EVENT>
				<EVENT name="OnAfterDrillSelect" returntype="object">
					<PARAMETERS>
						<PARAMETER name="id" type="string" required="1" comment="an element id" />
						<PARAMETER name="keysNode" type="object" required="1" comment="the drill keys data object" />
						<PARAMETER name="row" type="string" required="0" comment="the current row if detail element, else -1" default="-1" />
					</PARAMETERS>
					<NOTES>
					Triggered after a Drill select operation has been performed and before the text value is set.
					To inhibit the processing of the select data return null, otherwise return the keysNode.
					</NOTES>
					<EXAMPLES>function TEXT_OnAfterDrillSelect(id, keysNode, row)
{
	// inspect and/or manipulate keysNode, then return it.
	return keysNode;
}
					</EXAMPLES>
				</EVENT>
				<EVENT name="OnDrillSelect" returntype="object">
					<PARAMETERS>
						<PARAMETER name="id" type="string" required="1" comment="an element id" />
						<PARAMETER name="IDAapi" type="string" required="1" comment="the IDA API string to be processed" />
						<PARAMETER name="row" type="string" required="0" comment="the current row if detail element, else -1" default="-1" />
					</PARAMETERS>
					<NOTES>
					Triggered before performing a Drill select.
					To inhibit the processing of the select select return null (or empty string),
					otherwise return the IDAapi string.
					</NOTES>
					<EXAMPLES>function TEXT_OnDrillSelect(id, IDAapi, row)
{
	// inspect and/or manipulate DrillAround API, then return it.
	return IDAapi;
}
					</EXAMPLES>
				</EVENT>
			</OBJECT>
			<OBJECT name="TextArea" evtname="TEXTAREA">
				<EVENT name="OnBlur" returntype="">
					<PARAMETERS>
						<PARAMETER name="id" type="string" required="1" comment="an element id" />
					</PARAMETERS>
					<NOTES>
					Triggered when a textarea loses focus.
					</NOTES>
					<EXAMPLES>function TEXTAREA_OnBlur(id)
{
}
					</EXAMPLES>
				</EVENT>
				<EVENT name="OnFocus" returntype="">
					<PARAMETERS>
						<PARAMETER name="id" type="string" required="1" comment="an element id" />
					</PARAMETERS>
					<NOTES>
					Triggered when a textarea gains focus.
					</NOTES>
					<EXAMPLES>function TEXTAREA_OnFocus(id)
{
}
					</EXAMPLES>
				</EVENT>
			</OBJECT>
		</CONSTRUCTOR>
		<!-- forms variables ===============================================-->
		<CONSTRUCTOR name="Form Variables">
			<VARIABLE name="formState" type="object/FormStateObj">
				<NOTES>
				This variable holds an instance of the FormStateObj object.
				</NOTES>
				<EXAMPLES>if (formState.agsError)
	lawForm.magic.processError();
else
	lawForm.positionInFirstField();
				</EXAMPLES>
			</VARIABLE>
			<VARIABLE name="lawForm" type="object/LawFormObj">
				<NOTES>
				This variable holds an instance of the LawFormObj object.
				</NOTES>
				<EXAMPLES>if (formState.agsError)
	lawForm.magic.processError();
else
	lawForm.positionInFirstField();
				</EXAMPLES>
			</VARIABLE>
			<VARIABLE name="oHelp" type="object/Wizard">
				<NOTES>
				This variable is not initialized until triggered by user action or from script.

				This variable holds an instance of the Wizard object used to display field help.
				</NOTES>
				<EXAMPLES>function showFieldHelp(id)
{
	var mElement=lawForm.getFormElement(id);
	oHelp=new Wizard(window, strPDL, strTKN);
	oHelp.showFieldHelp(mElement);
	lawForm.fldHelp=true;
}
				</EXAMPLES>
			</VARIABLE>
			<VARIABLE name="oWizard" type="object/Wizard">
				<NOTES>
				This variable is not initialized until triggered by user action or from script.

				This variable holds an instance of the Wizard object used to display the form Wizard.
				</NOTES>
				<EXAMPLES>function showWizard()
{
	oWizard=new Wizard(window, strPDL, strTKN);
	oWizard.showWizard();
}
				</EXAMPLES>
			</VARIABLE>
			<VARIABLE name="pageObj" type="object/PortalPage">
				<NOTES>
				This variable holds a reference to the PortalPage object if the current
				form is implemented or pushed open from a portal page formlet object.
				Otherwise, the variable is null.
				</NOTES>
				<EXAMPLES>var bPageIsMax=(pageObj ? pageObj.state.maximized : false);</EXAMPLES>
			</VARIABLE>
			<VARIABLE name="pageWnd" type="object/window">
				<NOTES>
				This variable holds a reference to the window which opened the current form
				or pushed form if the original URL indicated the application was hosted on a Portal
				Page.  The window may not actually be a Portal Page since indicating the form
				is hosted as a Portal Page when it is not is a method to 'spoof' the Portal 
				such that a different presentation of the application is rendered.
				</NOTES>
				<EXAMPLES>if (typeof(pageWnd.initializeFramework)=="function")
	pageWnd.initializeFramework();
				</EXAMPLES>
			</VARIABLE>
			<VARIABLE name="portalWnd" type="object/window">
				<NOTES>
				This variable has been initialized as a reference to the Lawson Portal main window.
				Use this variable instead of the top reference since the portal is not guarenteed to
				be running as the top-most window of the browser.
				</NOTES>
				<EXAMPLES>var msg=portalWnd.lawsonPortal.getPhrase("LBL_CANCEL");</EXAMPLES>
			</VARIABLE>
			<VARIABLE name="portalObj" type="object/LawPortalObj">
				<NOTES>
				This variable has been initialized as a reference to the global variable lawsonPortal,
				the single instance of the LawPortalObj object.  This is a convenience reference for ease
				of script writing.
				</NOTES>
				<EXAMPLES>var msg=portalObj.getPhrase("LBL_CANCEL");</EXAMPLES>
			</VARIABLE>
			<VARIABLE name="strFORMID" type="string">
				<NOTES>
				This variable holds the form id if form has been customized in Design Studio.
				</NOTES>
			</VARIABLE>
			<VARIABLE name="strHost" type="string">
				<NOTES>
				This variable indicates if the form is hosted in a portal page or as a standard form
				in the portal content window. If running in a portal page the value is "page" otherwise 
				the value is "portal".
				</NOTES>
			</VARIABLE>
			<VARIABLE name="strPDL" type="string">
				<NOTES>
				This variable holds the productline/data area as a string.
				</NOTES>
			</VARIABLE>
			<VARIABLE name="strTitle" type="string">
				<NOTES>
				This variable holds the form name as a string, for example, "Currency Code".
				</NOTES>
			</VARIABLE>
			<VARIABLE name="strTKN" type="string">
				<NOTES>
				This variable holds the token as a string, for example, "CU01.1".
				</NOTES>
			</VARIABLE>
			<VARIABLE name="tranMagic" type="object/Magic">
				<NOTES>
				This variable holds an instance of the Magic (transaction storage) object.

				Note: this is the same storage object as the lawForm.magic member variable.
				</NOTES>
				<EXAMPLES>var tabValue=tranMagic.getElement(nbr)
tabValue=tabValue.substr(tabValue.length-1)
if (tabValue != "1")
	tranMagic.setElement(nbr, "0")
				</EXAMPLES>
			</VARIABLE>
		</CONSTRUCTOR>
		<!-- form functions ================================================-->
		<CONSTRUCTOR name="Form Functions">
			<FUNCTION name="frmMakeIDAString" returntype="string">
				<PARAMETERS>
					<PARAMETER name="type" type="string" required="1" comment="2-character code: OS,SL,RL,etc." />
					<PARAMETER name="fld" type="string" required="1" comment="the data field number: i.e. _f21" />
					<PARAMETER name="knb" type="string" required="0" comment="field key numer: 2 or 3 characters" />
				</PARAMETERS>
				<NOTES>
				This function will construct a Drill Around string which can be passed to the drill engine. 

				Note: use of this function implies familiarity with the Lawson Drill Around engine.
				</NOTES>
				<EXAMPLES>// construct a IDA rule API call for field 'text1'
var mElement=lawForm.getFormElement("text1");
var value=lawForm.getFormValue("text1");
var knb=mElement.getAttribute("knb");
var RulesCall = frmMakeIDAString("RL", mElement.id);
RulesCall += "&amp;_KNB="+knb+"&amp;"+knb+"=" + value;

				</EXAMPLES>
			</FUNCTION>
			<FUNCTION name="lawformDoDefaultFC" returntype="">
				<PARAMETERS>
					<PARAMETER name="mElement" type="object/element" required="0" />
				</PARAMETERS>
				<NOTES>
				This function is used to trigger the default form action.  The default form action
				is set by selecting from the form actions dropdown list.
				</NOTES>
				<EXAMPLES>function BUTTON_OnClick(id,row)
{
	var bReturnVal=true;
	if (id == "btnSubmit")
	{
		lawformDoDefaultFC();
		bReturnVal=false;
	}
	return bReturnVal;
}
				</EXAMPLES>
			</FUNCTION>
			<FUNCTION name="lawformDoFunction" returntype="">
				<PARAMETERS>
					<PARAMETER name="fc" type="string" required="1" />
				</PARAMETERS>
				<NOTES>
				This function is used to trigger the specified form action.
				</NOTES>
				<EXAMPLES>function BUTTON_OnClick(id,row)
{
	var bReturnVal=true;
	if (id == "btnInquire")
	{
		lawformDoFunction("I");
		bReturnVal=false;
	}
	return bReturnVal;
}
				</EXAMPLES>
			</FUNCTION>
			<FUNCTION name="lawformDoTransfer" returntype="">
				<PARAMETERS>
					<PARAMETER name="token" type="string" required="1" />
				</PARAMETERS>
				<NOTES>
				This function is used to perform a form transfer to the specified token. The token
				can take the form of a Lawson application token or a URL.  The new contents will be
				rendered in the portal's main content window replacing the current form.

				If the token is a URL, this same action could be performed using the portal's 
				switchContents function.
				</NOTES>
				<EXAMPLES>function BUTTON_OnClick(id,row)
{
	var bReturnVal=true;
	if (id == "btnYahoo")
	{
		lawformDoTransfer("http://www.yahoo.com");
		bReturnVal=false;
	}
	return bReturnVal;
}
				</EXAMPLES>
			</FUNCTION>
			<FUNCTION name="lawformFormHelp" returntype="">
				<NOTES>
				This function will display form help.
				</NOTES>
				<EXAMPLES>function BUTTON_OnClick(id,row)
{
	var bReturnVal=true;
	if (id == "btnHelp")
	{
		lawformFormHelp();
		bReturnVal=false;
	}
	return bReturnVal;
}
				</EXAMPLES>
			</FUNCTION>
		</CONSTRUCTOR>
		<!-- form objects ==================================================-->
		<CONSTRUCTOR name="CRTIODataObj">
			<NOTES>
			This object is used for storing messages and data to be passed between related 
			forms. As such, this object is available is both the FORM_OnBeforeDataExchange 
			and the FORM_OnAfterDataExchange events.

			An instance of this object exists on the formState variable as the crtio member.
			</NOTES>
			<EXAMPLES>function FORM_OnBeforeDataExchange(oCRTIO)
{
	// inspect and/or manipulate CRTIO data, then return it
	return oCRTIO;
}
			</EXAMPLES>
			<PROPERTY name="customId" type="string" construct="">
				<NOTES>Id of custom form (if applicable to token requested).</NOTES>
			</PROPERTY>
			<PROPERTY name="Request" type="string" construct="">
				<NOTES>This member holds the type of processing requested, one of the following:</NOTES>
				<EXAMPLES>'EXECALLER'    : consume returned data and perform transaction.
'EXITWINDOW'   : window closed with no processing required.
'MANUALCFKEY'  : open or transfer to new token (Screen) with key values.
'RETURNKNS'    : returning key values, consume as form key values.
'RTNKNS_MANCF' : returning key values, open specified Screen form.</EXAMPLES>
			</PROPERTY>
			<PROPERTY name="Screen" type="string" construct="">
				<NOTES>Id of token (form) to open.</NOTES>
			</PROPERTY>
			<PROPERTY name="PassXlt" type="string" construct="">
				<NOTES>The form action code (fc) for transaction process.</NOTES>
			</PROPERTY>
			<PROPERTY name="DspXlt" type="string" construct="">
				<NOTES>The default form action code (fc) for transaction process.</NOTES>
			</PROPERTY>
			<PROPERTY name="Message" type="string" construct="">
				<NOTES>Message to display if appropriate to request.</NOTES>
			</PROPERTY>
			<METHOD name="setValue" returntype="boolean" construct="">
				<PARAMETERS>
					<PARAMETER name="propName" type="string" required="1"/>
					<PARAMETER name="value" type="string/object/boolean" required="1"/>
				</PARAMETERS>
				<NOTES>Stores a data value for the specified property name.</NOTES>
				<EXAMPLES>formState.crtio.setValue("Request", "EXITWINDOW");</EXAMPLES>
			</METHOD>
		</CONSTRUCTOR>
		<CONSTRUCTOR name="FormStateObj">
			<NOTES>
			This object holds the state of various elements on an application form.  In the case of
			a transfer or push request, the object is passed to the subsequent form accessed.

			An instance of this object exists on every form as formState.
			</NOTES>
			<EXAMPLES>// inhibit keyboard entry
formState.setValue("formReady", false);
			</EXAMPLES>
			<PROPERTY name="agsError" type="boolean" construct="">
				<NOTES>If true, indicates an error was returned by the last transaction request.</NOTES>
			</PROPERTY>
			<PROPERTY name="critio" type="CRTIODataObj" construct="">
				<NOTES>An instance of the CRTIODataObj object.</NOTES>
			</PROPERTY>
			<PROPERTY name="currentDetailArea" type="string" construct="">
				<NOTES>If the form contains 1 or more detail areas, holds the id of the detail area
				that has focus or is considered 'active'.</NOTES>
			</PROPERTY>
			<PROPERTY name="currentField" type="string" construct="">
				<NOTES>Holds the id of the form's active field or field with focus.</NOTES>
			</PROPERTY>
			<PROPERTY name="currentRow" type="integer" construct="">
				<NOTES>If the form contains a detail area, this property is the zero-based value for the
				currently selected row of the detail area.</NOTES>
			</PROPERTY>
			<PROPERTY name="currentTabPage" type="string" construct="">
				<NOTES>If the form contains 1 or more tabregions, holds the id of the tab page
				that has focus or is considered 'active'.</NOTES>
			</PROPERTY>
			<PROPERTY name="doDefine" type="boolean" construct="">
				<NOTES>If true, the form received a 'define' request, meaning transfer a form where
				data can be defined and then return to the current form.</NOTES>
			</PROPERTY>
			<PROPERTY name="doPush" type="boolean" construct="">
				<NOTES>If true, the form received a 'push' request, meaning open another related form
				to enter additional data and then return to the current form.</NOTES>
			</PROPERTY>
			<PROPERTY name="formReady" type="boolean" construct="">
				<NOTES>If false, keyboard entry against the current form is inhibited.</NOTES>
			</PROPERTY>
			<PROPERTY name="pushFromRow" type="boolean" construct="">
				<NOTES>If true, a push request came from a button in a detail row.</NOTES>
			</PROPERTY>
			<PROPERTY name="token" type="string" construct="">
				<NOTES>Identifies the token name for a define or push request.</NOTES>
			</PROPERTY>
			<METHOD name="setValue" returntype="boolean" construct="">
				<PARAMETERS>
					<PARAMETER name="propertyName" type="string" required="1"/>
					<PARAMETER name="value" type="string/object/boolean" required="1"/>
				</PARAMETERS>
				<NOTES>Use this method to assign a value to a property.</NOTES>
				<EXAMPLES>var mElement=lawForm.getFormElement("push1");
formState.setValue("doPush", true);
formState.setValue("currentField", mElement.id);
formState.setValue("pushFromRow", false);
				</EXAMPLES>
			</METHOD>
		</CONSTRUCTOR>
		<CONSTRUCTOR name="JobObject">
			<PARAMETERS>
					<PARAMETER name="jobName" type="string" required="1"/>
					<PARAMETER name="userName" type="string" required="1"/>
			</PARAMETERS>
			<NOTES>This object is available to submit or print reports.</NOTES>
			<EXAMPLES>var oJob=new JobObject("MyJob",portalWnd.oUserProfile.getAttribute("LawsonUserName"));
var oXML=oJob.submitJob();
			</EXAMPLES>
			<PROPERTY name="jobName" type="string" construct="">
				<NOTES>The job name.</NOTES>
			</PROPERTY>
			<PROPERTY name="userName" type="string" construct="">
				<NOTES>The user's Lawson user name: portalWnd.oUserProfile.getAttribute("LawsonUserName")</NOTES>
			</PROPERTY>
			<PROPERTY name="jobQueue" type="string" construct="">
				<NOTES>Optional value.  Default Queue used if not supplied.</NOTES>
			</PROPERTY>
			<PROPERTY name="startDate" type="string" construct="">
				<NOTES>Optional value.  Defaults to today's date if not supplied.</NOTES>
			</PROPERTY>
			<PROPERTY name="startTime" type="string" construct="">
				<NOTES>Optional value (unless startDate is supplied).  Defaults to immediately if not supplied.</NOTES>
			</PROPERTY>
			<PROPERTY name="token" type="string" construct="">
				<NOTES>Optional batch token name.</NOTES>
			</PROPERTY>
			<PROPERTY name="copies" type="integer" construct="">
				<NOTES>Number of copies for printReport method.  Must be in range of 1-99.</NOTES>
			</PROPERTY>
			<PROPERTY name="printFile" type="string" construct="">
				<NOTES>Name of PRT file for printReport method.</NOTES>
			</PROPERTY>
			<METHOD name="submitJob" returntype="object/DOMDocument" construct="">
				<NOTES>This method submits a job for processing.</NOTES>
				<EXAMPLES>var vJob=new JobObject("MyJob",
		portalWnd.oUserProfile.getAttribute("LawsonUserName"));
vJob.startDate=vDate;    // optional
vJob.startTime=vTime;    // optional, but required if date supplied (HHMM)
vJob.jobQueue=vQueue;

var jobXML=vJob.submitJob();
if (!jobXML || jobXML.status)
{
	portalWnd.cmnDlg.messageBox(portalObj.getPhrase("JOBRUN_ERROR1"),"ok","alert",window);
	return;
}
				</EXAMPLES>
			</METHOD>
			<METHOD name="printReport" returntype="object/DOMDocument" construct="">
				<NOTES>This method prints a report file.</NOTES>
				<EXAMPLES>var vJob=new JobObject("MyJob",
		portalWnd.oUserProfile.getAttribute("LawsonUserName"));
vJob.printFile=vPrtFile;  // name of PRT file
vJob.printer=vPrinter;
vJob.copies=vCopies;      // numeric (1-99)

var printXML=vJob.printReport();
if (!printXML || printXML.status)
{
	portalWnd.cmnDlg.messageBox(portalObj.getPhrase("PRINTERROR")."ok","alert",window);
	return;
}
				</EXAMPLES>
			</METHOD>
		</CONSTRUCTOR>
		<CONSTRUCTOR name="LawFormObj">
			<PARAMETERS>
				<PARAMETER name="window" type="window" required="1"/>
			</PARAMETERS>
			<NOTES>
			This object is the main interface for referencing screen and data elements on
			an application form.

			An instance of this object exists on every form as lawForm.
			</NOTES>
			<EXAMPLES>// retrieve the screen value for input 'text1'
var value=lawForm.getFormValue("text1");
			</EXAMPLES>
			<PROPERTY name="UIDocument" type="object/document" construct="">
				<NOTES>The HTML document object containing all the form elements.</NOTES>
			</PROPERTY>
			<PROPERTY name="window" type="object/window" construct="">
				<NOTES>The HTML window object containing the form HTML document object.</NOTES>
			</PROPERTY>
			<METHOD name="getDataValue" returntype="string" construct="">
				<PARAMETERS>
					<PARAMETER name="name" type="string" required="1"/>
					<PARAMETER name="row" type="string" required="0" default="-1"/>
				</PARAMETERS>
				<NOTES>Gets the current data value from transaction storage using the data field name.</NOTES>
				<EXAMPLES>var v=lawForm.getDataValue("LINE-FC",0);</EXAMPLES>
			</METHOD>
			<METHOD name="getDataValueById" returntype="string" construct="">
				<PARAMETERS>
					<PARAMETER name="id" type="string" required="1"/>
					<PARAMETER name="row" type="string" required="0" default="-1"/>
				</PARAMETERS>
				<NOTES>Gets the current data value from transaction storage using the field id.</NOTES>
				<EXAMPLES>var v=lawForm.getDataValueById("Fc1",0);</EXAMPLES>
			</METHOD>
			<METHOD name="setDataValue" returntype="boolean" construct="">
				<PARAMETERS>
					<PARAMETER name="name" type="string" required="1"/>
					<PARAMETER name="value" type="string" required="1"/>
					<PARAMETER name="row" type="string" required="0" default="-1"/>
				</PARAMETERS>
				<NOTES>Sets the current data value from transaction storage using the data field name.</NOTES>
				<EXAMPLES>lawForm.setDataValue("LINE-FC","D",0);</EXAMPLES>
			</METHOD>
			<METHOD name="setDataValueById" returntype="boolean" construct="">
				<PARAMETERS>
					<PARAMETER name="id" type="string" required="1"/>
					<PARAMETER name="value" type="string" required="1"/>
					<PARAMETER name="row" type="string" required="0" default="-1"/>
				</PARAMETERS>
				<NOTES>Sets the current data value from transaction storage using the field id.</NOTES>
				<EXAMPLES>lawForm.setDataValueById("Fc1","C",0);</EXAMPLES>
			</METHOD>
			<METHOD name="getElement" returntype="element" construct="">
				<PARAMETERS>
					<PARAMETER name="elemId" type="string" required="1"/>
					<PARAMETER name="row" type="string" required="0" default="-1"/>
				</PARAMETERS>
				<NOTES>Gets the form HTML element if the data field number is known.</NOTES>
				<EXAMPLES>var mElement=lawForm.getElement("_f4");</EXAMPLES>
			</METHOD>
			<METHOD name="getElementValue" returntype="string" construct="">
				<PARAMETERS>
					<PARAMETER name="elemId" type="string" required="1"/>
					<PARAMETER name="row" type="string" required="0" default="-1"/>
				</PARAMETERS>
				<NOTES>Gets the form HTML element value if the data field number is known.</NOTES>
				<EXAMPLES>var f4Value=lawForm.getElementValue("_f4");</EXAMPLES>
			</METHOD>
			<METHOD name="setElementValue" returntype="boolean" construct="">
				<PARAMETERS>
					<PARAMETER name="elemId" type="string" required="1"/>
					<PARAMETER name="newValue" type="string" required="1"/>
					<PARAMETER name="row" type="string" required="0" default="-1"/>
				</PARAMETERS>
				<NOTES>Sets the form HTML element value if the data field number is known.</NOTES>
				<EXAMPLES>lawForm.setElementValue("_f21r2","Some value",2);</EXAMPLES>
			</METHOD>
			<METHOD name="getFormElement" returntype="element" construct="">
				<PARAMETERS>
					<PARAMETER name="elemName" type="string" required="1"/>
					<PARAMETER name="row" type="string" required="0" default="-1"/>
				</PARAMETERS>
				<NOTES>Gets the form HTML element if the field id is known.</NOTES>
				<EXAMPLES>var mElement=lawForm.getFormElement("text2");</EXAMPLES>
			</METHOD>
			<METHOD name="getFormValue" returntype="string" construct="">
				<PARAMETERS>
					<PARAMETER name="id" type="string" required="1"/>
					<PARAMETER name="row" type="string" required="0" default="-1"/>
				</PARAMETERS>
				<NOTES>Gets the the form HTML element value if the field id is known.</NOTES>
				<EXAMPLES>var t2Value=lawForm.getFormValue("text2");</EXAMPLES>
			</METHOD>
			<METHOD name="setFormValue" returntype="boolean" construct="">
				<PARAMETERS>
					<PARAMETER name="id" type="string" required="1"/>
					<PARAMETER name="value" type="string" required="1"/>
					<PARAMETER name="row" type="string" required="0" default="-1"/>
				</PARAMETERS>
				<NOTES>Sets the the form HTML element value if the field id is known.</NOTES>
				<EXAMPLES>lawForm.setFormValue("Fc1","A",0);</EXAMPLES>
			</METHOD>
			<METHOD name="setMessage" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="msg" type="string" required="1"/>
				</PARAMETERS>
				<NOTES>Displays a message on the browser status bar.</NOTES>
				<EXAMPLES>lawForm.setMessage("Please enter a value.");
lawForm.positionInField("_f4");
				</EXAMPLES>
			</METHOD>
			<METHOD name="getMessage" returntype="string" construct="" >
				<NOTES>Retrieves the last message from the transaction storage.</NOTES>
				<EXAMPLES>var agsMsg=lawForm.getMessage();</EXAMPLES>
			</METHOD>
			<METHOD name="getMessageNbr" returntype="string" construct="" >
				<NOTES>Retrieves the last message number from the transaction storage.</NOTES>
				<EXAMPLES>var agsErrorNbr=lawForm.getMessageNbr();</EXAMPLES>
			</METHOD>
			<METHOD name="getPhrase" returntype="string" construct="">
				<PARAMETERS>
					<PARAMETER name="id" type="string" required="1"/>
					<PARAMETER name="type" type="string" required="0" default="portal"/>
				</PARAMETERS>
				<NOTES>Retrieves a phrase of the specified id from a phrase object.  If the type parameter
				is 'portal' or omitted the lawsonPortal phrase object is scanned, otherwise the forms
				phrase object (global variable erpPhrases) is scanned.</NOTES>
				<EXAMPLES>var msg=lawForm.getPhrase("ERR_MAGIC_INIT","form");

// the following is equivalent to the preceeding statement
var msg=portalWnd.erpPhrases.getPhrase("ERR_MAGIC_INIT");
				</EXAMPLES>
			</METHOD>
			<METHOD name="setActiveTab" returntype="boolean" construct="">
				<PARAMETERS>
					<PARAMETER name="tabNbr" type="string" required="1" comment="tab nbr attribute, such as 'TF0-0'" />
				</PARAMETERS>
				<NOTES>Activates the specified tab. This method assumes that the tab region for the
				spedified tab is visible and makes no attempt to activate a parent tab.</NOTES>
			</METHOD>
			<METHOD name="setTabState" returntype="boolean" construct="">
				<PARAMETERS>
					<PARAMETER name="tabNbr" type="string" required="1" comment="tab nbr attribute, such as 'TF0-0'" />
					<PARAMETER name="status" type="string" required="1" comment="0=inactive, 1=disabled, 2=active"/>
				</PARAMETERS>
				<NOTES>Sets the status of the specified tab.</NOTES>
			</METHOD>
			<METHOD name="positionInField" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="fld" type="string" required="1"/>
				</PARAMETERS>
				<NOTES>Positions the cursor and sets focus to the specified field.
				If this is called from FORM_OnInit or FORM_OnAfterDataInit, no positioning 
				will occur since the portal will be setting focus after these events occur 
				unless a window.setTimeout is scripted.</NOTES>
				<EXAMPLES>lawForm.positionInField("_f4");</EXAMPLES>
			</METHOD>
			<METHOD name="positionInFieldById" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="id" type="string" required="1"/>
					<PARAMETER name="row" type="string" required="0" default="-1"/>
				</PARAMETERS>
				<NOTES>Positions the cursor and sets focus to the field specified by the Id. 
				If this is called from FORM_OnInit or FORM_OnAfterDataInit, no positioning 
				will occur since the portal will be setting focus after these events occur 
				unless a window.setTimeout is scripted.</NOTES>
				<EXAMPLES>lawForm.positionInFieldById("text4");</EXAMPLES>
			</METHOD>
			<METHOD name="positionInFirstField" returntype="" construct="" >
				<PARAMETERS>
					<PARAMETER name="bForce" type="boolean" required="0"/>
				</PARAMETERS>
				<NOTES>Positions the cursor and sets focus to the first input element on the form.
				If this is called after a transaction that resulted in an error, no positioning will
				occur since magic will always position in the field in error.  To force the positioning,
				pass true in the bForce parameter.
				</NOTES>
				<EXAMPLES>lawForm.positionInFirstField();</EXAMPLES>
			</METHOD>
			<METHOD name="pushFormWindow" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="tkn" type="string" required="1" comment="token of application" />
					<PARAMETER name="pdl" type="string" required="0" comment="Productline,Data Area" default="current form PDL" />
					<PARAMETER name="hkey" type="string" required="0" comment="hidden key: used to pass keys for initial inquiry" />
					<PARAMETER name="id" type="string" required="0" comment="form id: unique id of a custom form for the token" />
				</PARAMETERS>
				<NOTES>Opens another application form on top of the current form without losing current 
				context. Can be useful to allow users to view and interact with data on another application 
				screen and then click a Close button to return to the original screen.
				</NOTES>
				<EXAMPLES>// push open custom CU01.1 and inquire on CAN currency code
lawForm.pushFormWindow("CU01.1",strPDL,"CAN","MyCustomCU01.1");</EXAMPLES>
			</METHOD>
			<METHOD name="showFieldInfo" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="fld" type="string" required="1"/>
				</PARAMETERS>
				<NOTES>Displays information about the specified field in the browser status bar.</NOTES>
				<EXAMPLES>lawForm.showFieldInfo("_f2");</EXAMPLES>
			</METHOD>
		</CONSTRUCTOR>
		<CONSTRUCTOR name="Magic">
			<PARAMETERS>
				<PARAMETER name="formWindow" type="window" required="1"/>
			</PARAMETERS>
			<NOTES>
			The transaction storage and processing object.

			An instance of this object exists on every form as tranMagic.  The lawForm variable
			also has an instance (the same instance) as member magic.
			</NOTES>
			<EXAMPLES>lawForm.magic.clearFormData();

same as:

tranMagic.clearFormData();
			</EXAMPLES>
			<PROPERTY name="evtType" type="String" construct="">
				<NOTES>Holds the transaction service _EVT paramater, ADD or CHG.</NOTES>
			</PROPERTY>
			<PROPERTY name="FC" type="String" construct="">
				<NOTES>Hold the last function code passed to the transact method.</NOTES>
			</PROPERTY>
			<PROPERTY name="initialized" type="boolean" construct="">
				<NOTES>Indicates if the data storage buffer has been initialized.</NOTES>
			</PROPERTY>
			<PROPERTY name="rtnType" type="String" construct="">
				<NOTES>Holds the transaction service _RTN paramater, ALL or SENT.</NOTES>
			</PROPERTY>
			<PROPERTY name="storage" type="object/DataStorage" construct="">
				<NOTES>Holds the transaction data.</NOTES>
			</PROPERTY>
			<METHOD name="getElement" returntype="string" construct="">
				<PARAMETERS>
					<PARAMETER name="fld" type="string" required="1"/>
					<PARAMETER name="row" type="string" required="0" default="-1"/>
				</PARAMETERS>
				<NOTES>Returns the data value for the specified field.

				Note: the preferred method of retrieving data is via the lawForm variable
				getDataValue and getDataValueById methods.  The getDataValue method takes
				the data field name as a parameter. But the getDataValueById may be easier
				than using an 'f-number' value is not as visible in the scripting
				environment.
				</NOTES>
				<EXAMPLES>var value=tranMagic.getElement("_f2");

preferred methods:

var value=lawForm.getDataValue("GL-COMPANY");
or
var value=lawForm.getDataValueById("text2");
				</EXAMPLES>
			</METHOD>
			<METHOD name="setElement" returntype="boolean" construct="">
				<PARAMETERS>
					<PARAMETER name="fld" type="string" required="1"/>
					<PARAMETER name="value" type="string" required="1"/>
					<PARAMETER name="row" type="string" required="0" default="-1"/>
				</PARAMETERS>
				<NOTES>Set the data value for the specified field.

				Note: the preferred method of setting data values is via the lawForm variable
				setDataValue and setDataValueById methods.  The setDataValue method takes
				the data field name as a parameter. But the setDataValueById may be easier
				than using an 'f-number' value is not as visible in the scripting
				environment.
				</NOTES>
				<EXAMPLES>tranMagic.setElement("_f2","4321");

preferred methods:

var value=lawForm.setDataValue("GL-COMPANY","4321");
or
var value=lawForm.setDataValueById("text2","4321");
				</EXAMPLES>
			</METHOD>
			<METHOD name="setFormData" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="fld" type="string" required="0" default="-1"/>
				</PARAMETERS>
				<NOTES>If the fld parameter is supplied, moves the data from the transaction 
				storage buffer to the associated form element. If no field is specified,
				moves all data to the form.</NOTES>
				<EXAMPLES>tranMagic.setFormData("_f2");      // updates the _f2 form element
or
tranMagic.setFormData();           // updates all the form elements
				</EXAMPLES>
			</METHOD>
			<METHOD name="clearFormData" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="fld" type="string" required="0" default="-1"/>
				</PARAMETERS>
				<NOTES>If the fld parameter is supplied, clears the form data begining
				with the specified field. If no field is specified, clears all the
				form data.</NOTES>
				<EXAMPLES>tranMagic.clearFormData("_f2");      // clears the form elements begining with _f2
or
tranMagic.clearFormData();           // clears all the form elements
				</EXAMPLES>
			</METHOD>
			<METHOD name="getUIData" returntype="" construct="">
				<NOTES>Retrieves all form data for Magic storage object.</NOTES>
				<EXAMPLES>tranMagic.getUIData();      // retrieves all form data</EXAMPLES>
			</METHOD>
			<METHOD name="setUIData" returntype="" construct="">
				<NOTES>Moves all the storage data to the form.

				Note: this is equivalent to calling tranMagic.setFormData();
				</NOTES>
				<EXAMPLES>tranMagic.setUIData();      // move all data to the screen
or
tranMagic.setFormData();    // move all data to the screen
				</EXAMPLES>
			</METHOD>
			<METHOD name="transact" returntype="boolean" construct="">
				<PARAMETERS>
					<PARAMETER name="fc" type="string" required="1"/>
					<PARAMETER name="bHasData" type="boolean" required="0" default="false"/>
				</PARAMETERS>
				<NOTES>Performs transaction of type specified by fc parameter. If bHasData
				is true (value is false if undefined), it is assumed all transaction data is already
				available in the storage object.

				Note: calling this method requires extensive knowledge of the Lawson object
				model and scripting management of the Magic instance.  It is more likely that
				the global form function, lawformDoFunction, will be useful for the purpose
				of scripting a tranaction against the current form.
				</NOTES>
				<EXAMPLES>tranMagic.getUIData();
tranMagic.transact("A");      // perform add transaction</EXAMPLES>
			</METHOD>
		</CONSTRUCTOR>
		<CONSTRUCTOR name="Wizard">
			<PARAMETERS>
				<PARAMETER name="window" type="window" required="1"/>
				<PARAMETER name="pdl" type="string" required="0" default="strPDL"/>
				<PARAMETER name="tkn" type="string" required="0" default="strTKN"/>
			</PARAMETERS>
			<NOTES>
			This object is used to display either a form Wizard or field help.
			</NOTES>
			<EXAMPLES>function FORM_OnInit()
{
	oWizard=new Wizard(window, strPDL, strTKN);
	oWizard.showWizard();
	return true;
}
			</EXAMPLES>
			<PROPERTY name="isVisible" type="boolean" construct="">
				<NOTES>
				Indicates if an active wizard is visible.
				</NOTES>
			</PROPERTY>
			<PROPERTY name="pdl" type="string" construct="">
				<NOTES>
				The Productline of an active form or field wizard.
				</NOTES>
			</PROPERTY>
			<PROPERTY name="tkn" type="string" construct="">
				<NOTES>
				The token name of an active form or field wizard.
				</NOTES>
			</PROPERTY>
			<PROPERTY name="formWindow" type="window" construct="">
				<NOTES>
				A reference to the window object displaying the active form.
				</NOTES>
			</PROPERTY>
			<METHOD name="showFieldHelp" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="element" type="object/element" required="1"/>
				</PARAMETERS>
				<EXAMPLES>function showFieldHelp(id)
{
	var mElement=lawForm.getFormElement(id);
	oHelp=new Wizard(window, strPDL, strTKN);
	oHelp.showFieldHelp(mElement);
	lawForm.fldHelp=true;
}
				</EXAMPLES>
			</METHOD>
			<METHOD name="showWizard" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="id" type="integer" required="0"/>
				</PARAMETERS>
				<EXAMPLES>function FORM_OnInit()
{
	oWizard=new Wizard(window, strPDL, strTKN);
	oWizard.showWizard();
}
				</EXAMPLES>
			</METHOD>
			<METHOD name="hide" returntype="" construct="">
				<EXAMPLES>function hideWizard()
{
	if (oWizard &amp;&amp; oWizard.isVisible)
		oWizard.hide();
	else if (oHelp &amp;&amp; oHelp.isVisible)
	{
		oHelp.hide();
		lawForm.fldHelp=false;
	}
}
				</EXAMPLES>
			</METHOD>
		</CONSTRUCTOR>
	</FORMS>
	<!-- portal page objects ===============================================-->
	<PAGES>
		<!-- portal page events ============================================-->
		<CONSTRUCTOR name="Portal Page Events">
			<OBJECT name="Page" evtname="portalpage">
				<EVENT name="OnInit" returntype="">
					<NOTES>This event is triggered after all elements in the portal page 
					are initialized but not yet drawn.

					The page has a parameters object that stores the name value pairs, 
					if any exist, in the location URL.

					You can consume the value pairs when the portal page initiates. In the 
					following example, the formlet key values in the URL are extracted and 
					set. If the formlet has Inquire set as Initial FC, then the key values 
					are populated and the Inquire will be performed.</NOTES>
					<EXAMPLES>function portalpage_OnInit()
{
    pStorage = new PortalStorage();
    pStorage.addElement("RQH-REQUESTER",page.parameters.RQH-REQUESTER);
    pStorage.addElement("RQH-REQ-NUMBER", page.parameters.RQH-REQUESTER);
    page.setobjectvalues("myrq10",pStorage)
}
					</EXAMPLES>
				</EVENT>
				<EVENT name="OnDatasrcUpdate" returntype="">
					<NOTES>When the portal page data source is updated, the page determines
					which elements are affected and sends a refresh notification to each of them.
					Upon completion, it handles the onDatasrcUpdate event.
					</NOTES>
					<EXAMPLES>function portalpage_OnDatasrcUpdate()
{
	var empName = page.getElementValue("EMPNAME");
	var objText = page.objects["TEXT0"];
	var strText = "Dependents for " + empName;
	objText.text = strText;
	objText.render();
	return;
}

					</EXAMPLES>
				</EVENT>
				<EVENT name="OnTerminate" returntype="">
					<NOTES>Triggered just before the portal page unloads.</NOTES>
				</EVENT>
			</OBJECT>
			<OBJECT name="Data Query" evtname="">
				<EVENT name="OnApplyFilter" returntype="">
					<NOTES>When filter values are applied, an internal refresh notification is
					sent. This event is triggered before sending the internal refresh notification.
					At this point the data query is already updated with the new key/condition
					values.</NOTES>
					<EXAMPLES>function data0_OnApplyFilter()
{
	var objDme = page.objects["data0"];
	var condName = "conditionName";
	if (objDme.keys[j].value == "AAA")
		objDme.cond += "COND="+ condName;
	return;
}
					</EXAMPLES>
				</EVENT>
				<EVENT name="OnClickButton" returntype="">
					<PARAMETERS>
						<PARAMETER name="dmeId" type="string" />
						<PARAMETER name="row" type="string" />
					</PARAMETERS>
					<NOTES>Triggered when a button that has been added to the beginning
					of a each row is clicked.</NOTES>
					<EXAMPLES>function data0_OnClickButton(dmeId, row)
{
	var objDme = page.objects[dmeId];
	var curRecord = objDme.objDmeResult.getElementsByTagName("RECORD")[row];
	var cols, x, strPoNo;
	if(curRecord)
	{
		// Get the column values
		cols = curRecord.getElementsByTagName("COL");
		// Get the company value
		for (x=0; x &lt; cols[0].childNodes.length; x++)
		{
			if(cols[0].childNodes[x].nodeType == 4)
			{
				strPoNo = cols[0].childNodes[x].nodeValue;
				break;
			}
		}
	}
	var agsCall = "/servlet/ags?_PDL=APPS803&amp;_TKN=PO20.1&amp;_LFN=ALL&amp;_RTN=DATA&amp;_TDS=IGNORE&amp;_OUT=XML
			+ &amp;_EVT=CHG&amp;FC=R&amp;_EOT=TRUE&amp;PCR-PO-NUMBER=" + strPoNo;
	var out = portal.httpRequest(agsCall);
	return;
}
					</EXAMPLES>
				</EVENT>
				<EVENT name="OnClickCheckbox" returntype="">
					<PARAMETERS>
						<PARAMETER name="dmeId" type="string" />
						<PARAMETER name="row" type="string" />
					</PARAMETERS>
					<NOTES>Triggered when a checkbox that has been added to the beginning
					of a each row is clicked.</NOTES>
					<EXAMPLES>var empSelected = new Array();
function data0_OnClickCheckBox(dmeId, row, state)
{
	var objDme = page.objects[dmeId];
	var curRecord = objDme.objDmeResult.getElementsByTagName("RECORD")[row];
	var cols, x, strEmpNo;
	if(curRecord)
	{
		// Get the column values
		cols = curRecord.getElementsByTagName("COL");
		// Get the company value
		for (x=0; x &lt; cols[0].childNodes.length; x++)
		{
			if(cols[0].childNodes[x].nodeType == 4)
			{
				strEmpNo = cols[0].childNodes[x].nodeValue;
				break;
			}
		}
	}
	//Build an array of employees to send a notification
	empSelected[strEmpNo] = state;
	return;
}
					</EXAMPLES>
				</EVENT>
				<EVENT name="OnDatasrcUpdate" returntype="">
					<NOTES>When a row is selected, the data in that row is packaged and
					sent to the portal page. Upon completion, this event is triggered.</NOTES>
					<EXAMPLES>function data0_OnDatasrcUpdate()
{
	var empName = page.getElementValue("EMPNAME");
	var objText = page.objects["TEXT0"];
	var strText = "Dependents for " + empName;
	objText.text = strText;
	objText.render();
	return;
}
					</EXAMPLES>
				</EVENT>
				<EVENT name="OnInit" returntype="">
					<NOTES>Triggered just after the portal page's OnInit, before the data query object is drawn.</NOTES>
					<EXAMPLES>var empDme;
function data0_OnInit()
{
	empDme = page.objects["data0"];
	return;
}
					</EXAMPLES>
				</EVENT>
				<EVENT name="OnLoadBegin" returntype="">
					<NOTES>Every time a data query object receives a refresh notification, 
					this event is triggered before preparing the API to be executed.
					</NOTES>
					<EXAMPLES>var strMyCondition = "CCC";
function data0_OnLoadBegin()
{
    var objDME = page.objects["data0"];
    if (strMyCondition == "AAA")
         objDME.criteria = "SELECT=EMPLOYEE^%3E4000";
    else if (strMyCondition == "BBB")
          objDME.criteria = "SELECT=EMPLOYEE^%3E5000";
    else if (strMyCondition == "CCC")
          objDME.criteria = "SELECT=EMPLOYEE^%3E6000";
}
					</EXAMPLES>
				</EVENT>
				<EVENT name="OnLoadComplete" returntype="">
					<NOTES>Triggered when a DME API is executed but the result is not yet drawn.</NOTES>
				</EVENT>
				<EVENT name="OnOpenDrill" returntype="">
					<PARAMETERS>
						<PARAMETER name="row" type="string" />
						<PARAMETER name="fldname" type="string" />
						<PARAMETER name="idacall" type="string" />
					</PARAMETERS>
					<NOTES>Triggered when the hyperlink to open a Drill Explorer window
					is clicked but before the drill is opened.</NOTES>
					<EXAMPLES>function data0_OnOpenDrill(row, fld, idacall)
{
	var objDme = page.objects["data0"];
	for (var i = 0; i &lt; objDme.numFields; i++)
	{
		if (objDme.fields[i].name == fld)
			break;
	}
	var curRecord = objDme.objDmeResult.getElementsByTagName("RECORD")[row];
	var cols, x, strFldVal;
	if(curRecord)
	{
		// Get the column values
		cols = curRecord.getElementsByTagName("COL");
		// Get the company value
		for (x=0; x &lt; cols[i].childNodes.length; x++)
		{
			if(cols[i].childNodes[x].nodeType == 4)
			{
				strFldVal = cols[i].childNodes[x].nodeValue;
				break;
			}
		}
	}
	idaCall = "/servlet/ida?_TYP=SL&amp;_OUT=XML&amp;_PDL=APPS803&amp;_SYS=HR&amp;_KNB=HH5&amp;_FN=DEPTCODE
		 + &amp;_IN=DPTSET1&amp;01=4321&amp;H03="+strFldVal;
	return idacall;
}
					</EXAMPLES>
				</EVENT>
				<EVENT name="OnOpenForm" returntype="">
					<PARAMETERS>
						<PARAMETER name="row" type="string" />
					</PARAMETERS>
					<NOTES>Triggered when the hyperlink to open a form is clicked but before
					the form is opened.

					The form HK (that is, hidden key field) can be constructed and set on the 
					DME object so the form opens up and inquires on the data relevant to the 
					current row of the data record.

					The HK field holds the concatenated string value of all keys necessary to 
					perform an inquire transaction.

					In the example below, the DME lists the employee table records. And to 
					open up HR11 with the relevant keys, the form HK is built taking the 
					company and employee column values. Set the "hk" property of the DME object.
					</NOTES>
					<EXAMPLES>function data0_OnOpenForm(row)
{
    var objDME = page.objects["data0"];
    var strHK, strCompany, strEmployee, curRecord, cols, x;
    if (objDME)
    {
        // Get the current record from the XML output
        curRecord = objDME.objDmeResult.getElementsByTagName("RECORD")[row];
        if (curRecord)
        {
            // Get the column values
            cols = curRecord.getElementsByTagName("COL");
            // Get the company value
            for (x=0; x &lt; cols[0].childNodes.length; x++)
            {
                if(cols[0].childNodes[x].nodeType == 4)
                {
                    strCompany = cols[0].childNodes[x].nodeValue;
                    break;
                }
            }
            // Get the Employee value
            for (x=0; x &lt; cols[1].childNodes.length; x++)
            {
                if(cols[1].childNodes[x].nodeType == 4)
                {
                    strEmployee = cols[1].childNodes[x].nodeValue;
                    break;
                }
            }
   
            // Build the HK ? Include leading blanks or leading zeros
            // if the length of company value is less than the length
            // specified in the database.
            strHK = strCompany + strEmployee;
            objDME.hk = strHK;
        }
    }
    return true;
}
					</EXAMPLES>
				</EVENT>
				<EVENT name="OnRowClick" returntype="">
					<NOTES>Triggered when the user clicks a row, even if the user clicks 
					the same row multiple times.</NOTES>
				</EVENT>
			</OBJECT>
			<OBJECT name="Image" evtname="">
				<EVENT name="OnClick" returntype="">
					<NOTES>Triggered when the user clicks within the boundaries of the Image object.</NOTES>
					<EXAMPLES>function image0_OnClick()
{
	var strUrl = "http://news.google.com";
	window.open(strUrl);
}
					</EXAMPLES>
				</EVENT>
				<EVENT name="OnInit" returntype="">
					<NOTES>Triggered after the portal page's OnInit and before the Image object is drawn.</NOTES>
					<EXAMPLES>var newsImg;
function image0_OnInit()
{
	newsImg = page.objects["image0"];
	return;
}
					</EXAMPLES>
				</EVENT>
			</OBJECT>
			<OBJECT name="Lawson Menu" evtname="">
				<EVENT name="OnBeforeTransfer" returntype="boolean">
					<PARAMETERS>
						<PARAMETER name="url" type="string" required="1" comment="specifies the URL of the resource" />
					</PARAMETERS>
					<NOTES>Triggered when one of the links in the list is clicked and before
					navigating to that document.
					To inhibit navigation return false, otherwise return true.
					</NOTES>
				</EVENT>
				<EVENT name="OnInit" returntype="">
					<NOTES>Triggered after the portal page's onInit and before the menu
					object (navlet) is drawn.</NOTES>
				</EVENT>
			</OBJECT>
			<OBJECT name="Local Transer Menu" evtname="">
				<EVENT name="OnBeforeTransfer" returntype="">
					<NOTES>Triggered when one of the links in the list is clicked and before
					navigating to that document.</NOTES>
				</EVENT>
				<EVENT name="OnInit" returntype="">
					<NOTES>Triggered after the portal page's onInit and before the menu
					object (navlet) is drawn.</NOTES>
				</EVENT>
			</OBJECT>
			<OBJECT name="Report" evtname="">
				<EVENT name="OnBeforeTransfer" returntype="boolean">
					<PARAMETERS>
						<PARAMETER name="action" type="string" required="1" comment="requested action" />
						<PARAMETER name="index" type="string" required="1" comment="index of requested job in reports array" />
					</PARAMETERS>
					<NOTES>Triggered when one of the job actions in the list is clicked 
					but before the action is performed.
					To inhibit the action return false, otherwise return true.
					</NOTES>
					<EXAMPLES>
function rpt0_OnBeforeTransaction(action, index)
{
	var objRpt = page.objects["rpt0"];
	var objJob = objRpt.reports[index];

	return (action.toLowerCase() == "delete" &amp;&amp; 
			objJob.name.toLowerCase() == "cu201dnd" ? false : true);
}
					</EXAMPLES>
				</EVENT>
				<EVENT name="OnInit" returntype="">
					<NOTES>Triggered after the portal page's OnInit and before the Report object is drawn.</NOTES>
				</EVENT>
			</OBJECT>
			<OBJECT name="RSS News" evtname="">
				<EVENT name="OnBeforeTransfer" returntype="boolean">
					<PARAMETERS>
						<PARAMETER name="link" type="string" required="1"/>
					</PARAMETERS>
					<NOTES>Triggered when one of the links in the list is clicked but before
					navigating to that document.

					To inhibit navigation return false, otherwise return true.
					</NOTES>
				</EVENT>
				<EVENT name="OnInit" returntype="">
					<NOTES>Triggered after the portal page's OnInit and before the RSS object is drawn.</NOTES>
				</EVENT>
			</OBJECT>
			<OBJECT name="Text" evtname="">
				<EVENT name="OnClick" returntype="">
					<NOTES>Triggered when the user clicks within the boundaries of the Text object.</NOTES>
					<EXAMPLES>Suppose you have a web page object that you want to switch
between summary and detail view, you can have a text object 
on the top to toggle between the two views.

var bSummaryState = true;
function text0_OnClick()
{
	var objHTM = page.objects["HTM0"];
	objHTM.URL = "http://myserver.com/view?" + 
			(bSummaryState ? "summary" : "detail");
	bSummaryState = !bSummaryState;
	objHTM.refresh();
}
					</EXAMPLES>
				</EVENT>
				<EVENT name="OnInit" returntype="">
					<NOTES>Triggered after the portal page's OnInit and before the Text object is drawn.</NOTES>
				</EVENT>
			</OBJECT>
			<OBJECT name="Transaction" evtname="">
				<EVENT name="OnAgsTableRender" returntype="">
					<NOTES>Triggered after the AGS table is rendered.

					Handled by the AGS table object only.
					</NOTES>
				</EVENT>
				<EVENT name="OnBeforeLoad" returntype="">
					<NOTES>When the AGS object receives a refresh notification, this event
					is triggered before the AGS call is built.

					Both the AGS graph and table object can handle this event.
					</NOTES>
				</EVENT>
				<EVENT name="OnInit" returntype="">
					<NOTES>Triggered after the portal page's OnInit, before the 
					transaction query object is drawn.</NOTES>
				</EVENT>
				<EVENT name="OnLoadComplete" returntype="">
					<NOTES>Triggered after a successful execution of an AGS call but before
					the results are drawn.

					Handled by the AGS table object only.
					</NOTES>
				</EVENT>
				<EVENT name="OnNext" returntype="">
					<NOTES>Triggered after the AGS table is rendered.

					Handled by the AGS table object only.
					</NOTES>
				</EVENT>
				<EVENT name="OnOpenDrill" returntype="string">
					<PARAMETERS>
						<PARAMETER name="fldName" type="string" />
					</PARAMETERS>
					<NOTES>Triggered when the hyperlink to open a Drill Explorer window	is clicked.

					Handled by the AGS table object only.
					</NOTES>
				</EVENT>
				<EVENT name="OnPrevious" returntype="">
					<NOTES>Triggered after the AGS table is rendered.

					Handled by the AGS table object only.
					</NOTES>
				</EVENT>
				<EVENT name="OnRowClick" returntype="">
					<NOTES>Triggered when a row is clicked in an AGS table.

					Handled by the AGS table object only.
					</NOTES>
				</EVENT>
				<EVENT name="OnSort" returntype="">
					<NOTES>Triggered when the hyperlink to sort on a column is clicked. If there is 
					no custom implementation, the default sort functionality is executed. The current 
					set of records is sorted by default.

					Handled by the AGS table object only.
					</NOTES>
				</EVENT>
			</OBJECT>
			<OBJECT name="User Defined Menu" evtname="">
				<EVENT name="OnBeforeTransfer" returntype="">
					<NOTES>Triggered when one of the links in the list clicked and before
					navigating to that document.</NOTES>
				</EVENT>
				<EVENT name="OnInit" returntype="">
					<NOTES>Triggered after the portal page's onInit and before the menu
					object (navlet) is drawn.</NOTES>
				</EVENT>
			</OBJECT>
			<OBJECT name="Web Page" evtname="">
				<EVENT name="OnInit" returntype="">
					<NOTES>Triggered after the portal page's OnInit and before the Page object 
					navigates to the specified URL.</NOTES>
					<EXAMPLES>function htm0_OnInit()
{
	var objHtm = page.objects["htm0"];
	var cur = portal.getUserVariable("CURRENCY");
	if (cur == "USD")
		objHtm.URL = "http://www.forex.com/dollarnews";
	else
		objHtm.URL = "http://www.forex.com/conversionchart?symbol="+cur;
	return;
}
					</EXAMPLES>
				</EVENT>
			</OBJECT>
		</CONSTRUCTOR>
		<!-- portal page variables =========================================-->
		<CONSTRUCTOR name="Portal Page Variables">
			<VARIABLE name="defaultURI" type="string">
				<NOTES>This variable holds the web server path to the portal page content folder, 
				typically '/lawson/portal/content/pages'.</NOTES>
			</VARIABLE>
			<VARIABLE name="page" type="object/PortalPage">
				<NOTES>This variable holds a reference to the PortalPage object.</NOTES>
				<EXAMPLES>var objDME = page.objects["data0"];</EXAMPLES>
			</VARIABLE>
			<VARIABLE name="pageURI" type="string">
				<NOTES>This variable holds the web server path to the portal page code, 
				typically '/lawson/portal/pages'.</NOTES>
			</VARIABLE>
			<VARIABLE name="portalObj" type="object/LawPortalObj">
				<NOTES>This variable holds a reference to the Lawson Portal (LawPortalObj) object.</NOTES>
			</VARIABLE>
			<VARIABLE name="portalWnd" type="object/window">
				<NOTES>This variable holds a reference to the Lawson Portal window object.</NOTES>
			</VARIABLE>
		</CONSTRUCTOR>
		<!-- portal page functions =========================================-->
		<CONSTRUCTOR name="Portal Page Functions">
			<FUNCTION name="initializeFramework" returntype="">
				<PARAMETERS/>
				<NOTES>
A portal page designer should implement this method to restore the Portal title, 
toolbar, left pane and help menu as required for the Portal Page. The Portal framework
will call this method when a formlet regains control of the Portal framework.

The Portal framework elements consist of the Portal Title, Portal Help Menu, Portal Toolbar, 
and Portal Left Pane. Formlet drillarounds and drill selects are examples of actions that 
will cause the Portal to take over the framework.
				</NOTES>
				<EXAMPLES>function initializeFramework()
{
	// reset the Portal title
	portalObj.setTitle("The page title");

	// reset the Portal help menu
	portalObj.helpOptions.clearItems();
	portalObj.helpOptions.addItem("My Page Help", "My Page Help", "MyHelp()", window);

	// reset the Portal toolbar
	with (portalObj.toolbar)
	{
		clear();
		target=window;
		createButton(portalObj.getPhrase("lblSubmit"),MySubmitMethod,"submit");
	}

	// reset the Portal left pane
	portalObj.tabArea.tabs["PAGE"].show();
	portalObj.tabArea.tabs["PAGE"].clearNavlets();
	// place required navlets on the leftbar
}
				</EXAMPLES>
			</FUNCTION>
			<FUNCTION name="loadCustomScript" returntype="">
				<PARAMETERS>
					<PARAMETER name="type" type="string" required="1" />
					<PARAMETER name="value" type="string" required="1" />
				</PARAMETERS>
				<NOTES>
				This function will load custom script to make it available for
				portal page processing. 

				The type parameter is either 'file' or 'text'. If file, the value parameter 
				must be the name of a file in the scripts content folder. If text, the 
				value parameter must be the script as a string.

				Note: if you develop custom script that you wish to use on mulitiple portal
				pages it is advisable to save the script to a file in the scripts content
				folder.  Then it is possible to add the script as an "include file" in the 
				portal page designer script view.
				</NOTES>
				<EXAMPLES>function portalpage_OnInit()
{
	// load my custom script
	loadCustomScript("file","my_script.js");
}
				</EXAMPLES>
			</FUNCTION>
			<FUNCTION name="stringToXMLObj" returntype="object/DOMDocument">
				<PARAMETERS>
					<PARAMETER name="strXML" type="string" required="1" />
				</PARAMETERS>
				<NOTES>
				This function will construct an XML object from the string parameter. 
				</NOTES>
				<EXAMPLES>// build an XML string and create DOM object
var sGraphXML = "&amp;lt;xmlgraph>\n";
	// additional string contruction logic
sGraphXml += "&amp;lt;/xmlgraph>\n';
sGraphXml = sGraphXml.replace(/&amp;/g, "&amp;amp;amp;");

var oGraphDOM = stringToXMLObj(sGraphXml);
				</EXAMPLES>
			</FUNCTION>
		</CONSTRUCTOR>
		<!-- portal page objects ===========================================-->
		<CONSTRUCTOR name="AGS">
			<PARAMETERS>
				<PARAMETER name="DOMNode" type="XMLDOM" required="1"/>
			</PARAMETERS>
			<PROPERTY name="id" type="String" construct="">
				<NOTES>Id of the transaction object</NOTES>
			</PROPERTY>
			<PROPERTY name="left" type="String" construct="">
				<NOTES>Sets or retrieves the position of the object relative to the left edge of 
				the portal page.</NOTES>
			</PROPERTY>
			<PROPERTY name="top" type="String" construct="">
				<NOTES>Sets or retrieves the position of the object relative to the top edge of
				the portal page.</NOTES>
			</PROPERTY>
			<PROPERTY name="width" type="String" construct="">
				<NOTES>Sets or retrieves the width of the object.</NOTES>
			</PROPERTY>
			<PROPERTY name="height" type="String" construct="">
				<NOTES>Sets or retrieves the height of the object.</NOTES>
			</PROPERTY>
			<PROPERTY name="border" type="boolean" construct="">
				<NOTES>Indicate if a border needs to be drawn around the object.</NOTES>
			</PROPERTY>
			<PROPERTY name="title" type="String" construct="">
				<NOTES>Sets or retrieves the title of the object</NOTES>
			</PROPERTY>
			<PROPERTY name="scroll" type="boolean" construct="">
				<NOTES>Indicate how to handle the overflow content.</NOTES>
			</PROPERTY>
			<PROPERTY name="zIndex" type="String" construct="">
				<NOTES>Sets or retrieves the stacking order of positioned objects.</NOTES>
			</PROPERTY>
			<PROPERTY name="autoHide" type="boolean" construct="">
				<NOTES>Indicate if the object may be rendered at the time of loading the portal page. 
				If autoHide is turned on, the object will not be rendered until the key 
				information is available.</NOTES>
			</PROPERTY>
			<PROPERTY name="navigateOption" type="String" construct="">
				<NOTES>Indicate how to open the resource pointed by links in the object.
				The resource may be opened in a new window or may replace the portal page.
				Or a special URL may be set in the portal page's data source.</NOTES>
			</PROPERTY>
			<PROPERTY name="pdl" type="String" construct="">
				<NOTES>Sets or retrieves the data area of the object.</NOTES>
			</PROPERTY>
			<PROPERTY name="tkn" type="String" construct="">
				<NOTES>Sets or retrieves the token of the object</NOTES>
			</PROPERTY>
			<PROPERTY name="xsl" type="String" construct="">
				<NOTES>Choose how to render the transaction object. The data may be rendered in 
				a table or may be depicted as a graph.</NOTES>
			</PROPERTY>
			<PROPERTY name="fields" type="Array" construct="">
				<NOTES>An array of input fields required as key values in an AGS call</NOTES>
			</PROPERTY>
			<PROPERTY name="charttitle" type="String" construct="">
				<NOTES>Title of the graph.</NOTES>
			</PROPERTY>
			<PROPERTY name="cattitle" type="String" construct="">
				<NOTES>Title of category axis in a graph.</NOTES>
			</PROPERTY>
			<PROPERTY name="valtitle" type="String" construct="">
				<NOTES>Title of the value axis in a graph.</NOTES>
			</PROPERTY>
			<PROPERTY name="graphparams" type="Array" construct="">
				<NOTES>An array of fields that lists properties associated with fields displayed
				in a graph.</NOTES>
			</PROPERTY>
			<PROPERTY name="maxrows" type="String" construct="">
				<NOTES>Maximum rows in a table.</NOTES>
			</PROPERTY>
			<PROPERTY name="fc" type="String" construct="">
				<NOTES>Function code to execute in an AGS call.</NOTES>
			</PROPERTY>
			<PROPERTY name="nonstdda" type="Boolean" construct="">
				<NOTES>Indicate if the index of the fields in a detail area deviates from the 
				way the index are specified in a standard detail area.</NOTES>
			</PROPERTY>
			<PROPERTY name="paging" type="Boolean" construct="">
				<NOTES>Indicate if paging is enabled in a table</NOTES>
			</PROPERTY>
			<PROPERTY name="tblFields" type="Array" construct="">
				<NOTES>An array of fields that lists properties associated with fields displayed
				in a table.</NOTES>
			</PROPERTY>
			<METHOD name="refresh" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="pStorage" type="PortalStorage" required="0"/>
				</PARAMETERS>
				<NOTES>Render a transaction object. If the object exists, then just update the data 
				associated. pStorage is the data source object that has the key information to execute 
				the request and render data.</NOTES>
				<EXAMPLES>var objAgs = page.objects["ags0"];
objAgs.refresh(page.dataSource);
				</EXAMPLES>
			</METHOD>
			<METHOD name="setzIndex" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="zIndex" type="string" required="1"/>
				</PARAMETERS>
				<NOTES>Sets the stacking order of positioned objects.</NOTES>
				<EXAMPLES>var objAgs = page.objects["ags0"];
objAgs.setzIndex("99");
				</EXAMPLES>
			</METHOD>
			<NOTES>
				Transaction object executes an AGS call and the result may either be rendered
				in a table or as a graph.
			</NOTES>
			<EXAMPLES/>
		</CONSTRUCTOR>
		<CONSTRUCTOR name="Composite">
			<PARAMETERS>
				<PARAMETER name="DOMNode" type="DOM Node" required="1"/>
			</PARAMETERS>
			<PROPERTY name="id" type="String" construct="">
				<NOTES>Id of the composite object</NOTES>
			</PROPERTY>
			<PROPERTY name="left" type="String" construct="">
				<NOTES>Sets or retrieves the position of the object relative to the left edge of 
				the portal page.</NOTES>
			</PROPERTY>
			<PROPERTY name="top" type="String" construct="">
				<NOTES>Sets or retrieves the position of the object relative to the top edge of
				the portal page.</NOTES>
			</PROPERTY>
			<PROPERTY name="width" type="String" construct="">
				<NOTES>Sets or retrieves the width of the object.</NOTES>
			</PROPERTY>
			<PROPERTY name="height" type="String" construct="">
				<NOTES>Sets or retrieves the height of the object.</NOTES>
			</PROPERTY>
			<PROPERTY name="border" type="boolean" construct="">
				<NOTES>Indicate if a border needs to be drawn around the object.</NOTES>
			</PROPERTY>
			<PROPERTY name="title" type="String" construct="">
				<NOTES>Sets or retrieves the title of the object</NOTES>
			</PROPERTY>
			<PROPERTY name="scroll" type="boolean" construct="">
				<NOTES>Indicate how to handle the overflow content.</NOTES>
			</PROPERTY>
			<PROPERTY name="zIndex" type="String" construct="">
				<NOTES>Sets or retrieves the stacking order of positioned objects.</NOTES>
			</PROPERTY>
			<PROPERTY name="autoHide" type="boolean" construct="">
				<NOTES>Indicate if the object may be rendered at the time of loading the portal page. 
				If autoHide is turned on, the object will not be rendered until the key 
				information is available.</NOTES>
			</PROPERTY>
			<PROPERTY name="src" type="String" construct="">
				<NOTES>Sets or retrieves the name of the portal page that is rendered as a composite.</NOTES>
			</PROPERTY>
			<METHOD name="refresh" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="pStorage" type="PortalStorage" required="0"/>
				</PARAMETERS>
				<NOTES>Render a composite object. If the object exists, then just update the data 
				associated. pStorage is the data source object that has the key information to execute 
				the request and render data.</NOTES>
				<EXAMPLES>var objComp = page.objects["composite0"];
objComp.refresh(page.dataSource);
				</EXAMPLES>
			</METHOD>
			<METHOD name="setzIndex" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="zIndex" type="string" required="1"/>
				</PARAMETERS>
				<NOTES>Sets the stacking order of positioned objects.</NOTES>
				<EXAMPLES>var objComp = page.objects["composite0"];
objComp.setzIndex("99");
				</EXAMPLES>
			</METHOD>
			<NOTES/>
			<EXAMPLES/>
		</CONSTRUCTOR>
		<CONSTRUCTOR name="DME">
			<PARAMETERS>
				<PARAMETER name="nodeDme" type="DOM" required="1"/>
			</PARAMETERS>
			<PROPERTY name="id" type="String" construct="">
				<NOTES>Id of the Data object.</NOTES>
			</PROPERTY>
			<PROPERTY name="left" type="String" construct="">
				<NOTES>Sets or retrieves the position of the object relative to the left edge of 
				the portal page.</NOTES>
			</PROPERTY>
			<PROPERTY name="top" type="String" construct="">
				<NOTES>Sets or retrieves the position of the object relative to the top edge of 
				the portal page.</NOTES>
			</PROPERTY>
			<PROPERTY name="width" type="String" construct="">
				<NOTES>Sets or retrieves the width of the object.</NOTES>
			</PROPERTY>
			<PROPERTY name="height" type="String" construct="">
				<NOTES>Sets or retrieves the height of the object.</NOTES>
			</PROPERTY>
			<PROPERTY name="border" type="boolean" construct="">
				<NOTES>Indicate if a border needs to be drawn around the object.</NOTES>
			</PROPERTY>
			<PROPERTY name="title" type="String" construct="">
				<NOTES>Sets or retrieves the title of the object</NOTES>
			</PROPERTY>
			<PROPERTY name="scroll" type="String" construct="">
				<NOTES>Indicate how to handle the overflow content.</NOTES>
			</PROPERTY>
			<PROPERTY name="zIndex" type="String" construct="">
				<NOTES>Sets or retrieves the stacking order of positioned objects.</NOTES>
			</PROPERTY>
			<PROPERTY name="prod" type="String" construct="">
				<NOTES>Sets or retrieves the productline of the DME call.</NOTES>
			</PROPERTY>
			<PROPERTY name="file" type="String" construct="">
				<NOTES>Sets or retrieves the database file of the DME call.</NOTES>
			</PROPERTY>
			<PROPERTY name="fieldProps.font" type="string" construct="">
				<NOTES>Sets or retrieves the font used to display the fields in a table.</NOTES>
			</PROPERTY>
			<PROPERTY name="fieldProps.size" type="string" construct="">
				<NOTES>Sets or retrieves the font size used to display the fields in a table.</NOTES>
			</PROPERTY>
			<PROPERTY name="fieldProps.color" type="string" construct="">
				<NOTES>Sets or retrieves the color used to display the fields in a table.</NOTES>
			</PROPERTY>
			<PROPERTY name="fieldProps.addtorow" type="string" construct="">
				<NOTES>Indicate if a button or checkbox or both has to be added to each row in a table</NOTES>
			</PROPERTY>
			<PROPERTY name="fieldProps.btnlabel" type="string" construct="">
				<NOTES>Sets or retrieves the caption for the column that displays button. This is applicable 
				only if a button is added to each row in a table</NOTES>
			</PROPERTY>
			<PROPERTY name="fieldProps.btnvalue" type="string" construct="">
				<NOTES>Sets or retrieves the button text. This is applicable only if a button is added
				to each row in a table</NOTES>
			</PROPERTY>
			<PROPERTY name="fields" type="Array" construct="">
				<NOTES>This is an array of dmeField objects that captures the properties of a field
				chosen in a DME call.</NOTES>
			</PROPERTY>
			<PROPERTY name="index" type="String" construct="">
				<NOTES>Sets or retrieves the name of the index used in the DME call.</NOTES>
			</PROPERTY>
			<PROPERTY name="keys" type="Array" construct="">
				<NOTES>This is an array of dmeKey objects that captures the properties of keys
				in the selected index of a DME call.</NOTES>
			</PROPERTY>
			<PROPERTY name="maxrecs" type="String" construct="">
				<NOTES>Sets or retrieves the maximum number of records in a DME call.</NOTES>
			</PROPERTY>
			<PROPERTY name="pageSize" type="integer" construct="">
				<NOTES>Sets or retrieves the number of records to be displayed in a table.</NOTES>
			</PROPERTY>
			<PROPERTY name="filter" type="boolean" construct="">
				<NOTES>Indicate if a filter navlet has to be added in the page tab on the leftbar. It is possible
				to change the key values or conditions applied on a dme call using the filter navlet.</NOTES>
			</PROPERTY>
			<PROPERTY name="filtertitle" type="String" construct="">
				<NOTES>Sets or retrieves the title of the filter navlet.</NOTES>
			</PROPERTY>
			<PROPERTY name="link" type="String" construct="">
				<NOTES>Sets or retrieves the type of the hyperlinks the table fields display. From a data table
				either a form or a drill explorer window may be opened up.</NOTES>
			</PROPERTY>
			<PROPERTY name="tooltip" type="String" construct="">
				<NOTES>Sets or retrieves the tooltip to be displayed when the mouse hovers over the hyperlinks.</NOTES>
			</PROPERTY>
			<PROPERTY name="tkn" type="String" construct="">
				<NOTES>Sets or retrieves the token of the form to be opened up when the hyperlink on a column
				is clicked.</NOTES>
			</PROPERTY>
			<PROPERTY name="cond" type="String" construct="">
				<NOTES>Sets or retrieves the string of condition(s) to be applied to the DME call.</NOTES>
			</PROPERTY>
			<PROPERTY name="criteria" type="String" construct="">
				<NOTES>Sets or retrieves the criteria to be applied to the DME call.</NOTES>
			</PROPERTY>
			<PROPERTY name="sort" type="String" construct="">
				<NOTES>Indicate the sort order. The table columns may be sorted either in ascending or in
				descending order.</NOTES>
			</PROPERTY>
			<PROPERTY name="begin" type="String" construct="">
				<NOTES>Sets or retrieves a key string that instructs DME to fetch data before or after 
				the specified value. This is usually used in conjunction with paging.</NOTES>
			</PROPERTY>
			<PROPERTY name="autoHide" type="boolean" construct="">
				<NOTES>Indicate if the object may be rendered at the time of loading the portal page. 
				If autoHide is turned on, the object will not be rendered until the key 
				information is available.</NOTES>
			</PROPERTY>
			<PROPERTY name="hide" type="boolean" construct="">
				<NOTES>Indicate if the Data object is hidden or visible in a portal page</NOTES>
			</PROPERTY>
			<PROPERTY name="navigateOption" type="String" construct="">
				<NOTES>Indicate how to open the resource pointed by links in the object.
				The resource may be opened in a new window or may replace the portal page.
				Or a special URL may be set in the portal page's data source.</NOTES>
			</PROPERTY>
			<PROPERTY name="objDmeResult" type="DOM" construct="">
				<NOTES>objDmeResult stores the response XML DOM object of a DME call.</NOTES>
			</PROPERTY>
			<PROPERTY name="currentRow" type="Integer" construct="">
				<NOTES>Retrieves the current row in the data object. User click action on a row
				changes the current row value.</NOTES>
			</PROPERTY>
			<PROPERTY name="forceRefresh" type="boolean" construct="">
				<NOTES>The portal page sends refresh notification to data object when the data
				source changes. The data object proceeds with a refresh only if the key values
				are different when compared to the current DME call. If forceRefresh is turned on
				the data object refreshes itself everytime it receives a refresh notification.</NOTES>
			</PROPERTY>
			<PROPERTY name="cancelUpdate" type="boolean" construct="">
				<NOTES>If cancelUpdate is turned on, the portal page data source will not be
				updated as a result of the user clicking on a row of a table.</NOTES>
			</PROPERTY>
			<METHOD name="refresh" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="pStorage" type="PortalStorage" required="0"/>
				</PARAMETERS>
				<NOTES>Render a data object. If the object exists, then just update the data 
				associated. pStorage is the data source object that has the key information to execute 
				the request and render data.</NOTES>
				<EXAMPLES>var objDme = page.objects["data0"];
objDme.refresh(page.dataSource);
				</EXAMPLES>
			</METHOD>
			<METHOD name="setzIndex" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="zIndex" type="string" required="1"/>
				</PARAMETERS>
				<NOTES>Sets the stacking order of positioned objects.</NOTES>
				<EXAMPLES>var objDme = page.objects["data0"];
objDme.setzIndex("99");
				</EXAMPLES>
			</METHOD>
			<METHOD name="dmePrevNext" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="strBegin" type="string" required="1"/>
				</PARAMETERS>
				<NOTES>dmePrevNext to set a new page of data. Specify the strBegin parameter that
				has the key information to fetch the next or previous set of rows.</NOTES>
				<EXAMPLES>//To retrieve the next page of records
var strBegin = "BEGIN=4321=1025&amp;"
objDme.dmePrevNext(strBegin);

//To retrieve the previous page of records
var strBegin = "BEGIN=4321=1025&amp;PREV&amp;"
objDme.dmePrevNext(strBegin);

				</EXAMPLES>
			</METHOD>
			<METHOD name="dmeSort" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="strSort" type="string" required="1"/>
				</PARAMETERS>
				<NOTES>dmeSort sorts the record set on a column.</NOTES>
				<EXAMPLES>
var strSort = "SORTASC="+"EMPLOYEE";
objDme.dmeSort(strSort);
				</EXAMPLES>
			</METHOD>
			<METHOD name="getValue" returntype="string" construct="">
				<PARAMETERS>
					<PARAMETER name="fieldName" type="string" required="1"/>
					<PARAMETER name="row" type="number" required="0"/>
				</PARAMETERS>
				<NOTES>getValue returns the value of a field for a given row. The current row is used if a row argument is not passed.  Null is returned if the field is not found.</NOTES>
				<EXAMPLES>
var oDME = page.objects["data0"];
var fieldName = "LAST-NAME";
var row = oDME.currentRow;
var strLastName = oDME.getValue(fieldName, row);
				</EXAMPLES>
			</METHOD>
			<METHOD name="setValue" returntype="boolean" construct="">
				<PARAMETERS>
					<PARAMETER name="fieldName" type="string" required="1"/>
					<PARAMETER name="row" type="number" required="1"/>
					<PARAMETER name="value" type="number" required="1"/>
				</PARAMETERS>
				<NOTES>setValue sets the value of a field for a given row. True is returned if successful and false is returned if not successful</NOTES>
				<EXAMPLES>
var oDME = page.objects["data0"];
var fieldName = "LAST-NAME";
var row = oDME.currentRow;
var newValue = "Lawson";
oDME.setValue(fieldName, row, newValue);
				</EXAMPLES>
			</METHOD>
			<METHOD name="getRowRecordKeys" returntype="array" construct="">
				<PARAMETERS>
					<PARAMETER name="row" type="number" required="0"/>
				</PARAMETERS>
				<NOTES>getRowRecordKeys returns an array containing a field object for each key field for a given row. The current row is used if a row argument is not passed.  A field object has the properties name (field name), type (field data type), size (the maximum length), and value (field value).</NOTES>
				<EXAMPLES>
var oDME = page.objects["data0"];
var row = oDME.currentRow;
var recordAry = oDME.getRowRecordKeys(row);
var oField = recordAry[0];
var keyFieldName = oField.name;
var keyFieldType = oField.type;
var keyFieldSize = oField.size;
var keyFieldValue = oField.value;
				</EXAMPLES>
			</METHOD>

			<METHOD name="getRowDrillKeys" returntype="string" construct="">
				<PARAMETERS>
					<PARAMETER name="row" type="number" required="0"/>
				</PARAMETERS>
				<NOTES>getRowDrillKeys returns the DME drill keys for a given row. The current row is used if a row argument is not passed.  Null is returned if the drill keys is not found.</NOTES>
				<EXAMPLES>
var oDME = page.objects["data0"];
var row = oDME.currentRow;
var strIdaCall = oDME.getRowDrillKeys(row);
				</EXAMPLES>
			</METHOD>
			<METHOD name="getButtonValue" returntype="string" construct="">
				<PARAMETERS>
					<PARAMETER name="row" type="number" required="0"/>
				</PARAMETERS>
				<NOTES>getButtonValue returns the value of a button for a given row. The current row is used if a row argument is not passed.  Null is returned if the button is not found.</NOTES>
				<EXAMPLES>
var oDME = page.objects["data0"];
var row = oDME.currentRow;
var strBtnValue = oDME.getButtonValue(row);
				</EXAMPLES>
			</METHOD>
			<METHOD name="setButtonValue" returntype="boolean" construct="">
				<PARAMETERS>
					<PARAMETER name="value" type="string" required="1"/>
					<PARAMETER name="row" type="number" required="0"/>
				</PARAMETERS>
				<NOTES>setButtonValue set the value of a button for a given row. The current row is used if a row argument is not passed.  Null is returned if the button is not found.</NOTES>
				<EXAMPLES>
var oDME = page.objects["data0"];
var newValue = "Lawson";
var row = oDME.currentRow;
oDME.setButtonValue(newValue, row);
				</EXAMPLES>
			</METHOD>
			<METHOD name="disableButton" returntype="boolean" construct="">
				<PARAMETERS>
					<PARAMETER name="disable" type="boolean" required="1"/>
					<PARAMETER name="row" type="number" required="0"/>
				</PARAMETERS>
				<NOTES>disableButton disables or enables a button for a given row. The current row is used if a row argument is not passed.  Null is returned if the button is not found. True is returned if successful and false is returned if not successful.</NOTES>
				<EXAMPLES>
var oDME = page.objects["data0"];
var row = oDME.currentRow;
oDME.disableButton(true,row);
				</EXAMPLES>
			</METHOD>
			<METHOD name="isButtonDisabled" returntype="boolean" construct="">
				<PARAMETERS>
					<PARAMETER name="row" type="number" required="0"/>
				</PARAMETERS>
				<NOTES>isButtonDisabled returns the button disable state for a given row. The current row is used if a row argument is not passed.  Null is returned if the button is not found. </NOTES>
				<EXAMPLES>
var oDME = page.objects["data0"];
var row = oDME.currentRow;
var bDisabled = oDME.isButtonDisabled(row);
				</EXAMPLES>
			</METHOD>
			<METHOD name="isRowChecked" returntype="boolean" construct="">
				<PARAMETERS>
					<PARAMETER name="row" type="number" required="0"/>
				</PARAMETERS>
				<NOTES>isRowChecked returns the checkbox checked state for a given row. The current row is used if a row argument is not passed.  Null is returned if the checkbox is not found. </NOTES>
				<EXAMPLES>
var oDME = page.objects["data0"];
var row = oDME.currentRow;
var bChecked = oDME.isRowChecked(row);
				</EXAMPLES>
			</METHOD>
			<METHOD name="getCheckedRows" returntype="array" construct="">
				<PARAMETERS>
				</PARAMETERS>
				<NOTES>getCheckedRows returns an array containing the row number of each checked row.</NOTES>
				<EXAMPLES>
var oDME = page.objects["data0"];
var checkRowsAry = oDME.getCheckedRows();
var row = checkRowsAry[0];

				</EXAMPLES>
			</METHOD>
			<METHOD name="getRowRecord" returntype="array" construct="">
				<PARAMETERS>
					<PARAMETER name="row" type="number" required="0"/>
				</PARAMETERS>
				<NOTES>getRowRecord returns an array containing a field object for each field. A field object has the properties name (field name) and value (field value). The current row is used if a row argument is not passed.</NOTES>
				<EXAMPLES>
var oDME = page.objects["data0"];
var rowRecordAry = oDME.getRowRecord();
var oField = rowRecordAry[0];
var fieldName = oField.name;
var fieldValue = oField.value;
				</EXAMPLES>
			</METHOD>
			<METHOD name="showFilter" returntype="boolean" construct="">
				<PARAMETERS>
					<PARAMETER name="show" type="boolean" required="0"/>
				</PARAMETERS>
				<NOTES>Passing true or no argument will show the DME filter navlet and passing false will hide the DME filter navlet. The method returns true if successful. The DME filter navlet will automatically show it's filter when it has focus, use this method to show the DME filter after the DME object is loaded.</NOTES>
				<EXAMPLES>
var oDME = page.objects["data0"];
oDME.showFilter(true);
				</EXAMPLES>
			</METHOD>
			<NOTES>
				The data object renders the output of a DME Call either as a graph or a table.
				Use the data object property page to set the properties of fields chosen to be 
				displayed, index key values, conditions and criteria string to be applied to a 
				DME call.
			</NOTES>
			<EXAMPLES/>
		</CONSTRUCTOR>
		<CONSTRUCTOR name="dmeField">
			<PARAMETERS>
				<PARAMETER name="strDbName" type="string" required="1"/>
				<PARAMETER name="strHeading" type="string" required="1"/>
				<PARAMETER name="strRtSort" type="string" required="1"/>
				<PARAMETER name="strDrill" type="string" required="1"/>
				<PARAMETER name="strHide" type="strng" required="1"/>
				<PARAMETER name="strAlign" type="string" required="1"/>
				<PARAMETER name="strHdrAlign" type="string" required="1"/>
				<PARAMETER name="strWrap" type="string" required="1"/>
				<PARAMETER name="strHdrWrap" type="string" required="1"/>
				<PARAMETER name="strTooltip" type="string" required="1"/>
				<PARAMETER name="strHdrTooltip" type="string" required="1"/>
				<PARAMETER name="strOccurs" type="string" required="1"/>
			</PARAMETERS>
			<PROPERTY name="name" type="String" construct="">
				<NOTES>Sets or retrieves the name of a field in the DME call of a data object.</NOTES>
			</PROPERTY>
			<PROPERTY name="heading" type="String" construct="">
				<NOTES>Sets or retrieves the heading of a field in the DME call of a data object.</NOTES>
			</PROPERTY>
			<PROPERTY name="sort" type="String" construct="">
				<NOTES>Indicates if the column can be sorted in a tabular representation of a data object</NOTES>
			</PROPERTY>
			<PROPERTY name="drill" type="String" construct="">
				<NOTES>If drill is enabled on a column, clicking on the hyperlinks will open the drill explorer.</NOTES>
			</PROPERTY>
			<PROPERTY name="hide" type="String" required="1">
				<NOTES>The field is fetched and available in the XML output, but not rendered in the table.</NOTES>
			</PROPERTY>
			<PROPERTY name="align" type="String" construct="">
				<NOTES>Indicates how to align the data in a tabular representation of a data object. The data may be aligned 
				left, right or center.</NOTES>
			</PROPERTY>
			<PROPERTY name="hdralign" type="String" construct="">
				<NOTES>Indicates how to align the header of a column in a tabular representation of a data object. 
				The data may be aligned left, right or center.</NOTES>
			</PROPERTY>
			<PROPERTY name="wrap" type="String" construct="">
				<NOTES>Indicates if the data can be wrapped in case it does not fit in the cell of a table.</NOTES>
			</PROPERTY>
			<PROPERTY name="hdrwrap" type="String" construct="">
				<NOTES>Indicates if the header can be wrapped in case it does not fit in the cell of a table.</NOTES>
			</PROPERTY>
			<PROPERTY name="tooltip" type="String" construct="">
				<NOTES>Sets or retrieves the tooltip displayed when the mouse pointer hovers over a column in the table</NOTES>
			</PROPERTY>
			<PROPERTY name="hdrtooltip" type="String" construct="">
				<NOTES>Sets or retrieves the tooltip displayed when the mouse pointer hovers over a column header in the table</NOTES>
			</PROPERTY>
			<PROPERTY name="occurs" type="String" construct="">
				<NOTES>This corresponds to the occurs associated with a field in a database table. So if the database table
				definition indicates that a particular field occurs multiple times, the data table output displays 
				multiple columns for this field. </NOTES>
			</PROPERTY>
			<NOTES>dmeField object represents the properties of a Data object field.
			</NOTES>
			<EXAMPLES/>
		</CONSTRUCTOR>
		<CONSTRUCTOR name="dmeKey">
			<PARAMETERS>
				<PARAMETER name="strKeyName" type="string" required="1"/>
				<PARAMETER name="strKeyVal" type="string" required="1"/>
				<PARAMETER name="strKeyLbl" type="string" required="1"/>
				<PARAMETER name="strReadOnly" type="string" required="1"/>
				<PARAMETER name="strUpdOnChg" type="string" required="1"/>
				<PARAMETER name="strHide" type="string" required="1"/>
				<PARAMETER name="strType" type="string" required="1"/>
			</PARAMETERS>
			<PROPERTY name="name" type="String" construct="">
				<NOTES>Name of the key field.</NOTES>
			</PROPERTY>
			<PROPERTY name="value" type="String" construct="">
				<NOTES>Sets or retrieves the value of the key field.</NOTES>
			</PROPERTY>
			<PROPERTY name="valueRt" type="String" construct="">
				<NOTES>Sets or retrieves the value of the key field at the runtime. As a result of
				portal page refresh the key value changes at runtime.</NOTES>
			</PROPERTY>
			<PROPERTY name="label" type="String" construct="">
				<NOTES>Sets or retrieve the label of a key field to be displayed in a filter.</NOTES>
			</PROPERTY>
			<PROPERTY name="readOnly" type="boolean" required="1">
				<NOTES>Indicates if the key field value is readonly in a filter.</NOTES>
			</PROPERTY>
			<PROPERTY name="UpdOnChg" type="boolean" construct="">
				<NOTES>Indicates if the key field value can be updated at runtime as a result of 
				page refresh.</NOTES>
			</PROPERTY>
			<PROPERTY name="hide" type="boolean" construct="">
				<NOTES>Indicates if the key field can be displayed in a filter.</NOTES>
			</PROPERTY>
			<NOTES>dmeKey object represents the properties of a Data object key.</NOTES>
			<EXAMPLES/>
		</CONSTRUCTOR>
		<CONSTRUCTOR name="Formlet">
			<PARAMETERS>
				<PARAMETER name="DOMNode" type="DOM Node" required="1"/>
			</PARAMETERS>
			<PROPERTY name="id" type="String" construct="">
				<NOTES>Id of the formlet object</NOTES>
			</PROPERTY>
			<PROPERTY name="left" type="String" construct="">
				<NOTES>Sets or retrieves the position of the object relative to the left edge of 
				the portal page.</NOTES>
			</PROPERTY>
			<PROPERTY name="top" type="String" construct="">
				<NOTES>Sets or retrieves the position of the object relative to the top edge of
				the portal page.</NOTES>
			</PROPERTY>
			<PROPERTY name="width" type="String" construct="">
				<NOTES>Sets or retrieves the width of the object.</NOTES>
			</PROPERTY>
			<PROPERTY name="height" type="String" construct="">
				<NOTES>Sets or retrieves the height of the object.</NOTES>
			</PROPERTY>
			<PROPERTY name="border" type="boolean" construct="">
				<NOTES>Indicate if a border needs to be drawn around the object.</NOTES>
			</PROPERTY>
			<PROPERTY name="title" type="String" construct="">
				<NOTES>Sets or retrieves the title of the object</NOTES>
			</PROPERTY>
			<PROPERTY name="scroll" type="boolean" construct="">
				<NOTES>Indicate how to handle the overflow content.</NOTES>
			</PROPERTY>
			<PROPERTY name="zIndex" type="String" construct="">
				<NOTES>Sets or retrieves the stacking order of positioned objects.</NOTES>
			</PROPERTY>
			<PROPERTY name="autoHide" type="boolean" construct="">
				<NOTES>Indicate if the object may be rendered at the time of loading the portal page. 
				If autoHide is turned on, the object will not be rendered until the key 
				information is available.</NOTES>
			</PROPERTY>
			<PROPERTY name="refreshData" type="String" construct="">
				<NOTES>Indicate if the formlet may be refreshed everytime it receives a refresh
				notification from the portal page, irrespective of whether the keys changed.</NOTES>
			</PROPERTY>
			<PROPERTY name="frmID" type="String" construct="">
				<NOTES>Sets or retrieves the form ID of a custom form.</NOTES>
			</PROPERTY>
			<PROPERTY name="frmTKN" type="String" construct="">
				<NOTES>Sets or retrieves the form token of a custom form.</NOTES>
			</PROPERTY>
			<METHOD name="refresh" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="pStorage" type="PortalStorage" required="1"/>
				</PARAMETERS>
				<NOTES>Render a formlet object. If the object exists, then just update the data 
				associated. pStorage is the data source object that has the key information to execute 
				the request and render data.</NOTES>
				<EXAMPLES>var objForm = page.objects["formlet0"];
objForm.refresh(page.dataSource);
				</EXAMPLES>
			</METHOD>
			<METHOD name="setzIndex" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="zIndex" type="string" required="1"/>
				</PARAMETERS>
				<NOTES>Sets the stacking order of positioned objects.</NOTES>
				<EXAMPLES>var objForm = page.objects["formlet0"];
objForm.setzIndex("99");
				</EXAMPLES>
			</METHOD>
			<NOTES>Formlets represents the custom forms that are designed using the UI designer. Formlets
			publish / consume key information in a portal page and displays data that are related to
			other objects in a portal page.</NOTES>
			<EXAMPLES/>
		</CONSTRUCTOR>
		<CONSTRUCTOR name="HTML">
			<PARAMETERS>
				<PARAMETER name="DOMNode" type="DOM Node" required="1"/>
			</PARAMETERS>
			<PROPERTY name="id" type="String" construct="">
				<NOTES>Id of the web page object</NOTES>
			</PROPERTY>
			<PROPERTY name="left" type="String" construct="">
				<NOTES>Sets or retrieves the position of the object relative to the left edge of 
				the portal page.</NOTES>
			</PROPERTY>
			<PROPERTY name="top" type="String" construct="">
				<NOTES>Sets or retrieves the position of the object relative to the top edge of
				the portal page.</NOTES>
			</PROPERTY>
			<PROPERTY name="width" type="String" construct="">
				<NOTES>Sets or retrieves the width of the object.</NOTES>
			</PROPERTY>
			<PROPERTY name="height" type="String" construct="">
				<NOTES>Sets or retrieves the height of the object.</NOTES>
			</PROPERTY>
			<PROPERTY name="border" type="boolean" construct="">
				<NOTES>Indicate if a border needs to be drawn around the object.</NOTES>
			</PROPERTY>
			<PROPERTY name="title" type="String" construct="">
				<NOTES>Sets or retrieves the title of the object</NOTES>
			</PROPERTY>
			<PROPERTY name="scroll" type="boolean" construct="">
				<NOTES>Indicate how to handle the overflow content.</NOTES>
			</PROPERTY>
			<PROPERTY name="zIndex" type="String" construct="">
				<NOTES>Sets or retrieves the stacking order of positioned objects.</NOTES>
			</PROPERTY>
			<PROPERTY name="autoHide" type="boolean" construct="">
				<NOTES>Indicate if the object may be rendered at the time of loading the portal page. 
				If autoHide is turned on, the object will not be rendered until the key 
				information is available.</NOTES>
			</PROPERTY>
			<PROPERTY name="baseURL" type="String" construct="">
				<NOTES>The URL of the resource to be navigated to in this web page object. The
				baseURL may include parameters that will be filled in based on the data available
				at runtime.</NOTES>
			</PROPERTY>
			<PROPERTY name="URL" type="String" construct="">
				<NOTES>The URL of the resource to be navigated to in this web page object. The URL
				has values for all parameters filled in.</NOTES>
			</PROPERTY>
			<PROPERTY name="dataSource" type="PortalStorage" construct="PortalStorage">
				<NOTES>The dataSource has a list of parameters that the web page is dependent upon to
				build its URL. The parameters may have initial value assigned to or the portal page
				may send in a dataSource object with valid values as a part of its refresh notification
				process.</NOTES>
			</PROPERTY>

			<METHOD name="refresh" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="pStorage" type="PortalStorage" required="1"/>
				</PARAMETERS>
				<NOTES>Render a Web page object by navigating to the resource specified.</NOTES>
				<EXAMPLES>var objHTM = page.objects["htm0"];
objHTM.refresh(page.dataSource);
				</EXAMPLES>
			</METHOD>
			<METHOD name="setzIndex" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="zIndex" type="string" required="1"/>
				</PARAMETERS>
				<NOTES>Sets the stacking order of positioned objects.</NOTES>
				<EXAMPLES>var objHTM = page.objects["htm0"];
objHTM.setzIndex("99");
				</EXAMPLES>
			</METHOD>
			<NOTES/>
			<EXAMPLES/>
		</CONSTRUCTOR>
		<CONSTRUCTOR name="IDA">
			<PARAMETERS>
				<PARAMETER name="DOMNode" type="XMLDOM" required="1"/>
			</PARAMETERS>
			<PROPERTY name="id" type="String" construct="">
				<NOTES>Id of the IDA object</NOTES>
			</PROPERTY>
			<PROPERTY name="left" type="String" construct="">
				<NOTES>Sets or retrieves the position of the object relative to the left edge of 
				the portal page.</NOTES>
			</PROPERTY>
			<PROPERTY name="top" type="String" construct="">
				<NOTES>Sets or retrieves the position of the object relative to the top edge of
				the portal page.</NOTES>
			</PROPERTY>
			<PROPERTY name="width" type="String" construct="">
				<NOTES>Sets or retrieves the width of the object.</NOTES>
			</PROPERTY>
			<PROPERTY name="height" type="String" construct="">
				<NOTES>Sets or retrieves the height of the object.</NOTES>
			</PROPERTY>
			<PROPERTY name="border" type="boolean" construct="">
				<NOTES>Indicate if a border needs to be drawn around the object.</NOTES>
			</PROPERTY>
			<PROPERTY name="title" type="String" construct="">
				<NOTES>Sets or retrieves the title of the object</NOTES>
			</PROPERTY>
			<PROPERTY name="scroll" type="boolean" construct="">
				<NOTES>Indicate how to handle the overflow content.</NOTES>
			</PROPERTY>
			<PROPERTY name="zIndex" type="String" construct="">
				<NOTES>Sets or retrieves the stacking order of positioned objects.</NOTES>
			</PROPERTY>
			<PROPERTY name="autoHide" type="boolean" construct="">
				<NOTES>Indicate if the object may be rendered at the time of loading the portal page. 
				If autoHide is turned on, the object will not be rendered until the key 
				information is available.</NOTES>
			</PROPERTY>
			<PROPERTY name="navigateOption" type="String" construct="">
				<NOTES>Indicate how to open the resource pointed by links in the object.
				The resource may be opened in a new window or may replace the portal page.
				Or a special URL may be set in the portal page's data source.</NOTES>
			</PROPERTY>
			<PROPERTY name="baseCall" type="String" construct="">
				<NOTES>The IDA call for execution is built on top of the baseCall, filling in the 
				key values.</NOTES>
			</PROPERTY>
			<PROPERTY name="idaCall" type="String" construct="">
				<NOTES>The IDA call that is built on top of the baseCall. This gets executed 
				and output is rendered as a drill select or drill explorer.</NOTES>
			</PROPERTY>
			<PROPERTY name="maxRecords" type="String" construct="">
				<NOTES>Indicates the maximum number of records returned by the IDA call.</NOTES>
			</PROPERTY>
			<PROPERTY name="mode" type="String" construct="">
				<NOTES>The results of IDA call may be represented as drill select or drill explorer. 
				Sets or retrieves the mode to open up the drill.</NOTES>
			</PROPERTY>
			<PROPERTY name="keys" type="Array" construct="">
				<NOTES>An array of keys that are to be set for the successful execution of IDA call.
				keys.num represent the key number and keys.value represent the value of the key.</NOTES>
			</PROPERTY>
			<METHOD name="refresh" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="pStorage" type="PortalStorage" required="1"/>
				</PARAMETERS>
				<NOTES>Render an IDA object. If the object exists, then just update the data 
				associated. pStorage is the data source object that has the key information to execute 
				the request and render data.</NOTES>
				<EXAMPLES>var objIDA = page.objects["ida0"];
objIDA.refresh(page.dataSource);
				</EXAMPLES>
			</METHOD>
			<METHOD name="setzIndex" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="zIndex" type="string" required="1"/>
				</PARAMETERS>
				<NOTES>Sets the stacking order of positioned objects.</NOTES>
				<EXAMPLES>var objIDA = page.objects["ida0"];
objIDA.setzIndex("99");
				</EXAMPLES>
			</METHOD>
			<NOTES/>
			<EXAMPLES/>
		</CONSTRUCTOR>
		<CONSTRUCTOR name="Menu">
			<PARAMETERS>
				<PARAMETER name="DOMNode" type="DOM Node" required="1"/>
			</PARAMETERS>
			<PROPERTY name="id" type="String" construct="">
				<NOTES>Id of the menu object</NOTES>
			</PROPERTY>
			<PROPERTY name="title" type="String" construct="">
				<NOTES>Sets or retrieve the title of the object</NOTES>
			</PROPERTY>
			<PROPERTY name="type" type="String" construct="">
				<NOTES>Sets or retrieve the type of the menu object. The type may be menu, transfer
				or user to indicate it is a lawson menu, local transfer menu or user defined
				menu respectively.</NOTES>
			</PROPERTY>
			<PROPERTY name="navigateOption" type="String" construct="">
				<NOTES>Indicate how to open the resource pointed by links in the object.
				The resource may be opened in a new window or may replace the portal page.
				Or a special URL may be set in the portal page's data source.</NOTES>
			</PROPERTY>
			<PROPERTY name="menus" type="Array" construct="">
				<NOTES>Array of menu items that are rendered in a navlet. menus.URL specifies
				the URL of the resource. menus.title specifies the title of the menu item. In the 
				case of Lawson menu or local transfer menu, menus.TKN specifies the token of a
				Lawson form.</NOTES>
			</PROPERTY>
			<METHOD name="render" returntype="" construct="">
				<NOTES>Render method adds a navlet to the page tab in the left bar. </NOTES>
				<EXAMPLES>var objMenu = page.objects["user0"];
var menuItem = new Object();
menuItem.URL = "http://mycompany.com";
menuItem.title = "My Company";
menuItem.description = "My Company web site";
objMenu.menus[objMenu.menus.length] = menuItem;
objMenu.render();

				</EXAMPLES>
			</METHOD>
			<NOTES>The portal page menus are rendered as a navlet in the leftbar of the portal.
			There are three types of menus: Lawson Menu that lists lawson forms as menu items;
			Local Transfer menu that lists local transfer forms of a particular lawson form;
			User defined menu that has a list of URLs as menu items.</NOTES>
			<EXAMPLES/>
		</CONSTRUCTOR>
		<CONSTRUCTOR name="PageImage">
			<PARAMETERS>
				<PARAMETER name="DOMNode" type="DOM Node" required="1"/>
			</PARAMETERS>
			<PROPERTY name="id" type="String" construct="">
				<NOTES>Id of the image object</NOTES>
			</PROPERTY>
			<PROPERTY name="left" type="String" construct="">
				<NOTES>Sets or retrieves the position of the object relative to the left edge of 
				the portal page.</NOTES>
			</PROPERTY>
			<PROPERTY name="top" type="String" construct="">
				<NOTES>Sets or retrieves the position of the object relative to the top edge of
				the portal page.</NOTES>
			</PROPERTY>
			<PROPERTY name="width" type="String" construct="">
				<NOTES>Sets or retrieves the width of the object.</NOTES>
			</PROPERTY>
			<PROPERTY name="height" type="String" construct="">
				<NOTES>Sets or retrieves the height of the object.</NOTES>
			</PROPERTY>
			<PROPERTY name="border" type="boolean" construct="">
				<NOTES>Indicate if a border needs to be drawn around the object.</NOTES>
			</PROPERTY>
			<PROPERTY name="title" type="String" construct="">
				<NOTES>Sets or retrieves the title of the object</NOTES>
			</PROPERTY>
			<PROPERTY name="scroll" type="boolean" construct="">
				<NOTES>Indicate how to handle the overflow content.</NOTES>
			</PROPERTY>
			<PROPERTY name="zIndex" type="String" construct="">
				<NOTES>Sets or retrieves the stacking order of positioned objects.</NOTES>
			</PROPERTY>
			<PROPERTY name="autoHide" type="boolean" construct="">
				<NOTES>Indicate if the object may be rendered at the time of loading the portal page. 
				If autoHide is turned on, the object will not be rendered until the key 
				information is available.</NOTES>
			</PROPERTY>
			<PROPERTY name="baseURL" type="String" construct="">
				<NOTES>The URL of the image resource to be navigated to in this object. The
				baseURL may include parameters that will be filled in based on the data available
				at runtime.</NOTES>
			</PROPERTY>
			<PROPERTY name="URL" type="String" construct="">
				<NOTES>The URL of the image resource to be navigated to in this object. The URL
				has values for all parameters filled in.</NOTES>
			</PROPERTY>
			<PROPERTY name="dataSource" type="PortalStorage" construct="PortalStorage">
				<NOTES>The dataSource has a list of parameters that the image object is dependent upon
				to build its URL. The parameters may have initial value assigned to or the portal page
				may send in a dataSource object with valid values as a part of its refresh notification
				process.</NOTES>
			</PROPERTY>
			<METHOD name="refresh" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="pStorage" type="PortalStorage" required="1"/>
				</PARAMETERS>
				<NOTES>Render a image object by navigating to the resource specified.</NOTES>
				<EXAMPLES>var objImg = page.objects["img0"];
objImg.refresh(page.dataSource);
				</EXAMPLES>
			</METHOD>
			<METHOD name="setzIndex" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="zIndex" type="string" required="1"/>
				</PARAMETERS>
				<NOTES>Sets the stacking order of positioned objects.</NOTES>
				<EXAMPLES>var objImg = page.objects["img0"];
objImg.setzIndex("99");
				</EXAMPLES>
			</METHOD>
			<NOTES>Image object renders images from resource specified as URL.
			</NOTES>
			<EXAMPLES/>
		</CONSTRUCTOR>
		<CONSTRUCTOR name="PortalPage">
			<PARAMETERS>
				<PARAMETER name="DOM" type="DOM" required="1"/>
			</PARAMETERS>
			<PROPERTY name="objects" type="Object" construct="">
				<NOTES>A collection of objects that constitutes a portal page is available
				through the objects property.</NOTES>
				<EXAMPLES>// Get one of the objects on the portal page.
var objText = page.objects["text0"];
				</EXAMPLES>
			</PROPERTY>
			<PROPERTY name="dataSource" type="PortalStorage" construct="PortalStorage">
				<NOTES>Portal page data source contains a list of name / value pairs.
				An object on the portal page may update the portal page data source.
				This in turn will trigger refresh notifications to be sent to other
				portal page objects to update itself.</NOTES>
			</PROPERTY>
			<PROPERTY name="phrases" type="phraseObj" construct="phraseObj">
				<NOTES>The phrases object has a list of phrases that are to be translated 
				to the native language of the user. The translated phrases are available
				when the portal page is being loaded.</NOTES>
			</PROPERTY>
			<PROPERTY name="parameters" type="PortalStorage" construct="PortalStorage">
				<NOTES>All the parameters on the query string are stored in parameters 
				object.</NOTES>
				<EXAMPLES>// Get the invoice number passed as a parameter in the URL
// For example: http://myserver.com/lawson/portal/pages/index.htm?FILE=myinvoice&amp;INVOICE=123
var Invoice = page.parameters["INVOICE"];
				</EXAMPLES>
			</PROPERTY>
			<PROPERTY name="id" type="String" construct="">
				<NOTES>Sets or retrieves the Id of the portal page.</NOTES>
			</PROPERTY>
			<PROPERTY name="title" type="String" construct="">
				<NOTES>Sets or retrieves the title of the portal page.</NOTES>
			</PROPERTY>
			<METHOD name="addElement" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="name" type="String" required="1"/>
					<PARAMETER name="value" type="" required="0"/>
				</PARAMETERS>
				<NOTES>Add an element to the portal page datasource. </NOTES>
				<EXAMPLES>page.addElement("COMPANY", "234");</EXAMPLES>
			</METHOD>
			<METHOD name="removeElement" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="name" type="String" required="1"/>
				</PARAMETERS>
				<NOTES>Remove an element from the portal page data source.</NOTES>
				<EXAMPLES>page.removeElement("COMPANY");</EXAMPLES>
			</METHOD>
			<METHOD name="addObject" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="name" type="String" required="1"/>
					<PARAMETER name="object" type="Object" required="1"/>
				</PARAMETERS>
				<NOTES>Add an object to the portal page. Adding an object will not render
				it. The render method on the object must be called to render an object.</NOTES>
				<EXAMPLES>var objText = new Text(DOMNode);
page.addObject(objText);
				</EXAMPLES>
			</METHOD>
			<METHOD name="removeObject" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="name" type="String" required="1"/>
				</PARAMETERS>
				<NOTES>Remove an object from the portal page.</NOTES>
			</METHOD>
			<METHOD name="setObjectValues" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="objectId" type="String" required="1"/>
					<PARAMETER name="pStorageObject" type="PortalStorage" required="1"/>
				</PARAMETERS>
				<NOTES>This method updates the portal page's data source. An object
				sends the relevant data in a PortalStorage object.</NOTES>
			</METHOD>
			<METHOD name="getObjectValues" returntype="PortalStorage" construct="">
				<PARAMETERS>
					<PARAMETER name="objectId" type="String" required="1"/>
				</PARAMETERS>
				<NOTES>Returns a PortalStorage object that has the name/value pairs
				of interest to the object that requested it.</NOTES>
			</METHOD>
			<METHOD name="setElementValue" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="name" type="String" required="1"/>
					<PARAMETER name="value" type="" required="0"/>
				</PARAMETERS>
				<NOTES>Update the portal page's data source by sending in a name/value pair.</NOTES>
			</METHOD>
			<METHOD name="getElementValue" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="name" type="String" required="1"/>
				</PARAMETERS>
				<NOTES>Returns the value of the element in portal page's data source.</NOTES>
			</METHOD>
			<NOTES>Portal page represents a collection of objects that are related to each other. 
			The relationships between them is captured in the portal page's data map. Portal page
			mainitains a data source that aids in exchanging data between the objects.
			</NOTES>
			<EXAMPLES/>
		</CONSTRUCTOR>
		<CONSTRUCTOR name="PortalStorage">
			<METHOD name="addElement" returntype="Object" construct="">
				<PARAMETERS>
					<PARAMETER name="name" type="String" required="1"/>
					<PARAMETER name="value" type="" required="0"/>
				</PARAMETERS>
				<NOTES>Add an element to the portal storage object.</NOTES>
				<EXAMPLES>pStorage = new PortalStorage();
pStorage.addElement("COMPANY", "1234");
				</EXAMPLES>
			</METHOD>
			<METHOD name="removeElement" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="name" type="String" required="1"/>
				</PARAMETERS>
				<NOTES>Remove an element from the portal storage object.</NOTES>
				<EXAMPLES>pStorage.removeElement("COMPANY");</EXAMPLES>
			</METHOD>
			<NOTES>PortalStorage object represents a collection of name value pairs.
			Portal page uses PortalStorage objects to pass data between objects.</NOTES>
			<EXAMPLES/>
		</CONSTRUCTOR>
		<CONSTRUCTOR name="Report">
			<PARAMETERS>
				<PARAMETER name="DOMNode" type="XMLDOM" required="1"/>
			</PARAMETERS>
			<PROPERTY name="id" type="String" construct="">
				<NOTES>Id of the report object</NOTES>
			</PROPERTY>
			<PROPERTY name="left" type="String" construct="">
				<NOTES>Sets or retrieves the position of the object relative to the left edge of 
				the portal page.</NOTES>
			</PROPERTY>
			<PROPERTY name="top" type="String" construct="">
				<NOTES>Sets or retrieves the position of the object relative to the top edge of
				the portal page.</NOTES>
			</PROPERTY>
			<PROPERTY name="width" type="String" construct="">
				<NOTES>Sets or retrieves the width of the object.</NOTES>
			</PROPERTY>
			<PROPERTY name="height" type="String" construct="">
				<NOTES>Sets or retrieves the height of the object.</NOTES>
			</PROPERTY>
			<PROPERTY name="border" type="boolean" construct="">
				<NOTES>Indicate if a border needs to be drawn around the object.</NOTES>
			</PROPERTY>
			<PROPERTY name="title" type="String" construct="">
				<NOTES>Sets or retrieves the title of the object</NOTES>
			</PROPERTY>
			<PROPERTY name="scroll" type="boolean" construct="">
				<NOTES>Indicate how to handle the overflow content.</NOTES>
			</PROPERTY>
			<PROPERTY name="zIndex" type="String" construct="">
				<NOTES>Sets or retrieves the stacking order of positioned objects.</NOTES>
			</PROPERTY>
			<PROPERTY name="autoHide" type="boolean" construct="">
				<NOTES>Indicate if the object may be rendered at the time of loading the portal page. 
				If autoHide is turned on, the object will not be rendered until the key 
				information is available.</NOTES>
			</PROPERTY>
			<PROPERTY name="navigateOption" type="String" construct="">
				<NOTES>Indicate how to open the resource pointed by links in the object.
				The resource may be opened in a new window or may replace the portal page.
				Or a special URL may be set in the portal page's data source.</NOTES>
			</PROPERTY>
			<PROPERTY name="printEnabled" type="Boolean" construct="">
				<NOTES>A boolean to enable printing of jobs and reports. When true,
				print icon appears on each row of the reports table.</NOTES>
			</PROPERTY>
			<PROPERTY name="submitEnabled" type="Boolean" construct="">
				<NOTES>A boolean to enable job submission. When true, job submit
				icon appears on each row of the table.</NOTES>
			</PROPERTY>
			<PROPERTY name="deleteEnabled" type="Boolean" construct="">
				<NOTES>A boolean to enable report deletion. When true, delete icon
				appears on each row of the table.</NOTES>
			</PROPERTY>
			<METHOD name="refresh" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="pStorage" type="PortalStorage" required="0"/>
				</PARAMETERS>
				<NOTES>Renders the report object. The reports available for the current
				logged in user are fetched and rendered in a table.
				</NOTES>
			</METHOD>
			<NOTES>
				The report object lists the jobs and reports in the system for the user
				signed in.
			</NOTES>
			<EXAMPLES/>
		</CONSTRUCTOR>
		<CONSTRUCTOR name="RSS">
			<PARAMETERS>
				<PARAMETER name="DOMNode" type="XMLDOM" required="1"/>
			</PARAMETERS>
			<PROPERTY name="id" type="String" construct="">
				<NOTES>Id of the RSS object</NOTES>
			</PROPERTY>
			<PROPERTY name="left" type="String" construct="">
				<NOTES>Sets or retrieves the position of the object relative to the left edge of 
				the portal page.</NOTES>
			</PROPERTY>
			<PROPERTY name="top" type="String" construct="">
				<NOTES>Sets or retrieves the position of the object relative to the top edge of
				the portal page.</NOTES>
			</PROPERTY>
			<PROPERTY name="width" type="String" construct="">
				<NOTES>Sets or retrieves the width of the object.</NOTES>
			</PROPERTY>
			<PROPERTY name="height" type="String" construct="">
				<NOTES>Sets or retrieves the height of the object.</NOTES>
			</PROPERTY>
			<PROPERTY name="border" type="boolean" construct="">
				<NOTES>Indicate if a border needs to be drawn around the object.</NOTES>
			</PROPERTY>
			<PROPERTY name="title" type="String" construct="">
				<NOTES>Sets or retrieves the title of the object</NOTES>
			</PROPERTY>
			<PROPERTY name="scroll" type="boolean" construct="">
				<NOTES>Indicate how to handle the overflow content.</NOTES>
			</PROPERTY>
			<PROPERTY name="zIndex" type="String" construct="">
				<NOTES>Sets or retrieves the stacking order of positioned objects.</NOTES>
			</PROPERTY>
			<PROPERTY name="autoHide" type="boolean" construct="">
				<NOTES>Indicate if the object may be rendered at the time of loading the portal page. 
				If autoHide is turned on, the object will not be rendered until the key 
				information is available.</NOTES>
			</PROPERTY>
			<PROPERTY name="navigateOption" type="String" construct="">
				<NOTES>Indicate how to open the resource pointed by links in the object.
				The resource may be opened in a new window or may replace the portal page.
				Or a special URL may be set in the portal page's data source.</NOTES>
			</PROPERTY>
			<PROPERTY name="showDesc" type="boolean" construct="">
				<NOTES>When true, the description associated with each item on the RSS
				feed is displayed.</NOTES>
			</PROPERTY>
			<PROPERTY name="baseURL" type="String" construct="">
				<NOTES>The URL of the RSS resource to be navigated to obtain the feed from. The
				baseURL may include parameters that will be filled in based on the data available
				at runtime.</NOTES>
			</PROPERTY>
			<PROPERTY name="URL" type="String" construct="">
				<NOTES>The URL of the RSS resource to be navigated to obtain the feed from. The URL
				has values for all parameters filled in.</NOTES>
			</PROPERTY>
			<PROPERTY name="dataSource" type="PortalStorage" construct="PortalStorage">
				<NOTES>The dataSource has a list of parameters that the RSS object is dependent upon to
				build its URL. The parameters may have initial value assigned to or the portal page
				may send in a dataSource object with valid values as a part of its refresh notification
				process.</NOTES>
			</PROPERTY>
			<METHOD name="refresh" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="pStorage" type="PortalStorage" required="0"/>
				</PARAMETERS>
				<NOTES>Obtain the RSS feed and render a list of links.</NOTES>
				<EXAMPLES>var objRSS = page.objects["rss0"];
objRSS.refresh(page.dataSource);
				</EXAMPLES>
			</METHOD>
			<METHOD name="setzIndex" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="zIndex" type="string" required="1"/>
				</PARAMETERS>
				<NOTES>Sets the stacking order of positioned objects.</NOTES>
				<EXAMPLES>var objRSS = page.objects["rss0"];
objRSS.setzIndex("99");
				</EXAMPLES>
			</METHOD>
			<NOTES>Rich Site Summary is a web content syndication format. This object renderes the
			feeds obtained as a list of links.
			</NOTES>
			<EXAMPLES/>
		</CONSTRUCTOR>
		<CONSTRUCTOR name="Text">
			<PARAMETERS>
				<PARAMETER name="DOMNode" type="DOM Node" required="1"/>
			</PARAMETERS>
			<PROPERTY name="id" type="String" construct="">
				<NOTES>Id of the Text object</NOTES>
			</PROPERTY>
			<PROPERTY name="left" type="String" construct="">
				<NOTES>Sets or retrieves the position of the object relative to the left edge of 
				the portal page.</NOTES>
			</PROPERTY>
			<PROPERTY name="top" type="String" construct="">
				<NOTES>Sets or retrieves the position of the object relative to the top edge of
				the portal page.</NOTES>
			</PROPERTY>
			<PROPERTY name="width" type="String" construct="">
				<NOTES>Sets or retrieves the width of the object.</NOTES>
			</PROPERTY>
			<PROPERTY name="height" type="String" construct="">
				<NOTES>Sets or retrieves the height of the object.</NOTES>
			</PROPERTY>
			<PROPERTY name="border" type="boolean" construct="">
				<NOTES>Indicate if a border needs to be drawn around the object.</NOTES>
			</PROPERTY>
			<PROPERTY name="title" type="String" construct="">
				<NOTES>Sets or retrieves the title of the object</NOTES>
			</PROPERTY>
			<PROPERTY name="scroll" type="boolean" construct="">
				<NOTES>Indicate how to handle the overflow content.</NOTES>
			</PROPERTY>
			<PROPERTY name="zIndex" type="String" construct="">
				<NOTES>Sets or retrieves the stacking order of positioned objects.</NOTES>
			</PROPERTY>
			<PROPERTY name="align" type="String" construct="">
				<NOTES>Sets or retrieves the text alignment property of the object. The 
				text may be aligned left, right or center.</NOTES>
			</PROPERTY>
			<PROPERTY name="bold" type="String" construct="">
				<NOTES>Sets or retrieve the font weight property of the text object.</NOTES>
			</PROPERTY>
			<PROPERTY name="italic" type="String" construct="">
				<NOTES>Sets or retrieves the font style property of the text object.</NOTES>
			</PROPERTY>
			<PROPERTY name="underLine" type="String" construct="">
				<NOTES>Sets or retrieves the text decoration property of the text object.</NOTES>
			</PROPERTY>
			<PROPERTY name="fontFamily" type="String" construct="">
				<NOTES>Sets or retrieves the font family property of the text object.</NOTES>
			</PROPERTY>
			<PROPERTY name="fontSize" type="String" construct="">
				<NOTES>Sets or retrieves the font size property of the text object.</NOTES>
			</PROPERTY>
			<PROPERTY name="color" type="String" construct="">
				<NOTES>Sets or retrieves the font color property of the text object.</NOTES>
			</PROPERTY>
			<PROPERTY name="backgroundColor" type="String" construct="">
				<NOTES>Sets or retrieves the background color property of the text object.</NOTES>
			</PROPERTY>
			<PROPERTY name="text" type="String" construct="">
				<NOTES>Sets or retrieves the text content displayed in the text object.</NOTES>
			</PROPERTY>
			<METHOD name="render" returntype="" construct="">
				<NOTES>Renders the text object by setting appropriate style.</NOTES>
			</METHOD>
			<METHOD name="setzIndex" returntype="" construct="">
				<PARAMETERS>
					<PARAMETER name="zIndex" type="string" required="1"/>
				</PARAMETERS>
				<NOTES>Sets the stacking order of positioned objects.</NOTES>
				<EXAMPLES>var objTxt = page.objects["txt0"];
objTxt.setzIndex("99");
				</EXAMPLES>
			</METHOD>
			<NOTES>Text object renders textual information in a portal page. The text can be
			formatted by specifying fonts, colour and style.
			</NOTES>
			<EXAMPLES/>
		</CONSTRUCTOR>
	</PAGES>
</CONSTRUCTORS>
