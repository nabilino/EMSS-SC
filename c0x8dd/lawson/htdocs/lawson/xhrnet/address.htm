<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=IE8">
<meta charset="utf-8">
<meta http-equiv="Pragma" content="No-Cache">
<meta http-equiv="Expires" content="Mon, 01 Jan 1990 00:00:01 GMT">
<title>Life Event Related Links</title>
<script src="/lawson/webappjs/common.js"></script>
<script src="/lawson/webappjs/commonHTTP.js"></script>
<script src="/lawson/webappjs/data.js"></script>
<script src="/lawson/webappjs/transaction.js"></script>
<script src="/lawson/xhrnet/esscommon80.js"></script>
<script src="/lawson/xhrnet/empinfo.js"></script>
<script src="/lawson/xhrnet/depinfo.js"></script>
<script src="/lawson/webappjs/user.js"></script>
<script src="/lawson/xhrnet/xml/xmlcommon.js"></script>
<script src="/lawson/xhrnet/ui/ui.js"></script>
<script src="/lawson/xhrnet/esscommon80.js"></script>
<script>
var UpdateFlag = false;
var pgmname = "address";
var Count = 0;
var thisDep = new Object();
var EmpInfo = new Object();
var visibilityFlags = new Array();
EmpInfo.employee_work_country = "";
// Default all access to "Deny" except for Life Events Benefits Enrollment
var autodeposit = false;
var withholding = false;
var dependents = false;
var emergency = false;
var UpdateHomeAddress = false;
var ReloadDone = true;
var updateAll = false;
var AddType = "";
var fromTask = (window.location.search)?unescape(window.location.search):"";
if (fromTask)
	AddType = getVarFromString("addresstype",fromTask);
var appObj;

function OpenMove()
{	
	authUser = null;
	try
	{
		// Check if a parent or opener document has already done an authenticate, otherwise go get the webuser info.
		if (parent && typeof(parent.authUser) != "undefined" && parent.authUser != null)
		{
			authUser = parent.authUser;
			if (typeof(parent.EmpInfo) != "undefined" && parent.EmpInfo != null)
				EmpInfo = parent.EmpInfo;
		}
		else if (opener && typeof(opener.authUser) != "undefined" && opener.authUser != null)
		{
			authUser = opener.authUser;
			if (typeof(opener.EmpInfo) != "undefined" && opener.EmpInfo != null)
				EmpInfo = opener.EmpInfo;
		}
	}
	catch(e)
	{
		authUser = null;
		EmpInfo = new Array();
		CalledEmpInfo = false;
	}
	if (!authUser)
	{
		authenticate("frameNm='jsreturn'|funcNm='GetEmdepend()'|officeObjects=true|desiredEdit='EM'");
		return;
	}
	GetEmdepend()
}

function GetEmdepend()
{
	stylePage();
	setWinTitle(parent.getSeaPhrase("LIFE_EVENT_LINKS","SEA"));
    removeHelpIcon();
    var nextFunc = function() { GetDepInfo(authUser.prodline,authUser.company,authUser.employee,"","MoveEvent()","Active"); };
    parent.showWaitAlert(parent.getSeaPhrase("PROCESSING_WAIT","ESS"), nextFunc);
}

function MoveEvent()
{
	if (DepInfo.length > 0) 
		EmpInfo.employee_work_country = DepInfo[0].employee_work_country;
	if (typeof(authUser) != "undefined" && authUser.OfficeObject)
	{
		var Bookmarks = authUser.OfficeObject;
		for (var i=0; i<authUser.NbrOfOfficeObj; i++)
		{
			var bkName = Bookmarks[i].name.toUpperCase(); // the Lawson-assigned task name
			var bkLawName = (Bookmarks[i].lawnm) ? Bookmarks[i].lawnm.toUpperCase() : "";	// the Lawson-assigned Lawson name
			//if IOS version < 802 then there Lawson name property woun't be available so need to check that case
			if (bkLawName!="")
			{
				if (bkLawName == "XMLHRAUTODEPOSIT1" || bkLawName == "XMLHRAUTODEPOSIT")
				{
					// grant access to direct deposit
					autodeposit = true;
				}
				else if (bkLawName == "XMLHRWITHHOLDING1" || bkLawName == "XMLHRWITHHOLDING")
				{
					// grant access to tax withholding
					withholding = true;
				}
				else if (bkLawName == "XMLHRDEPENDENTS1" || bkLawName == "XMLHRDEPENDENTS")
				{
					// grant access to dependents
					dependents = true;
				}
				else if (bkLawName == "XMLHREMERGENCY1" || bkLawName == "XMLHREMERGENCY")
				{
					// grant access to emergency contacts
					emergency = true;
				}
			}
			else
			{
				if (bkName == "DIRECT DEPOSIT")
				{
					// grant access to direct deposit
					autodeposit = true;
				}
				else if (bkName == "TAX WITHHOLDING")
				{
					// grant access to tax withholding
					withholding = true;
				}
				else if (bkName == "DEPENDENTS")
				{
					// grant access to dependents
					dependents = true;
				}
				else if (bkName == "EMERGENCY")
				{
					// grant access to emergency contacts
					emergency = true;
			 	}
			}
		}
	}
	VerifyAutoDeposit();
}

function VerifyAutoDeposit()
{
 	// If there is an AUTODEPOSIT task set to "I" ("Include"), verify the employee's
	// work country before displaying in the list of items the employee can update.
    if (autodeposit)
	{
		if ((typeof(EmpInfo.employee_work_country) != "undefined" && NonSpace(EmpInfo.employee_work_country)) 
		|| (DepInfo.length > 0 && NonSpace(EmpInfo.employee_work_country) == 0) || CalledEmpInfo)
		{
			autodeposit = (EmpInfo.employee_work_country != "US" && EmpInfo.employee_work_country != "CA") ? false : true;
		}
		else
		{
			GetEmpInfo(authUser.prodline,authUser.company,authUser.employee,"paemployee","employee.work-country;","CheckEmpWorkCountry(\"autodeposit\",true)");
			return;
		}
	}
	VerifyWithholding();
}

function VerifyWithholding()
{
	// If there is a WITHHOLDING task set to "I" ("Include"), verify the employee's
	// work country before displaying in the list of items the employee can update.
    if (withholding)
	{
		if ((typeof(EmpInfo.employee_work_country) != "undefined" && NonSpace(EmpInfo.employee_work_country)) 
		|| (DepInfo.length > 0 && NonSpace(EmpInfo.employee_work_country) == 0) || CalledEmpInfo)
		{
			withholding = (EmpInfo.employee_work_country != "US") ? false : true;
		}
		else
		{
			GetEmpInfo(authUser.prodline,authUser.company,authUser.employee,"paemployee","employee.work-country;","CheckEmpWorkCountry(\"withholding\",true)");
			return;
		}
	}
	DrawMoveScreen();
}

function CheckEmpWorkCountry(taskdesc, next)
{
	switch (taskdesc)
	{
		case "autodeposit":
			autodeposit = (EmpInfo.employee_work_country != "US" && EmpInfo.employee_work_country!="CA") ? false : true;
			if (next) VerifyWithholding();
			break;
		case "withholding":
			withholding = (EmpInfo.employee_work_country != "US")?false : true;
			if (next) DrawMoveScreen();
			break;
		default:
			DrawMoveScreen();
			break;
	}
}

function DrawMoveScreen()
{
	var MoveContent = '<table id="relatedLinksTbl" border="0" cellspacing="0" cellpadding="0" styler="list" role="presentation">'
	+ '<tr><th>&nbsp;</th><th>&nbsp;</th></tr>'
	//if (dependents && DepInfo.length > 0)
	//{
		var tip = parent.getSeaPhrase("LIFE_EVENTS_4","ESS")+' - '+getSeaPhrase("OPEN_LINK_TO","SEA");
		MoveContent += '<tr><td class="fieldlabel" style="vertical-align:top">'
		MoveContent += uiCheckmarkIcon("dependentaddress_checkmark","visibility:hidden")
		MoveContent += '</td><td class="fieldlabelleft"><a href="javascript:parent.OpenDepend();" title="'+tip+'">'+parent.getSeaPhrase("LIFE_EVENTS_4","ESS")+'<span class="offscreen"> - '+getSeaPhrase("OPEN_LINK_TO","SEA")+'</span></a></td></tr>'
	//}
	if (autodeposit)
	{
		var tip = parent.getSeaPhrase("LIFE_EVENTS_1","ESS")+' - '+getSeaPhrase("OPEN_LINK_TO","SEA");
		MoveContent += '<tr><td class="fieldlabel" style="vertical-align:top">'
		MoveContent += uiCheckmarkIcon("directdeposit_checkmark","visibility:hidden")
		MoveContent += '</td><td class="fieldlabelleft"><a href="javascript:parent.Bank();" title="'+tip+'">'+parent.getSeaPhrase("LIFE_EVENTS_1","ESS")+'<span class="offscreen"> - '+getSeaPhrase("OPEN_LINK_TO","SEA")+'</span></a></td></tr>'
	}
	if (emergency)
	{
		var tip = parent.getSeaPhrase("LIFE_EVENTS_3","ESS")+' - '+getSeaPhrase("OPEN_LINK_TO","SEA");
		MoveContent += '<tr><td class="fieldlabel" style="vertical-align:top">'
		MoveContent += uiCheckmarkIcon("emergencycontacts_checkmark","visibility:hidden")
		MoveContent += '</td><td class="fieldlabelleft"><a href="javascript:parent.Emergency();" title="'+tip+'">'+parent.getSeaPhrase("LIFE_EVENTS_3","ESS")+'<span class="offscreen"> - '+getSeaPhrase("OPEN_LINK_TO","SEA")+'</span></a></td></tr>'
	}
	if (withholding)
	{
		var tip = parent.getSeaPhrase("LIFE_EVENTS_2","ESS")+' - '+getSeaPhrase("OPEN_LINK_TO","SEA");
		MoveContent += '<tr><td class="fieldlabel" style="vertical-align:top">'
		MoveContent += uiCheckmarkIcon("w4form_checkmark","visibility:hidden")
		MoveContent += '</td><td class="fieldlabelleft"><a href="javascript:parent.OpenW4();" title="'+tip+'">'+parent.getSeaPhrase("LIFE_EVENTS_2","ESS")+'<span class="offscreen"> - '+getSeaPhrase("OPEN_LINK_TO","SEA")+'</span></a></td></tr>'
	}
	MoveContent += '</table>'
	self.MAIN.document.getElementById("paneHeader").innerHTML = parent.getSeaPhrase("ADDL_CHANGES","ESS")
	self.MAIN.document.getElementById("paneBody").innerHTML = '<div style="padding-left:20px;padding-right:20px;padding-top:20px;padding-bottom:20px">'
	+'<div class="fieldlabelboldleft">'+parent.getSeaPhrase("HOME_ADDR_43","ESS")+'</div>'
	+'<p/><div style="padding-left:20px">'+MoveContent+'</div>';
	self.MAIN.stylePage();
	self.MAIN.setLayerSizes();
	parent.removeWaitAlert(getSeaPhrase("CNT_UPD_FRM","SEA",[self.MAIN.getWinTitle()]));	
	fitToScreen();
}

function setImageVisibility(imgID, visibleState)
{
	var imgs = window.MAIN.document.images;
	var i = 0;
	var found = false;
	while (i<imgs.length && !found)
	{
		if (imgs[i].id == imgID)
		{
			found = true;
			imgs[i].style.visibility = visibleState;
		}
		i++;
	}
}

function toggleCheckMarksVisibility(visibleState)
{
	var imgs = window.MAIN.document.images;
	var i = 0;
	var j = 0;
	while (i<imgs.length)
	{
		if (imgs[i].id.indexOf("checkmark") != -1)
		{
			if (visibleState == "hidden")
			{
				// save the current visibility state of the image first, then hide it
				visibilityFlags[j] = imgs[i].style.visibility;
				imgs[i].style.visibility = "hidden";
			}
			else
			{
				// set the visibility to its previous state
				imgs[i].style.visibility = (visibilityFlags[j]) ? visibilityFlags[j] : "hidden";
			}
			j++;
		}
		i++;
	}
}

function OpenDepend()
{
	UpdateFlag = false;
	UpdateHomeAddress = false;
	ReloadDone = false
	parent.showWaitAlert(parent.getSeaPhrase("PROCESSING_WAIT","ESS"), function(){ReloadEmdepend(false);});
}

function confirmDependentUpdate()
{
	if (styler && (styler.showLDS || styler.showInfor || styler.showInfor3) && parent != window && typeof(parent["DialogObject"]) == "function")
	{
	    parent.DialogObject.prototype.getPhrase = function(phrase)
        {
			if (!userWnd && typeof(window["findAuthWnd"]) == "function")
		    	userWnd = findAuthWnd(true);
	        if (userWnd && userWnd.getSeaPhrase)
	        {
		    	var retStr = userWnd.getSeaPhrase(phrase.toUpperCase(), "ESS");
		    	return (retStr != "") ? retStr : phrase;
			}
			else
			    return phrase;
     	}
      	var messageDialog = new parent.DialogObject("/lawson/webappjs/", null, styler, true);
		messageDialog.pinned = true;
       	messageDialog.getPhrase = function(phrase)
       	{
			if (!userWnd && typeof(window["findAuthWnd"]) == "function")
		    	userWnd = findAuthWnd(true);
	        if (userWnd && userWnd.getSeaPhrase)
	        {
		    	var retStr = userWnd.getSeaPhrase(phrase.toUpperCase(), "ESS");
		    	return (retStr != "") ? retStr : phrase;
			}
			else
			    return phrase;
      	}
       	parent.removeWaitAlert();
      	var msgReturn = messageDialog.messageBox(parent.getSeaPhrase("DEP_49","ESS"), "yesno", "question", parent, false, "", confirmUpdateAllDeps);
       	if (typeof(msgReturn) == "undefined")
        	return;
		UpdateAllDepsAction(msgReturn);
	}
	else
	{
		var dialogHtml = '<form>'
		+ '<div role="radiogroup" aria-labelledby="updateDepsLbl">'
    	+ '<span id="updateDepsLbl">'+parent.getSeaPhrase("DEP_49","ESS")+'</span>'
    	+ '<p style="text-align:center">'
   		+ '<input type="radio" id="yes" name="yesorno" value="Y" checked role="radio"><label for="yes">'+parent.getSeaPhrase("YES","ESS")+'</label>'
    	+ '<input type="radio" id="no" value="N"><label for="no" role="radio">'+parent.getSeaPhrase("NO","ESS")+'</label>'
    	+ '</div>'
    	+ '<p style="text-align:center">'
    	+ uiButton(parent.getSeaPhrase("CONTINUE","ESS"),"parent.SetDependent(this.form);return false")
    	+ uiButton(parent.getSeaPhrase("CANCEL","ESS"),"parent.hideConfirmDialog();return false","margin-left:5px")
    	+ '</p></form>'
    	toggleFrame("dialog", true);
		self.dialog.document.getElementById("paneHeader").innerHTML = parent.getSeaPhrase("DEP_1","ESS")
		self.dialog.document.getElementById("paneBody").innerHTML = '<div class="fieldlabelleft">'
		+ dialogHtml+'</div>';
		self.dialog.stylePage();
		self.dialog.document.getElementById("paneBorder").style.top = "0px";
		self.dialog.document.getElementById("paneBorder").style.margin = "0px";
		self.dialog.document.getElementById("paneBody").style.overflow = "hidden";
		self.MAIN.document.getElementById("relatedLinksTbl").style.visibility = "hidden";
		toggleCheckMarksVisibility("hidden");
		parent.removeWaitAlert(getSeaPhrase("CNT_UPD_FRM","SEA",[self.dialog.getWinTitle()]));
	}
}

function confirmUpdateAllDeps(msgWin)
{
	if (msgWin.returnValue == "close" || msgWin.returnValue == "cancel")
		UpdateAllDepsAction("no");
	else	
    	UpdateAllDepsAction(msgWin.returnValue);
}

function UpdateAllDepsAction(action)
{
	processDependentChoice(action.charAt(0).toUpperCase());
}

function toggleFrame(frmId, show)
{
	var frm = document.getElementById(frmId);
	if (frm)
	{	
		frm.style.visibility = (show) ? "visible" : "hidden";
		frm.style.display = (show) ? "" : "none";	
	}
}

function showDependentsTask(refresh)
{
   	try 
   	{
   		parent.toggleFrame("left", false);
   		parent.toggleFrame("right", false);
   		parent.toggleFrame("relatedtask", false);
   		parent.toggleFrame("fullrelatedtask", true);
   	}
   	catch(e) {}	
	if (refresh || parent.fullrelatedtask.location.href.indexOf("dependents.htm")==-1)
   	{
		parent.showWaitAlert(parent.getSeaPhrase("GATHERING_INFO","ESS"));
   		parent.fullrelatedtask.location.replace("/lawson/xhrnet/dependents.htm?from=homeaddress");
   		removeHelpIcon();
   	}
}

function OpenW4()
{
   	try 
   	{
   		parent.toggleFrame("left", false);
   		parent.toggleFrame("right", false);
   		parent.toggleFrame("relatedtask", false);
   		parent.toggleFrame("fullrelatedtask", true);
   	}
   	catch(e) {}	
	//force reload to check for payroll lockout
   	if (parent.emssObjInstance.emssObj.payrollLockout || parent.fullrelatedtask.location.href.indexOf("w4.htm")==-1)
   	{
   		parent.showWaitAlert(parent.getSeaPhrase("GATHERING_INFO","ESS"));
   		parent.fullrelatedtask.location.replace("/lawson/xhrnet/w4/w4.htm?from=homeaddress");
   		removeHelpIcon();
   	}
}

function Bank()
{
   	try 
   	{
   		parent.toggleFrame("left", false);
   		parent.toggleFrame("right", false);
   		parent.toggleFrame("relatedtask", false);
   		parent.toggleFrame("fullrelatedtask", true);
   	}
   	catch(e) {}	
	//force reload to check for payroll lockout
    if (parent.emssObjInstance.emssObj.payrollLockout || parent.fullrelatedtask.location.href.indexOf("directdeposit.htm")==-1)
   	{
   		parent.showWaitAlert(parent.getSeaPhrase("GATHERING_INFO","ESS"));
   		parent.fullrelatedtask.location.replace("/lawson/xhrnet/directdeposit/directdeposit.htm?from=homeaddress");
   		removeHelpIcon();
   	}
}

function Emergency()
{
   	try 
   	{
   		parent.toggleFrame("left", false);
   		parent.toggleFrame("right", false);
   		parent.toggleFrame("relatedtask", false);
   		parent.toggleFrame("fullrelatedtask", true);
   	}
   	catch(e) {}	
   	if (parent.fullrelatedtask.location.href.indexOf("emergcnt.htm")==-1)
   	{
   		parent.showWaitAlert(parent.getSeaPhrase("GATHERING_INFO","ESS"));
   		parent.fullrelatedtask.location.replace("/lawson/xhrnet/emergcnt.htm?from=homeaddress");
   		removeHelpIcon();
   	}
}

function SetDependent(formObj)
{
	var flag = "N";
	for (var i=0; i<formObj.yesorno.length; i++)
	{
		if (formObj.yesorno[i].checked)
		{
			flag = formObj.yesorno[i].value;
			break;
		}
	}
	hideConfirmDialog();
    processDependentChoice(flag);
}

function processDependentChoice(flag)
{
	Count = 0;
  	if (flag == "N")
  	{
  	  	if (DepInfo.length > 0)
  	  	{
  	    	UpdateHomeAddress = true;
  	  		UpdateFlag = false;
			parent.showWaitAlert(parent.getSeaPhrase("PROCESSING_WAIT","ESS"), function(){UpdateDepend(true);});
      	}
      	else
       		showDependentsTask(false);
  	}
  	else
  	{
  		if (DepInfo.length > 0)
	  	{
			UpdateFlag = false;
		  	UpdateHomeAddress = false;
		  	parent.showWaitAlert(parent.getSeaPhrase("PROCESSING_WAIT","ESS"), function(){UpdateDepend(true);});
  		}
	  	else
	  	{
	  		parent.removeWaitAlert();
  			parent.seaPageMessage(parent.getSeaPhrase("DEP_0","ESS"), null, null, "info", null, true, getSeaPhrase("APPLICATION_ALERT","SEA"), true);
	  	}	
	}
}

function hideConfirmDialog()
{
	self.dialog.document.forms[0].reset();
   	self.MAIN.document.getElementById("relatedLinksTbl").style.visibility = "visible";
   	toggleCheckMarksVisibility("visible");
   	toggleFrame("dialog", false);
}

function UpdateDepend(updateAll)
{
	if (!appObj)
		appObj = new AppVersionObject(authUser.prodline, "HR");
	// if you call getAppVersion() right away and the IOS object isn't set up yet,
	// then the code will be trying to load the sso.js file, and your call for
	// the appversion will complete before the ios version is set
	if (iosHandler.getIOS() == null || iosHandler.getIOSVersionNumber() == null)
	{
       	setTimeout(function(){UpdateDepend(updateAll)}, 10);
       	return;
	}
	updateAll = (updateAll)?true:false;
   	thisDep = DepInfo[Count];
	if (UpdateHomeAddress && thisDep.emp_address == "H")
    {
    	var pObj = new AGSObject(authUser.prodline, "HR13.1");
		pObj.event = "CHANGE";
		pObj.rtn = "MESSAGE";
		pObj.longNames = true;
		pObj.tds = false;
		pObj.field = "FC=C"
		+ "&EMD-COMPANY=" + parseInt(authUser.company,10)
		+ "&EMD-EMPLOYEE=" + parseInt(authUser.employee,10)
		+ "&EMD-SEQ-NBR=" + parseInt(thisDep.seq_nbr,10)
		+ "&EMD-EMP-ADDRESS=N"
		+ "&EMD-ADDR1=" + escape(EmpInfo.addr1,1)
		+ "&EMD-ADDR2=" + escape(EmpInfo.addr2,1)
		+ "&EMD-ADDR3=" + escape(EmpInfo.addr3,1)
		+ "&EMD-ADDR4=" + escape(EmpInfo.addr4,1)
		+ "&EMD-CITY=" + escape(EmpInfo.city,1)
		+ "&EMD-STATE=" + escape(EmpInfo.state,1)
		+ "&EMD-ZIP=" + escape(EmpInfo.zip,1)
		+ "&EMD-COUNTRY-CODE=" + escape(EmpInfo.country_code,1);
		if (thisDep.hm_phone_nbr == "")
		{
			pObj.field = pObj.field + "&EMD-HM-PHONE-CNTRY=" + escape(EmpInfo.paemployee_hm_phone_cntry,1)
			+ "&EMD-HM-PHONE-NBR=" + escape(EmpInfo.paemployee_hm_phone_nbr,1);
  		}
 		pObj.field += "&PT-XMIT-NBR1=1";
 		if (appObj && (appObj.getAppVersion() != null) && (appObj.getAppVersion().toString() >= "09.00.01"))		
  			pObj.field += "&EMD-USER-ID=W"+parseInt(authUser.employee,10);
		pObj.func = "parent.DspMsg("+updateAll+")";
		if (!UpdateFlag)
    		UpdateFlag = true;
		Count++;
		AGS(pObj,"jsreturn");
	}
	else if (!UpdateHomeAddress && thisDep.emp_address != "H")
	{
		var pObj = new AGSObject(authUser.prodline, "HR13.1");
		pObj.event = "CHANGE";
		pObj.rtn = "MESSAGE";
		pObj.longNames = true;
		pObj.tds = false;
		pObj.field = "FC=C"
		+ "&EMD-COMPANY=" + parseInt(authUser.company,10)
		+ "&EMD-EMPLOYEE=" + parseInt(authUser.employee,10)
		+ "&EMD-SEQ-NBR=" + parseInt(thisDep.seq_nbr,10)
		+ "&EMD-EMP-ADDRESS=H"
		+ "&EMD-FIRST-NAME=" + escape(thisDep.first_name,1)
		+ "&EMD-LAST-NAME=" + escape(thisDep.last_name,1)
		+ "&EMD-REL-CODE=" + escape(thisDep.rel_code,1)
		+ "&EMD-PRIMARY-CARE=" + escape(thisDep.primary_care,1)
		+ "&EMD-DEP-TYPE=" + escape(thisDep.dep_type,1)
		+ "&EMD-SEX=" + escape(thisDep.sex,1)
		+ "&EMD-HM-PHONE-NBR=" + escape(thisDep.hm_phone_nbr,1)
		+ "&EMD-WK-PHONE-NBR=" + escape(thisDep.wk_phone_nbr,1)
		+ "&PT-XMIT-NBR1=1";
 		if (appObj && (appObj.getAppVersion() != null) && (appObj.getAppVersion().toString() >= "09.00.01")) 		
  			pObj.field += "&EMD-USER-ID=W"+parseInt(authUser.employee,10);					   
		pObj.func = "parent.DspMsg("+updateAll+")";
		if (!UpdateFlag)
    		UpdateFlag = true;
		Count++;
		AGS(pObj,"jsreturn");
	}
	else
	{
		Count++;
		DspMsg(updateAll);
	}
}

function DspMsg(updateAll)
{
    if (Count < DepInfo.length)
        UpdateDepend(updateAll);
    else
    {
      	if (!UpdateFlag)
       	{
      		setImageVisibility("dependentaddress_checkmark","visible");
        	parent.removeWaitAlert();
        	var refreshData = function()
        	{
        		parent.showWaitAlert(parent.getSeaPhrase("PROCESSING_WAIT","ESS"), function(){DspEmdepend();});
        	}
        	var alertResponse = parent.seaPageMessage(parent.getSeaPhrase("DEP_0","ESS"), "", "info", null, refreshData, true, getSeaPhrase("APPLICATION_ALERT","SEA"), true);
        	if (typeof(alertResponse) == "undefined" || alertResponse == null)
        	{	
        		if (parent.seaPageMessage == parent.alert)
        			refreshData();
        	}
       	}
    	else
       	 	ReloadEmdepend(false);
    }
}

function ReloadEmdepend(funcToCall)
{
	funcToCall = (funcToCall) ? String(funcToCall) : "";
	GetDepInfo(authUser.prodline,authUser.company,authUser.employee,"","DspEmdepend("+funcToCall+")","Active");
}

function DspEmdepend(funcToCall)
{
  	if (funcToCall)
		eval(funcToCall);
	else
	{
	 	if (UpdateFlag)
	 	{
	 		parent.removeWaitAlert();
    		parent.seaPageMessage(parent.getSeaPhrase("DEP_0","ESS"), null, null, "info", null, true, getSeaPhrase("APPLICATION_ALERT","SEA"), true);
	 	}	
	 	if (UpdateHomeAddress)
	   		showDependentsTask(true);
	 	if (!UpdateHomeAddress && !ReloadDone)
	 	{
	   		ReloadDone = true;
	   		if (AddType == "H")
		  		confirmDependentUpdate();
	   		else
		  		showDependentsTask(true);
	 	}
	}
}

function fitToScreen()
{
	if (typeof(window["styler"]) == "undefined" || window.styler == null)
		window.stylerWnd = findStyler(true);
	if (!window.stylerWnd)
		return;
	if (typeof(window.stylerWnd["StylerEMSS"]) == "function")
		window.styler = new window.stylerWnd.StylerEMSS();
	else
		window.styler = window.stylerWnd.styler;
	var mainFrame = document.getElementById("MAIN");
	var winObj = getWinSize();
	var winWidth = winObj[0];	
	var winHeight = winObj[1];
	var contentHeightBorder;
	var contentHeight;	
	var contentWidthBorder;
	var contentWidth;
	if (window.styler && window.styler.showInfor)
	{	
		contentWidth = winWidth - 10;
		contentWidthBorder = (navigator.appName.indexOf("Microsoft") >= 0) ? contentWidth + 5 : contentWidth + 2;				
		contentHeight = winHeight - 65;
		contentHeightBorder = contentHeight + 30;	
	}
	else if (window.styler && (window.styler.showLDS || window.styler.showInfor3))
	{
		contentWidth = winWidth - 20;
		contentWidthBorder = (window.styler.showInfor3) ? contentWidth + 7 : contentWidth + 17;		
		contentHeight = winHeight - 75;	
		contentHeightBorder = contentHeight + 30;		
	}
	else
	{
		contentWidth = winWidth - 10;
		contentWidthBorder = contentWidth;		
		contentHeight = winHeight - 60;
		contentHeightBorder = contentHeight + 24;		
	}
	mainFrame.style.width = winWidth + "px";
	mainFrame.style.height = winHeight + "px";
	try
	{
		if (self.MAIN.onresize && self.MAIN.onresize.toString().indexOf("setLayerSizes") >= 0)
			self.MAIN.onresize = null;			
	}
	catch(e) {}
	try
	{
		self.MAIN.document.getElementById("paneBorder").style.width = contentWidthBorder + "px";
		self.MAIN.document.getElementById("paneBodyBorder").style.width = contentWidth + "px";
		self.MAIN.document.getElementById("paneBorder").style.height = contentHeightBorder + "px";
		self.MAIN.document.getElementById("paneBodyBorder").style.height = contentHeight + "px";
		self.MAIN.document.getElementById("paneBody").style.width = contentWidth + "px";
		self.MAIN.document.getElementById("paneBody").style.height = contentHeight + "px";
	}
	catch(e) {}
	if (window.styler && window.styler.textDir == "rtl")
	{
		document.getElementById("dialog").style.left = "";
		document.getElementById("dialog").style.right = "20px";
	}		
}
</script>
</head>
<body style="overflow:hidden" onload="OpenMove()" onresize="fitToScreen()">
	<iframe id="MAIN" name="MAIN" title="Main Content" level="2" tabindex="0" src="/lawson/xhrnet/ui/headerpane.htm" style="position:absolute;left:0%;top:0px;width:100%;height:464px" frameborder="no" marginwidth="0" marginheight="0" scrolling="no"></iframe>
	<iframe id="dialog" name="dialog" title="Secondary Content" level="3" tabindex="0" src="/lawson/xhrnet/ui/headerpane.htm" style="position:absolute;left:20px;top:75px;width:300px;height:250px;z-index:100;visibility:hidden" allowtransparency="true" frameborder="no" marginwidth="0" marginheight="0" scrolling="no"></iframe>
	<iframe id="jsreturn" name="jsreturn" title="Empty" style="visibility:hidden;height:0px;width:0px;" src="/lawson/xhrnet/dot.htm" frameborder="no" marginwidth="0" marginheight="0" scrolling="no"></iframe>
	<iframe id="lawheader" name="lawheader" title="Empty" style="visibility:hidden;height:0px;width:0px;" src="/lawson/xhrnet/errmsg.htm" frameborder="no" marginwidth="0" marginheight="0" scrolling="no"></iframe>
</body>
</html>
<!-- Version: 8-)@(#)@10.00.05.00.12 -->
<!-- $Header: /cvs/cvs_archive/applications/webtier/shr/src/xhrnet/address.htm,v 1.16.2.68 2014/02/17 21:29:54 brentd Exp $ -->
<!--************************************************************
 *                                                             *
 *                           NOTICE                            *
 *                                                             *
 *   THIS SOFTWARE IS THE PROPERTY OF AND CONTAINS             *
 *   CONFIDENTIAL INFORMATION OF INFOR AND/OR ITS              *
 *   AFFILIATES OR SUBSIDIARIES AND SHALL NOT BE DISCLOSED     *
 *   WITHOUT PRIOR WRITTEN PERMISSION. LICENSED CUSTOMERS MAY  *
 *   COPY AND ADAPT THIS SOFTWARE FOR THEIR OWN USE IN         *
 *   ACCORDANCE WITH THE TERMS OF THEIR SOFTWARE LICENSE       *
 *   AGREEMENT. ALL OTHER RIGHTS RESERVED.                     *
 *                                                             *
 *   (c) COPYRIGHT 2014 INFOR.  ALL RIGHTS RESERVED.           *
 *   THE WORD AND DESIGN MARKS SET FORTH HEREIN ARE            *
 *   TRADEMARKS AND/OR REGISTERED TRADEMARKS OF INFOR          *
 *   AND/OR ITS AFFILIATES AND SUBSIDIARIES. ALL               *
 *   RIGHTS RESERVED.  ALL OTHER TRADEMARKS LISTED HEREIN ARE  *
 *   THE PROPERTY OF THEIR RESPECTIVE OWNERS.                  *
 *                                                             *
 ************************************************************-->
