<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=IE8">
<meta charset="utf-8">
<title>Transaction Library</title>
<script>
var UpdateType, gfldnbr, gmsgnbr, gmsg, INDEX, size;
var reqIndex = -1;

function Obj()
{}

function V(fld, val)
{
	if (!val || Number(val) == 0)
		return;
	switch (UpdateType)
	{
		case "ECPV": ECPV(fld,val); break;
		case "PPV":	PPV(fld,val); break;
		case "EEC": EEC(fld,val); break;
		case "CCR": CCR(fld,val); break;
		case "DRPV": DRPV(fld,val); break;
	}
}

function ECPV(fld, val)
{
	if (val == "")
        return;
	switch (fld)
	{
		case "EPC-COMPANY": parent.ECPV.Company = val; break;
		case "EPC-EMPLOYEE": parent.ECPV.EmployeeCode = val; break;
		case "EMP-LABEL-NAME-1": parent.ECPV.EmployeeName = val; break;
		case "EMP-DEPT-NAME": parent.ECPV.DepartmentName = val; break;
		case "EMP-JOB-CODE-DESC": parent.ECPV.JobCodeDescription = val; break;
		case "EMP-POSITION-DESC": parent.ECPV.PositionDescription = val; break;
		case "EMP-DATE-HIRED": parent.ECPV.DateHired = val; break;
		case "HRH-BEG-DATE-POS": parent.ECPV.BeginningDatePosition = val; break;
		case "HRH-BEG-DATE-JOB": parent.ECPV.BeginningDateJob = val; break;
		case "REV-ACTUAL-DATE": parent.ECPV.ActualDate = val; break;
		case "PEM-NEXT-REVIEW": parent.ECPV.NextReview = val; break;
		case "OVERDUE-REVIEW-IND": parent.ECPV.OverdueReviewIndicator = val; break;
		case "PEM-NEXT-PHYSICAL": parent.ECPV.NextPhysical = val; break;
		case "OVERDUE-PHYSICAL-IND": parent.ECPV.OverduePhysicalIndicator = val; break;
		case "WORK-RESTRICT-IND": parent.ECPV.WorkRestrictorIndicator = val; break;
		case "REQ-COMPET-IND": parent.ECPV.RequiredCompetencyIndicator = val; break;
		case "JOB-COMP": parent.ECPV.JobCompFlag = val; break;
		case "EMP-COMP": parent.ECPV.EmpCompFlag = val; break;
		case "SYSTEM-DATE": parent.ECPV.SystemDate = val; break;
		case "COM-TRAN-LIMIT": parent.ECPV.ComTransactionLimit = val; break;
		default: RequiredRecords(fld,val); break;
	}
}

function RequiredRecords(fld, val)
{
	if (parent.ECPV.ExitAgs)
		return;
	if (fld.indexOf("EPC-TYPE")>=0)
	{
		if (!val) 
		{
			parent.ECPV.ExitAgs = true;
			return;
		}
		reqIndex = parent.ECPV.ReqCompetencies.length;
		parent.ECPV.ReqCompetencies[reqIndex] = new ECPVArrayObject();
		parent.ECPV.ReqCompetencies[reqIndex].Type = val;
	}
	else if (fld.indexOf("EPC-CODE")>=0)
		parent.ECPV.ReqCompetencies[reqIndex].Code = val;
	else if (fld.indexOf("EPC-EMP-APP")>=0)
		parent.ECPV.ReqCompetencies[reqIndex].EmpApp = val;
	else if (fld.indexOf("EPC-SUBJECT")>=0)
		parent.ECPV.ReqCompetencies[reqIndex].Subject = val;
	else if (fld.indexOf("EPC-SEQ-NBR")>=0)
		parent.ECPV.ReqCompetencies[reqIndex].SeqNbr = val;
	else if (fld.indexOf("PCO-DESCRIPTION")>=0)
		parent.ECPV.ReqCompetencies[reqIndex].Description = val;
	else if (fld.indexOf("EPC-DATE-ACQUIRED")>=0)
		parent.ECPV.ReqCompetencies[reqIndex].Acquired = val;
	else if (fld.indexOf("EPC-RENEW-DATE")>=0)
		parent.ECPV.ReqCompetencies[reqIndex].RenewDate = val;
	else if (fld.indexOf("OVRDUE-CERT-IND")>=0)
		parent.ECPV.ReqCompetencies[reqIndex].OverdueInd = val;
	else if (fld.indexOf("UPDATE-FLAG")>=0)
		parent.ECPV.ReqCompetencies[reqIndex].UpdateFlag = val;
}

function PPV(fld, val)
{
	if (val == "")
        return;
	switch (fld)
	{
		case "COMPANY": parent.PPV.Company=val; break;
		case "SEARCH-TYPE":	parent.PPV.SearchType=val; break;
		case "EMP-EMPLOYEE": parent.PPV.EmployeeCode=val; break
		case "EMP-LABEL-NAME-1": parent.PPV.EmployeeName=val; break;
		case "EMP-FICA-NBR": parent.PPV.FicaNbr=val; break
		case "EMP-ADDR1": parent.PPV.Address=val; break
		case "PEM-BIRTHDATE": parent.PPV.BirthDate=val; break
		case "PEM-BIRTH-CITY": parent.PPV.BirthCity=val; break
		case "PEM-BIRTH-STATE":	parent.PPV.BirthState=val; break
		case "EMP-CITY": parent.PPV.City=val; break
		case "EMP-STATE": parent.PPV.State=val; break
		case "EMP-ZIP":	parent.PPV.Zip=val; break;
		case "SYSTEM-DATE": parent.PPV.SystemDate = val; break;
		default: ProfessionalRecords(fld,val); break;
	}
}

function ProfessionalRecords(fld, val)
{
    if (isNaN(fld.charAt(fld.length-1)))
    	return;
	for (var j=1; j<=65; j++)
	{
		if (fld == "WEB-SORT"+j)
		{
			INDEX = parseInt(val,10);
			if (typeof(parent.PPV.WebSort[INDEX]) == "undefined")
			{
				parent.PPV.WebSort[INDEX] = new PPVWebSortArrayObject()
				parent.PPV.WebSort[INDEX].ProfileRecords[parent.PPV.WebSort[INDEX].ProfileRecords.length] = new PPVArrayObject();
			}
			else
				parent.PPV.WebSort[INDEX].ProfileRecords[parent.PPV.WebSort[INDEX].ProfileRecords.length] = new PPVArrayObject();
			break;
		}
		else if (fld == "EPC-TYPE"+j)
		{	
			parent.PPV.WebSort[INDEX].ProfileRecords[parent.PPV.WebSort[INDEX].ProfileRecords.length-1].Type = val;
			break;
		}	
		else if (fld == "EPC-CODE"+j)
		{	
			parent.PPV.WebSort[INDEX].ProfileRecords[parent.PPV.WebSort[INDEX].ProfileRecords.length-1].Code = val;
			break;
		}	
		else if (fld == "EPC-EMP-APP"+j)
		{	
			parent.PPV.WebSort[INDEX].ProfileRecords[parent.PPV.WebSort[INDEX].ProfileRecords.length-1].EmpApp = val;
			break;
		}	
		else if (fld == "EPC-SUBJECT"+j)
		{	
			parent.PPV.WebSort[INDEX].ProfileRecords[parent.PPV.WebSort[INDEX].ProfileRecords.length-1].Subject = val;
			break;
		}	
		else if (fld == "EPC-SEQ-NBR"+j)
		{	
			parent.PPV.WebSort[INDEX].ProfileRecords[parent.PPV.WebSort[INDEX].ProfileRecords.length-1].SeqNbr = val;
			break;
		}	
		else if (fld == "DESC1"+j)
		{	
			parent.PPV.WebSort[INDEX].ProfileRecords[parent.PPV.WebSort[INDEX].ProfileRecords.length-1].Desc1 = val;
			break;
		}	
		else if (fld == "DESC2"+j)
		{	
			parent.PPV.WebSort[INDEX].ProfileRecords[parent.PPV.WebSort[INDEX].ProfileRecords.length-1].Desc2 = val;
			break;
		}	
		else if (fld == "DATE1"+j)
		{	
			parent.PPV.WebSort[INDEX].ProfileRecords[parent.PPV.WebSort[INDEX].ProfileRecords.length-1].Date1 = val;
			break;
		}	
		else if (fld == "DATE2"+j)
		{	
			parent.PPV.WebSort[INDEX].ProfileRecords[parent.PPV.WebSort[INDEX].ProfileRecords.length-1].Date2 = val;
			break;
		}	
	}
}

function EEC(fld, val)
{
	if (val == "")
        return;
	switch (fld)
	{
		case "COMPANY": parent.EEC.Company = val; break;
		case "HSU-EMPLOYEE": parent.EEC.EmployeeCode = val; break;
		case "HSU-LABEL-NAME-1": parent.EEC.EmployeeLabelName = val; break;
		case "HSU-LAST-NAME": parent.EEC.EmployeeLastName = val; break;
		case "EXPIRATION-DATE": parent.EEC.ExpirationDate = val; break;
		case "COMP-TYPE": parent.EEC.CompType = val; break;
		case "EXPIRE-TYPE":	parent.EEC.ExpireType = val; break;
		case "CODE": parent.EEC.Code = val; break;
		case "SYSTEM-DATE": parent.EEC.SystemDate = val; break;
		case "TRAN-LIMIT": parent.EEC.TransactionLimit = val; break;
		case "LAST-HSU-CODE": parent.EEC.NextSupervisor = val; break;
		case "LAST-LAST-NAME": parent.EEC.NextLastName = val; break;
		case "LAST-FIRST-NAME":	parent.EEC.NextFirstName = val; break;
		case "LAST-MIDDLE-INIT": parent.EEC.NextMiddleInit = val; break;
		case "LAST-EMPLOYEE": parent.EEC.NextEmployee = (val==0)?"":val; break;
		default: ExpiredRecords(fld,val); break;
	}
}

function ExpiredRecords(fld, val)
{
	if (parent.EEC.ExitAgs)
		return;
	if (fld.indexOf("EMP-EMPLOYEE")>=0)
	{
		if (!val) 
		{
			parent.EEC.ExitAgs = true;
			return;
		}
		Index = parent.EEC.ExpCompetencies.length;
		parent.EEC.ExpCompetencies[Index] = new EECArrayObject()
		parent.EEC.ExpCompetencies[Index].Employee = val;
	}
	else if (fld.indexOf("EPC-TYPE")>=0)
		parent.EEC.ExpCompetencies[Index].Type = val;
	else if (fld.indexOf("EPC-CODE")>=0)
		parent.EEC.ExpCompetencies[Index].Code = val;
	else if (fld.indexOf("EMP-LABEL-NAME-1")>=0)
		parent.EEC.ExpCompetencies[Index].LabelName = val;
	else if (fld.indexOf("EMP-LAST-NAME")>=0)
		parent.EEC.ExpCompetencies[Index].LastName = val;
	else if (fld.indexOf("JBC-DESCRIPTION")>=0)
		parent.EEC.ExpCompetencies[Index].Description = val;
	else if (fld.indexOf("EPC-EMP-APP")>=0)
		parent.EEC.ExpCompetencies[Index].App = val;
	else if (fld.indexOf("EPC-SEQ-NBR")>=0)
		parent.EEC.ExpCompetencies[Index].SeqNum = val;
	else if (fld.indexOf("EPC-SUBJECT")>=0)
		parent.EEC.ExpCompetencies[Index].Subject = val;
	else if (fld.indexOf("PCO-DESCRIPTION")>=0)
		parent.EEC.ExpCompetencies[Index].PcoDescription = val;
	else if (fld.indexOf("EPC-RENEW-DATE")>=0)
		parent.EEC.ExpCompetencies[Index].RenewDate = val;
	else if (fld.indexOf("UPDATE-FLAG")>=0)
		parent.EEC.ExpCompetencies[Index].UpdateFlag = val;
}

function CCR(fld, val)
{
	if (val == "")
        return;
	switch (fld)
	{
		case "COMPANY": parent.CCR.Company = val; break;
		case "HSU-EMPLOYEE": parent.CCR.EmployeeCode = val; break;
		case "HSU-LABEL-NAME-1": parent.CCR.EmployeeName = val; break;
		case "EXPIRATION-DATE": parent.CCR.ExpirationDate = val; break;
		case "EXPIRE-TYPE": parent.CCR.ExpireType = val; break;
		case "DIR-RPTS": parent.CCR.DirectReports = val; break;
		case "SYSTEM-DATE": parent.CCR.SystemDate = val; break;
		default: AllExpiredComps(fld,val); break;
	}
}

function AllExpiredComps(fld, val)
{
    if (isNaN(fld.charAt(fld.length-1)))
		return;
	if (typeof(parent.CCR.CompCompliances) == "undefined")
		parent.CCR.CompCompliances = new Array();
    if (fld.indexOf("EPC-TYPE") != -1) 
    {
    	if (typeof(parent.CCR.CompCompliances[parent.CCR.CompCompliances.length]) == "undefined")
			parent.CCR.CompCompliances[parent.CCR.CompCompliances.length] = new CCRArrayObject();
		parent.CCR.CompCompliances[parent.CCR.CompCompliances.length-1].Type = val;
    } 
    else if (fld.indexOf("EPC-CODE") != -1)
		parent.CCR.CompCompliances[parent.CCR.CompCompliances.length-1].Code = val;
	else if (fld.indexOf("PCO-DESCRIPTION") != -1)
		parent.CCR.CompCompliances[parent.CCR.CompCompliances.length-1].Description = val;
    else if (fld.indexOf("NBR-EMPS-REQ") != -1)
		parent.CCR.CompCompliances[parent.CCR.CompCompliances.length-1].NumEmployees = val;
    else if (fld.indexOf("NBR-EMPS-EXP") != -1)
		parent.CCR.CompCompliances[parent.CCR.CompCompliances.length-1].NumExpired = val;
    else if (fld.indexOf("COMPLIANCE-PCT") != -1)
		parent.CCR.CompCompliances[parent.CCR.CompCompliances.length-1].CompPercentage = val;
}

function DRPV(fld, val)
{
	if (val == "")
        return;
	switch (fld)
	{
		case "COMPANY": parent.DRPV.Company = val; break;
		case "HSU-EMPLOYEE": parent.DRPV.EmployeeCode = val; break;
		case "HSU-LABEL-NAME-1": parent.DRPV.EmployeeName = val; break;
		case "SYSTEM-DATE": parent.DRPV.SystemDate = val; break;
		case "PT-COMPANY": parent.DRPV.LastCompany = val; break;
		case "PT-HSU-EMPLOYEE": parent.DRPV.LastSupervisor = (val==0)?"":val; break;
		case "PT-HSU-CODE": parent.DRPV.LastSupervisorCode 	= val; break;
		case "PT-EMPLOYEE":	parent.DRPV.LastReportEmployee = val; break;
		case "PT-LAST-NAME": parent.DRPV.LastReportLastName = val; break;
		case "PT-FIRST-NAME": parent.DRPV.LastReportFirstName	= val; break;
		case "PT-MIDDLE-INIT": parent.DRPV.LastReportMiddleInit = val; break;
		default: DirectReportsRecords(fld,val); break;
	}
}

var lineIndex = 0;
function DirectReportsRecords(fld, val)
{
	if (fld.indexOf("EMP-EMPLOYEE") >= 0)
	{
		lineIndex++;
		size = parent.DRPV.DirectReports.length;
		if (typeof(parent.DRPV.DirectReports[size]) == "undefined")
			parent.DRPV.DirectReports[size] = new DRPVArrayObject();
		parent.DRPV.DirectReports[size].Employee = val;
	}
	else if (fld.indexOf("EMP-LABEL-NAME-1") >= 0)
		parent.DRPV.DirectReports[size].LabelName = val;
	else if (fld.indexOf("EMP-LAST-NAME") >= 0)
		parent.DRPV.DirectReports[size].LastName = val;
	else if (fld.indexOf("JBC-DESCRIPTION") >= 0)
		parent.DRPV.DirectReports[size].JobDescription = val;
	else if (fld.indexOf("JBC-WEB-TYPE") >= 0)
		parent.DRPV.DirectReports[size].WebType = val;
}

function PPVObject()
{
	this.Company = ' ';
	this.SearchType = ' ';
	this.EmployeeCode = ' ';
	this.EmployeeName = ' ';
	this.FicaNbr = ' ';
	this.Address = ' ';
	this.BirthDate = ' ';
	this.BirthCity = ' ';
	this.BirthState = ' ';
	this.City = ' ';
	this.State = ' ';
	this.Zip = ' ';
	this.WebSort = new Array();
	this.SystemDate = ' ';
}

function PPVWebSortArrayObject()
{
	this.ProfileRecords = new Array(0);
}

function PPVArrayObject()
{
	this.Type = ' ';
	this.Code = ' ';
	this.EmpApp = ' ';
	this.Subject = ' ';
	this.SeqNbr = ' ';
	this.Desc1 = ' ';
	this.Desc2 = ' ';
	this.Date1 = ' ';
	this.Date2 = ' ';
}

function ECPVObject()
{
	this.Company = ' ';
	this.EmployeeCode = ' ';
	this.EmployeeName = ' ';
	this.DepartmentName = ' ';
	this.JobCodeDescription = ' ';
	this.PositionDescription = ' ';
	this.DateHired = ' ';
	this.BeginningDatePosition = ' ';
	this.BeginningDateJob = ' ';
	this.ActualDate = ' ';
	this.NextReview = ' ';
	this.OverdueReviewIndicator = ' ';
	this.NextPhysical = ' ';
	this.OverduePhysicalIndicator = ' ';
	this.WorkRestrictorIndicator = ' ';
	this.RequiredCompetencyIndicator = ' ';
	this.ReqCompetencies = new Array();
	this.SystemDate = ' ';
	this.JobCompFlag = ' ';
	this.EmpCompFlag = ' ';
	this.ExitAgs = false;
}

function ECPVArrayObject()
{
	this.Type = ' ';
	this.Code = ' ';
	this.EmpApp = ' ';
	this.Subject = ' ';
	this.SeqNbr = ' ';
	this.Description = ' ';
	this.Acquired = ' ';
	this.RenewDate = ' ';
	this.OverdueInd = ' ';
	this.UpdateFlag	= 'N';
	this.ComTransactionLimit = ' ';
}

function DRPVArrayObject()
{
	this.Employee = ' ';
	this.LabelName = ' ';
	this.LastName = ' ';
	this.JobDescription = ' ';
	this.WebType = ' ';
	this.SystemDate = ' ';
}

function DRPVObject()
{
	this.Company = ' ';
	this.EmployeeCode = ' ';
	this.EmployeeName = ' ';
	this.LastCompany = ' ';
	this.LastSupervisor	= ' ';
	this.LastSupervisorCode = ' ';
	this.LastReportEmployee	= ' ';
	this.LastReportLastName	= ' ';
	this.LastReportFirstName = ' ';
	this.LastReportMiddleInit = ' ';
	this.DirectReports = new Array();
}

function EECObject()
{
	this.Company = ' ';
	this.EmployeeCode = ' ';
	this.EmployeeLabelName = ' ';
	this.EmployeeLastName = ' ';
	this.ExpirationDate = ' ';
	this.ExpireType	= ' ';
	this.CompType = ' ';
	this.Code = ' ';
	this.SystemDate = ' ';
	this.TransactionLimit = ' '
	this.NextSupervisor = ' ';
	this.NextLastName = ' ';
	this.NextFirstName = ' ';
	this.NextMiddleInit	= ' ';
	this.NextEmployee = ' ';
	this.ExpCompetencies = new Array();
	this.ExitAgs = false;
}

function EECArrayObject()
{
	this.Employee = ' ';
	this.Type = ' ';
	this.Code = ' ';
	this.LabelName = ' ';
	this.LastName = ' ';
	this.Description = ' ';
	this.App = ' ';
	this.SeqNum = ' ';
	this.Subject = ' ';
	this.PcoDescription = ' ';
	this.RenewDate = ' ';
	this.UpdateFlag	= 'N';
}

function CCRObject()
{
	this.Company = ' ';
	this.EmployeeCode = ' ';
	this.EmployeeName = ' ';
	this.ExpirationDate = ' ';
	this.ExpireType	= ' ';
	this.DirectReports = ' ';
	this.CompCompliances = new Array();
	this.CurrentIndex = -1;
}

function CCRArrayObject()
{
	this.Type = ' ';
	this.Code = ' ';
	this.Description = ' ';
	this.NumExpired	= '0';
	this.NumEmployees = '0';
	this.CompPercentage = '0';
}

function DataReturned(fldNbr, msgNbr, msg)
{
	gfldnbr = fldNbr;
	gmsgnbr = msgNbr;
	gmsg = msg;
}
</script>
</head>
<body></body>
</html>
<!-- Version: 8-)@(#)@10.00.05.00.12 -->
<!-- $Header: /cvs/cvs_archive/applications/webtier/shr/src/xhrnet/credentials/complawheader.htm,v 1.10.2.17 2014/02/21 22:52:16 brentd Exp $ -->
<!--************************************************************
 *                                                             *
 *                           NOTICE                            *
 *                                                             *
 *   THIS SOFTWARE IS THE PROPERTY OF AND CONTAINS             *
 *   CONFIDENTIAL INFORMATION OF INFOR AND/OR ITS              *
 *   AFFILIATES OR SUBSIDIARIES AND SHALL NOT BE DISCLOSED     *
 *   WITHOUT PRIOR WRITTEN PERMISSION. LICENSED CUSTOMERS MAY  *
 *   COPY AND ADAPT THIS SOFTWARE FOR THEIR OWN USE IN         *
 *   ACCORDANCE WITH THE TERMS OF THEIR SOFTWARE LICENSE       *
 *   AGREEMENT. ALL OTHER RIGHTS RESERVED.                     *
 *                                                             *
 *   (c) COPYRIGHT 2014 INFOR.  ALL RIGHTS RESERVED.           *
 *   THE WORD AND DESIGN MARKS SET FORTH HEREIN ARE            *
 *   TRADEMARKS AND/OR REGISTERED TRADEMARKS OF INFOR          *
 *   AND/OR ITS AFFILIATES AND SUBSIDIARIES. ALL               *
 *   RIGHTS RESERVED.  ALL OTHER TRADEMARKS LISTED HEREIN ARE  *
 *   THE PROPERTY OF THEIR RESPECTIVE OWNERS.                  *
 *                                                             *
 ************************************************************-->
