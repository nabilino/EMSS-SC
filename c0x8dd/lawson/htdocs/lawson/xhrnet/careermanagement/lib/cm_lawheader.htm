<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=IE8">
<meta charset="utf-8">
<title>Transaction Library</title>
<script>
var competencyCounter
var certificationCounter
var educationCounter
var DetailLine = 0
var DetailLine2 = 0
var gmsgnbr = ''
var gmsg 	= ''
var gfldnbr = ''
var UpdateType = '';
var endOfLines = false;

function V(fld, val)
{
	switch(UpdateType)
	{
		case "PA08_2": V_PA08(fld, val);
			break;
		case "PA08_3": V_PA08(fld, val);
			break;
		case "HS51_1": V_HS51(fld,val);
			break;
		case "HS50_3": V_HS50_3(fld,val);
			break;
		case "HS50_5": V_HS50_5(fld,val);
			break;
		case "HS10_1": V_HS10_1(fld,val);
			break;
		case "HS52_1": V_HS52_1(fld,val);
			break;
		case "TR02_1": V_TR02_1(fld,val);
			break;
		default: V_HS50(fld, val);
	}
}

function V_PA08(fld, val)
{
	switch(fld)
	{
		case "JBR-COMPANY":
			parent.JobDetail.company = val;
			break;
		case "JBR-JOB-CODE":
			parent.JobDetail.jobCode = val;
			break;
		case "JBR-POSITION":
			parent.JobDetail.position = val;
			break;
		default: GrabOther_PA08_Detail(fld, val);
			break;
	}
}

function GrabOther_PA08_Detail(fld, val)
{
	var Index = parent.JobDetail.Detail.length-1;

	if(fld.indexOf("JBR-TYPE") >=0)
	{
		DetailLine++;
		parent.JobDetail.Detail[++Index] = new parent.JobDetailDetailObject()
	}

	if(fld == "JBR-TYPE"+DetailLine)
		parent.JobDetail.Detail[Index].type = val;
	else if(fld == "JBR-PERS-CODE"+DetailLine)
		parent.JobDetail.Detail[Index].persCode = val;
	else if(fld == "PCO-DESCRIPTION"+DetailLine)
		parent.JobDetail.Detail[Index].description = val;
	else if(fld == "JBR-REQUIRED-FLAG"+DetailLine)
		parent.JobDetail.Detail[Index].requiredFlag = val;
	else if(fld == "JBR-PCT-OF-TIME"+DetailLine)
		parent.JobDetail.Detail[Index].pctOfTime = val;
}

function V_HS51(fld, val)
{
	switch(fld)
	{
		case "TC":
		case "FC":
		case "JOB-MAX1":
		case "JOB-MAX2":
		case "JOB-CNT1":
		case "LAST-INDEX-USED":	break;
		case "COMPANY":
			parent.QualificationJobList.company = val;
			break;
		case "EMPLOYEE":
			parent.QualificationJobList.employee = val;
			break;
		case "JOB-ESSENTIAL":
			parent.QualificationJobList.jobEssential = val;
			break;
		case "QUAL-MAX":
			parent.QualificationJobList.qualMax = val;
			break;
		default: GrabOther_HS51_Detail(fld, val);
			break;
	}
}

function GrabOther_HS51_Detail(fld, val)
{
	var Index = parent.QualificationJobList.Detail.length-1;

	if(fld.indexOf("QUAL-TYPE") >=0)
	{
		DetailLine++;
		parent.QualificationJobList.Detail[++Index] = new parent.QualificationJobDetailObject();
	}

	if(fld == "QUAL-TYPE"+DetailLine)
		parent.QualificationJobList.Detail[Index].qualType = val;
	else if(fld == "QUAL-CODE"+DetailLine)
		parent.QualificationJobList.Detail[Index].qualCode = val;
	else if(fld == "QUAL-PROFIC"+DetailLine)
		parent.QualificationJobList.Detail[Index].qualProfic = val;
	else
	{
		if (typeof(parent.QualificationJobList.Detail[Index])!="undefined" && parent.QualificationJobList.Detail[Index]!=null)
			var DescIndex = parent.QualificationJobList.Detail[Index].JobDescs.length-1;
		else
		{
			Index = 0;
			DetailLine = 1;
			parent.QualificationJobList.Detail[0] = new parent.QualificationJobDetailObject();
			var DescIndex = parent.QualificationJobList.Detail[0].JobDescs.length-1;
		}

		if(fld.indexOf("JOB-CODE") >=0)
		{
			var LineNbr = fld.search(/\d/)
			DetailLine2 = (LineNbr!=-1)?fld.substring(LineNbr,fld.length):"0"
			parent.QualificationJobList.Detail[Index].JobDescs[++DescIndex] = new parent.QualificationJobDescObject();
		}

		if(fld == "JOB-CODE"+String(DetailLine2))
			parent.QualificationJobList.Detail[Index].JobDescs[DescIndex].jobCode = val;
		else if(fld == "DESCRIPTION"+String(DetailLine2))
			parent.QualificationJobList.Detail[Index].JobDescs[DescIndex].description = val;
	}
}

function V_HS50(fld, val)
{
	switch(fld)
	{
		case "TC": break;
		case "FC": break;
		case "DETAIL-MAX": 		parent.CareerProfile.detailMax = val; break;
		case "COMPANY": 		parent.CareerProfile.company = val;	break;
		case "EMPLOYEE": 		parent.CareerProfile.employee = val; break;
		case "REQUESTOR": 		parent.CareerProfile.requestor = val; break;
		case "ESSENTIAL": 		parent.CareerProfile.essential = val; break;
		case "EMP-PROFILE": 	parent.CareerProfile.empProfile = val; break;
		case "EXPIRE-DAYS": 	parent.CareerProfile.expireDays = val; break;
		case "JOB-COMP-FLAG": 	parent.CareerProfile.jobCompFlag = val;	break;
		case "EMP-COMP-FLAG": 	parent.CareerProfile.empCompFlag = val;	break;
		case "JOB-DETAIL-FLAG": parent.CareerProfile.jobDetailFlag = val;break;
		case "JOB-DESC-FL":		parent.CareerProfile.jobDescFlag = val;	break;
		case "POS-DETAIL-FLAG": parent.CareerProfile.posDetailFlag = val;break;
		case "POSITION": 		parent.CareerProfile.position = val; break;
		case "POS-DESC": 		parent.CareerProfile.posDesc = val;	break;
		case "JOB-CODE": 		parent.CareerProfile.jobCode = val;	break;
		case "JBC-DESC": 		parent.CareerProfile.jbcDesc = val;	break;
		case "COURSE-GAP-FLAG": parent.CareerProfile.courseGapFlag = val; break;
		case "CRSCNT":			parent.CareerProfile.courseCount = val; break;
		case "NEXT-REVIEW":		parent.CareerProfile.NextReviewDate = val; break;
		case "MIN-GRPH":		parent.CareerProfile.MinGrph = val;break;
		case "MAX-GRPH":		parent.CareerProfile.MaxGrph = val;break;
		default: GetOtherInformation(fld, val)
	}
}

function GetOtherInformation(fld, val)
{
	// PT 152528. Return if we have no more records to store.  The Transaction servlet w/ XML output
	// returns blank records, and we end up overwriting the last record with blank values.
    if(DetailLine == 0)
        endOfLines = false;
    else if(endOfLines)
        return;

	if(fld != "SORT-TYPE" && fld.indexOf("SORT") >=0)
		DetailLine++;

	if("SORT" + DetailLine == fld)
	{
		if(val == 1)
		{
			competencyCounter = parent.CareerProfile.CompetencyDetail.length
			certificationCounter = -1;
			educationCounter = -1;
			parent.CareerProfile.CompetencyDetail[competencyCounter] = new parent.DetailObject()
			parent.CareerProfile.CompetencyDetail[competencyCounter].sort = val;
		}
		else if(val == 2)
		{
			certificationCounter = parent.CareerProfile.CertificationDetail.length
			competencyCounter = -1;
			educationCounter = -1;
			parent.CareerProfile.CertificationDetail[certificationCounter] = new parent.DetailObject()
			parent.CareerProfile.CertificationDetail[certificationCounter].sort = val;
		}
		else if(val == 3)
		{
			educationCounter = parent.CareerProfile.EducationDetail.length
			competencyCounter = -1;
			certificationCounter = -1;
			parent.CareerProfile.EducationDetail[educationCounter] = new parent.DetailObject()
			parent.CareerProfile.EducationDetail[educationCounter].sort = val;
		}
        else
            endOfLines = true;
	}
	else if("WEIGHT" + DetailLine == fld)
	{
		if(competencyCounter >=0)
			parent.CareerProfile.CompetencyDetail[competencyCounter].weight = val;
		else if(certificationCounter >=0)
			parent.CareerProfile.CertificationDetail[certificationCounter].weight = val;
		else if(educationCounter >=0)
			parent.CareerProfile.EducationDetail[educationCounter].weight = val;
	}
	else if("TYPE" + DetailLine == fld)
	{
		if(competencyCounter >=0)
			parent.CareerProfile.CompetencyDetail[competencyCounter].type = val;
		else if(certificationCounter >=0)
			parent.CareerProfile.CertificationDetail[certificationCounter].type = val;
		else if(educationCounter >=0)
			parent.CareerProfile.EducationDetail[educationCounter].type = val;
	}
	else if("CODE" + DetailLine == fld)
	{
		if(competencyCounter >=0)
			parent.CareerProfile.CompetencyDetail[competencyCounter].code = val;
		else if(certificationCounter >=0)
			parent.CareerProfile.CertificationDetail[certificationCounter].code = val;
		else if(educationCounter >=0)
			parent.CareerProfile.EducationDetail[educationCounter].code = val;
	}
	else if("SUBJECT" + DetailLine == fld)
	{
		if(competencyCounter >=0)
			parent.CareerProfile.CompetencyDetail[competencyCounter].subject = val;
		else if(certificationCounter >=0)
			parent.CareerProfile.CertificationDetail[certificationCounter].subject = val;
		else if(educationCounter >=0)
			parent.CareerProfile.EducationDetail[educationCounter].subject = val;
	}
	else if("DESCRIPTION" + DetailLine == fld)
	{
		if(competencyCounter >=0)
			parent.CareerProfile.CompetencyDetail[competencyCounter].description = val;
		else if(certificationCounter >=0)
			parent.CareerProfile.CertificationDetail[certificationCounter].description = val;
		else if(educationCounter >=0)
			parent.CareerProfile.EducationDetail[educationCounter].description = val;
	}
	else if("ESSENTIAL-REQ" + DetailLine == fld)
	{
		if(competencyCounter >=0)
			parent.CareerProfile.CompetencyDetail[competencyCounter].essentialReq = val;
		else if(certificationCounter >=0)
			parent.CareerProfile.CertificationDetail[certificationCounter].essentialReq = val;
		else if(educationCounter >=0)
			parent.CareerProfile.EducationDetail[educationCounter].essentialReq = val;
	}
	else if("EMP-HAS-CODE" + DetailLine == fld)
	{
		if(competencyCounter >=0)
			parent.CareerProfile.CompetencyDetail[competencyCounter].empHasCode = val;
		else if(certificationCounter >=0)
			parent.CareerProfile.CertificationDetail[certificationCounter].empHasCode = val;
		else if(educationCounter >=0)
			parent.CareerProfile.EducationDetail[educationCounter].empHasCode = val;
	}
	else if("UPDATE-FLAG" + DetailLine == fld)
	{
		if(competencyCounter >=0)
			parent.CareerProfile.CompetencyDetail[competencyCounter].updateFlag = val;
		else if(certificationCounter >=0)
			parent.CareerProfile.CertificationDetail[certificationCounter].updateFlag = val;
		else if(educationCounter >=0)
			parent.CareerProfile.EducationDetail[educationCounter].updateFlag = val;
	}
	else if("JOB-PROFIC" + DetailLine == fld)
	{
		if(competencyCounter >=0)
			parent.CareerProfile.CompetencyDetail[competencyCounter].jobProfic = val;
		else if(certificationCounter >=0)
			parent.CareerProfile.CertificationDetail[certificationCounter].jobProfic = val;
		else if(educationCounter >=0)
			parent.CareerProfile.EducationDetail[educationCounter].jobProfic = val;
	}
	else if("EMP-PROFIC" + DetailLine == fld)
	{
		if(competencyCounter >=0)
			parent.CareerProfile.CompetencyDetail[competencyCounter].empProfic = val;
		else if(certificationCounter >=0)
			parent.CareerProfile.CertificationDetail[certificationCounter].empProfic = val;
		else if(educationCounter >=0)
			parent.CareerProfile.EducationDetail[educationCounter].empProfic = val;
	}
	else if("EMP-PROFIC-DESC" + DetailLine == fld)
	{
		if(competencyCounter >=0)
			parent.CareerProfile.CompetencyDetail[competencyCounter].empProficDesc = val;
		else if(certificationCounter >=0)
			parent.CareerProfile.CertificationDetail[certificationCounter].empProficDesc = val;
		else if(educationCounter >=0)
			parent.CareerProfile.EducationDetail[educationCounter].empProficDesc = val;
	}
	else if("EPRF-GRPH" + DetailLine == fld)
	{
		if(competencyCounter >=0)
			parent.CareerProfile.CompetencyDetail[competencyCounter].EprfGrph = val;
		else if(certificationCounter >=0)
			parent.CareerProfile.CertificationDetail[certificationCounter].EprfGrph = val;
		else if(educationCounter >=0)
			parent.CareerProfile.EducationDetail[educationCounter].EprfGrph = val;
	}
	else if("JPRF-GRPH" + DetailLine == fld)
	{
		if(competencyCounter >=0)
			parent.CareerProfile.CompetencyDetail[competencyCounter].JprfGrph = val;
		else if(certificationCounter >=0)
			parent.CareerProfile.CertificationDetail[certificationCounter].JprfGrph = val;
		else if(educationCounter >=0)
			parent.CareerProfile.EducationDetail[educationCounter].JprfGrph = val;
	}
	else if("GAP" + DetailLine == fld)
	{
		if(competencyCounter >=0)
			parent.CareerProfile.CompetencyDetail[competencyCounter].gap = val;
		else if(certificationCounter >=0)
			parent.CareerProfile.CertificationDetail[certificationCounter].gap = val;
		else if(educationCounter >=0)
			parent.CareerProfile.EducationDetail[educationCounter].gap = val;
	}
	else if("GAP-LEVEL" + DetailLine == fld)
	{
		if(competencyCounter >=0)
			parent.CareerProfile.CompetencyDetail[competencyCounter].gapLevel = val;
		else if(certificationCounter >=0)
			parent.CareerProfile.CertificationDetail[certificationCounter].gapLevel = val;
		else if(educationCounter >=0)
			parent.CareerProfile.EducationDetail[educationCounter].gapLevel = val;
	}
	else if("SEQ-NBR" + DetailLine == fld)
	{
		if(competencyCounter >=0)
			parent.CareerProfile.CompetencyDetail[competencyCounter].seqNbr = val;
		else if(certificationCounter >=0)
			parent.CareerProfile.CertificationDetail[certificationCounter].seqNbr = val;
		else if(educationCounter >=0)
			parent.CareerProfile.EducationDetail[educationCounter].seqNbr = val;
	}
	else if("RENEW-DATE" + DetailLine == fld)
	{
		if(competencyCounter >=0)
			parent.CareerProfile.CompetencyDetail[competencyCounter].renewDate = val;
		else if(certificationCounter >=0)
			parent.CareerProfile.CertificationDetail[certificationCounter].renewDate = val;
		else if(educationCounter >=0)
			parent.CareerProfile.EducationDetail[educationCounter].renewDate = val;
	}
}

function V_HS50_3(fld, val)
{
	var Index = parent.TrainingCourses.length-1;

	if(fld.indexOf("SORT") == 0)
	{
		DetailLine++;
		parent.TrainingCourses[++Index] = new parent.TrainingCoursesObject();
	}

	if(fld == "SORT"+DetailLine)
		parent.TrainingCourses[Index].sort = val
	else if(fld == "COURSE-NBR"+DetailLine)
		parent.TrainingCourses[Index].courseNumber = val;
	else if(fld == "COURSE"+DetailLine)
		parent.TrainingCourses[Index].courseCode = val;
	else if(fld == "DESC"+DetailLine)
		parent.TrainingCourses[Index].courseDescription = val;
    else if(fld == "SES-FLAG"+DetailLine)
    	parent.TrainingCourses[Index].sessionFlag = val;
    else if(fld == "PREREQ-FLAG"+DetailLine)
    	parent.TrainingCourses[Index].preRequisitesFlag = val;
    else if(fld == "SESSION"+DetailLine)
    	parent.TrainingCourses[Index].session = val;
    else if(fld == "SES-START-DATE"+DetailLine)
    	parent.TrainingCourses[Index].sessionStartDate = val;
    else if(fld == "PREREQ-TYPE"+DetailLine)
    	parent.TrainingCourses[Index].preRequisitesType = val;
    else if(fld == "PREREQUISITE"+DetailLine)
    	parent.TrainingCourses[Index].preRequisite = val;
    else if(fld == "PREREQ-COMPANY"+DetailLine)
    	parent.TrainingCourses[Index].preRequisiteCompany = val;
    else if(fld == "SEQ"+DetailLine)
    	parent.TrainingCourses[Index].seq = val;
    else if(fld == "PT-SEQ-NUMBER" && val != 0)
   	{
      	parent.TrainingCourses.Next = true;
    	parent.TrainingCourses.ptseqnbr = val;
   	}
   	else if(fld == "PT-COURSE-DESC" && val != "")
   	{
   		parent.TrainingCourses.Next = true;
   		parent.TrainingCourses.ptCourseDesc = val;
   	}
  	else if(fld == "PT-COURSE-NBR" && val != 0)
   	{
   		parent.TrainingCourses.Next = true;
   		parent.TrainingCourses.ptCourseNumber = val;
   	}
   	else if(fld == "PT-SORT" && val != 0)
   	{
   		parent.TrainingCourses.Next = true;
   		parent.TrainingCourses.ptsort = val;
   	}
   	else if(fld == "PT-COURSE" && val != "")
   	{
   		parent.TrainingCourses.Next = true;
   		parent.TrainingCourses.ptCourse = val;
   	}
}

function V_HS50_5(fld, val)
{
	var Index = parent.JobInterests.length-1;

	if(fld == "JOB-CODE"+DetailLine)
	{
		DetailLine++;
		parent.JobInterests[++Index] = new parent.JobInterestsObject();
		parent.JobInterests[Index].jobCode = val;
	}
	else if(fld == "JOB-DESC"+DetailLine)
		parent.JobInterests[Index].jobDesc = val;
}

function V_HS10_1(fld,val)
{
	var Index = parent.DirectReports.length-1;

	if(fld.indexOf("PTF-EMPLOYEE") >= 0 && fld.indexOf("PT-") == -1)
	{
		DetailLine++;
		parent.DirectReports[++Index] = new parent.DirectReportsObject();
	}

	if(fld == "PTF-EMPLOYEE"+DetailLine)
		parent.DirectReports[Index].code = parseInt(Number(val),10);
	else if(fld == "PTF-FULL-NAME"+DetailLine)
		parent.DirectReports[Index].description = val;
	else if(fld == "S-JBC-DESC")
		parent.DirectReports.JobDescription = val;
	else if(fld == "S-POS-DESC")
		parent.DirectReports.PosDescription = val;
	else if(fld == "PT-FC" && val != "")
	{
		parent.DirectReports.Next = true;
		parent.DirectReports.NextFC = val;
	}
	else if(fld == "PT-PTF-EMPLOYEE" && val != 0)
	{
		parent.DirectReports.Next = true;
		parent.DirectReports.NextEmployee = val;
	}
	else if(fld == "PT-HSU-CODE" && val != "")
	{
		parent.DirectReports.Next = true;
		parent.DirectReports.NextSupervisorCode = val;
	}
	else if(fld == "PT-HSU-OP-CODE" && val != "")
	{
		parent.DirectReports.Next = true;
		parent.DirectReports.NextSupervisorOpCode = val;
	}
}

function V_HS52_1(fld,val)
{
	switch(fld)
	{
		case "EMPLOYEE-CNT":	parent.GroupProfile.EmployeeCount = val;
		case "DETAIL-MAX":		parent.GroupProfile.DetailMax = val;
		case "COMPANY":			parent.GroupProfile.Company = val;
		case "MANAGER":			parent.GroupProfile.Manager = val;
		case "JOB-CODE": 		parent.GroupProfile.JobCode = val;
		case "JBC-DESC":		parent.GroupProfile.JobDescription = val;
		case "ESSENTIAL":		parent.GroupProfile.Essential = val;
		case "DIR-REPORTS":		parent.GroupProfile.DirectReports = val;
		case "JOB-COMP-FLAG":	parent.GroupProfile.JobCompFlag = val;
		case "GAPS-EXIST":		parent.GroupProfile.GapsExists = val;
		case "DETAIL-CNT":		parent.GroupProfile.DetailCount = val;
		case "LAST-INDEX-USED":	parent.GroupProfile.LastIndexUsed = val;
		case "SUM-MIN-PROF":	parent.GroupProfile.SumMinProf = val;
		case "SUM-MAX-PROF":	parent.GroupProfile.SumMaxProf = val;
		default: GrabDetailForGroupProfile(fld,val);
	}
}

function GrabDetailForGroupProfile(fld,val)
{
	var Index = parent.GroupProfile.Detail.length-1;

	if(fld.indexOf("SORT") >= 0)
	{
		DetailLine++;
		Index++;
		parent.GroupProfile.Detail[Index] = new parent.GroupProfileDetailObject();
	}

	if(fld == "SORT"+DetailLine)
		parent.GroupProfile.Detail[Index].Sort = parseInt(Number(val),10);
	else if(fld == "EMP-EMPLOYEE"+DetailLine)
		parent.GroupProfile.Detail[Index].Employee = parseInt(Number(val),10);
	else if(fld == "DESCRIPTION"+DetailLine)
		parent.GroupProfile.Detail[Index].Description = val;
	else if(fld == "TYPE"+DetailLine)
		parent.GroupProfile.Detail[Index].Type = val;
	else if(fld == "CODE"+DetailLine)
		parent.GroupProfile.Detail[Index].Code = val;
	else if(fld == "JOB-PROFIC"+DetailLine)
		parent.GroupProfile.Detail[Index].JobProficiency = val;
	else if(fld == "JOB-PGRPH"+DetailLine)
		parent.GroupProfile.Detail[Index].JobPGrph = val;
	else if(fld == "EMP-PROFIC"+DetailLine)
		parent.GroupProfile.Detail[Index].EmployeeProficiency = val;
	else if(fld == "REQUIRED"+DetailLine)
		parent.GroupProfile.Detail[Index].Required = "Y";
	else if(fld == "QUAL-MIN-PROF"+DetailLine)
		parent.GroupProfile.Detail[Index].QualMinProf = val;
}

function V_TR02_1(fld, val)
{
	switch(fld)
	{
		case "RQS-COURSE":
			parent.CoursePrerequisites.Course = val;
			break;
		case "CRS-EFFECTIVE-DATE":
			parent.CoursePrerequisites.EffectDate = val;
			break;
		case "CRS-SHORT-CRS-DESC":
			parent.CoursePrerequisites.CourseDesc = val;
			break;
		default: GrabOther_TR02_Detail(fld, val);
			break;
	}
}

function GrabOther_TR02_Detail(fld, val)
{
	var Index = parent.CoursePrerequisites.Detail.length-1;
	var re = /RQS-PREREQ-TYPE(\d+)$/;

	if (fld.search(re) != -1)
	{
		DetailLine++;
		parent.CoursePrerequisites.Detail[++Index] = new parent.CoursePrerequisitesDetailObject();
	}

	if(fld == "RQS-PREREQ-TYPE"+DetailLine)
		parent.CoursePrerequisites.Detail[Index].Type = val;
	else if(fld == "PREREQ-COURSE-DESC"+DetailLine)
		parent.CoursePrerequisites.Detail[Index].CourseDescription = val;
	else if(fld == "PCO-COMPETENCY-DESC"+DetailLine)
		parent.CoursePrerequisites.Detail[Index].CompDescription = val;
	else if(fld == "PRG-DESCRIPTION"+DetailLine)
		parent.CoursePrerequisites.Detail[Index].GroupDescription = val;
	else if(fld == "RQS-PREREQUISITE"+DetailLine)
		parent.CoursePrerequisites.Detail[Index].Prerequisite = val;
	else if(fld == "RQS-COMPANY"+DetailLine)
		parent.CoursePrerequisites.Detail[Index].Company = val;
	else if(fld == "PRS-NAME"+DetailLine)
		parent.CoursePrerequisites.Detail[Index].CompanyName = val;
	else if(fld == "RQS-PROFIC-LEVEL"+DetailLine)
		parent.CoursePrerequisites.Detail[Index].MinimumProficiency = val;
	else if(fld == "RQS-DATE-TYPE"+DetailLine)
		parent.CoursePrerequisites.Detail[Index].FromDate = val;
	else if(fld == "RQS-DATE-MEASURE"+DetailLine)
		parent.CoursePrerequisites.Detail[Index].DateMeasure = val;
	else if(fld == "RQS-UNIT-TYPE"+DetailLine)
		parent.CoursePrerequisites.Detail[Index].Length = val;
	else if(fld == "RQS-REQUIRED-FLAG"+DetailLine)
		parent.CoursePrerequisites.Detail[Index].Required = val;
}

function DataReturned(fldnbr,msgnbr,msg)
{
	gmsgnbr		= msgnbr
	gmsg 		= msg
	gfldnbr 	= fldnbr
}
</script>
</head>
<body></body>
</html>
<!-- Version: 8-)@(#)@10.00.05.00.12 -->
<!-- $Header: /cvs/cvs_archive/applications/webtier/shr/src/xhrnet/careermanagement/lib/cm_lawheader.htm,v 1.3.6.14 2013/11/04 22:45:42 brentd Exp $ -->
<!--************************************************************
 *                                                             *
 *                           NOTICE                            *
 *                                                             *
 *   THIS SOFTWARE IS THE PROPERTY OF AND CONTAINS             *
 *   CONFIDENTIAL INFORMATION OF INFOR AND/OR ITS              *
 *   AFFILIATES OR SUBSIDIARIES AND SHALL NOT BE DISCLOSED     *
 *   WITHOUT PRIOR WRITTEN PERMISSION. LICENSED CUSTOMERS MAY  *
 *   COPY AND ADAPT THIS SOFTWARE FOR THEIR OWN USE IN         *
 *   ACCORDANCE WITH THE TERMS OF THEIR SOFTWARE LICENSE       *
 *   AGREEMENT. ALL OTHER RIGHTS RESERVED.                     *
 *                                                             *
 *   (c) COPYRIGHT 2014 INFOR.  ALL RIGHTS RESERVED.           *
 *   THE WORD AND DESIGN MARKS SET FORTH HEREIN ARE            *
 *   TRADEMARKS AND/OR REGISTERED TRADEMARKS OF INFOR          *
 *   AND/OR ITS AFFILIATES AND SUBSIDIARIES. ALL               *
 *   RIGHTS RESERVED.  ALL OTHER TRADEMARKS LISTED HEREIN ARE  *
 *   THE PROPERTY OF THEIR RESPECTIVE OWNERS.                  *
 *                                                             *
 ************************************************************-->
